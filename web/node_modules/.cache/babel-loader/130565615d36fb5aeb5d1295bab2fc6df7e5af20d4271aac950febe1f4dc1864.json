{"ast":null,"code":"import { AbstractClient } from \"./AbstractClient\";\nimport { SpeakLiveClient } from \"./SpeakLiveClient\";\nimport { SpeakRestClient } from \"./SpeakRestClient\";\n/**\n * The `SpeakClient` class extends the `AbstractClient` class and provides access to the \"speak\" namespace.\n * It exposes two methods:\n *\n * 1. `request()`: Returns a `SpeakRestClient` instance for interacting with the rest speak API.\n * 2. `live(ttsOptions: SpeakSchema = {}, endpoint = \":version/speak\")`: Returns a `SpeakLiveClient` instance for interacting with the live speak API, with the provided TTS options and endpoint.\n */\nexport class SpeakClient extends AbstractClient {\n  constructor() {\n    super(...arguments);\n    this.namespace = \"speak\";\n  }\n  /**\n   * Returns a `SpeakRestClient` instance for interacting with the rest speak API.\n   */\n  request(source, options, endpoint = \":version/speak\") {\n    const client = new SpeakRestClient(this.options);\n    return client.request(source, options, endpoint);\n  }\n  /**\n   * Returns a `SpeakLiveClient` instance for interacting with the live speak API, with the provided TTS options and endpoint.\n   * @param {SpeakSchema} [ttsOptions={}] - The TTS options to use for the live speak API.\n   * @param {string} [endpoint=\":version/speak\"] - The endpoint to use for the live speak API.\n   * @returns {SpeakLiveClient} - A `SpeakLiveClient` instance for interacting with the live speak API.\n   */\n  live(ttsOptions = {}, endpoint = \":version/speak\") {\n    return new SpeakLiveClient(this.options, ttsOptions, endpoint);\n  }\n}","map":{"version":3,"names":["AbstractClient","SpeakLiveClient","SpeakRestClient","SpeakClient","constructor","namespace","request","source","options","endpoint","client","live","ttsOptions"],"sources":["/Users/niko/node_modules/.pnpm/@deepgram+sdk@3.11.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@deepgram/sdk/src/packages/SpeakClient.ts"],"sourcesContent":["import { AbstractClient } from \"./AbstractClient\";\nimport { SpeakLiveClient } from \"./SpeakLiveClient\";\nimport { SpeakRestClient } from \"./SpeakRestClient\";\nimport { SpeakSchema } from \"../lib/types\";\nimport { TextSource } from \"../lib/types\";\n\n/**\n * The `SpeakClient` class extends the `AbstractClient` class and provides access to the \"speak\" namespace.\n * It exposes two methods:\n *\n * 1. `request()`: Returns a `SpeakRestClient` instance for interacting with the rest speak API.\n * 2. `live(ttsOptions: SpeakSchema = {}, endpoint = \":version/speak\")`: Returns a `SpeakLiveClient` instance for interacting with the live speak API, with the provided TTS options and endpoint.\n */\nexport class SpeakClient extends AbstractClient {\n  public namespace: string = \"speak\";\n\n  /**\n   * Returns a `SpeakRestClient` instance for interacting with the rest speak API.\n   */\n  public request(source: TextSource, options?: SpeakSchema, endpoint = \":version/speak\") {\n    const client = new SpeakRestClient(this.options);\n\n    return client.request(source, options, endpoint);\n  }\n\n  /**\n   * Returns a `SpeakLiveClient` instance for interacting with the live speak API, with the provided TTS options and endpoint.\n   * @param {SpeakSchema} [ttsOptions={}] - The TTS options to use for the live speak API.\n   * @param {string} [endpoint=\":version/speak\"] - The endpoint to use for the live speak API.\n   * @returns {SpeakLiveClient} - A `SpeakLiveClient` instance for interacting with the live speak API.\n   */\n  public live(ttsOptions: SpeakSchema = {}, endpoint: string = \":version/speak\"): SpeakLiveClient {\n    return new SpeakLiveClient(this.options, ttsOptions, endpoint);\n  }\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,eAAe,QAAQ,mBAAmB;AAInD;;;;;;;AAOA,OAAM,MAAOC,WAAY,SAAQH,cAAc;EAA/CI,YAAA;;IACS,KAAAC,SAAS,GAAW,OAAO;EAoBpC;EAlBE;;;EAGOC,OAAOA,CAACC,MAAkB,EAAEC,OAAqB,EAAEC,QAAQ,GAAG,gBAAgB;IACnF,MAAMC,MAAM,GAAG,IAAIR,eAAe,CAAC,IAAI,CAACM,OAAO,CAAC;IAEhD,OAAOE,MAAM,CAACJ,OAAO,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,CAAC;EAClD;EAEA;;;;;;EAMOE,IAAIA,CAACC,UAAA,GAA0B,EAAE,EAAEH,QAAA,GAAmB,gBAAgB;IAC3E,OAAO,IAAIR,eAAe,CAAC,IAAI,CAACO,OAAO,EAAEI,UAAU,EAAEH,QAAQ,CAAC;EAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}