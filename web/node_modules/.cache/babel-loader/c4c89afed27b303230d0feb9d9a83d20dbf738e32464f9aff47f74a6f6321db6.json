{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DeepgramError, DeepgramUnknownError } from \"../lib/errors\";\nimport { isTextSource } from \"../lib/helpers\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n/**\n * Provides a client for interacting with the Deepgram Text-to-Speech API.\n */\nexport class SpeakRestClient extends AbstractRestClient {\n  constructor() {\n    super(...arguments);\n    this.namespace = \"speak\";\n  }\n  /**\n   * Sends a request to the Deepgram Text-to-Speech API to generate audio from the provided text source.\n   *\n   * @param source - The text source to be converted to audio.\n   * @param options - Optional configuration options for the text-to-speech request.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/speak\".\n   * @returns A promise that resolves to the SpeakRestClient instance, which can be used to retrieve the response headers and body.\n   * @throws {DeepgramError} If the text source type is unknown.\n   * @throws {DeepgramUnknownError} If the request was made before a previous request completed.\n   * @see https://developers.deepgram.com/reference/text-to-speech-api\n   */\n  request(source, options, endpoint = \":version/speak\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      let body;\n      if (isTextSource(source)) {\n        body = JSON.stringify(source);\n      } else {\n        throw new DeepgramError(\"Unknown transcription source type\");\n      }\n      const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign({\n        model: \"aura-asteria-en\"\n      }, options));\n      this.result = yield this.post(requestUrl, body, {\n        headers: {\n          Accept: \"audio/*\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      return this;\n    });\n  }\n  /**\n   * Retrieves the response body as a readable stream.\n   *\n   * @returns A promise that resolves to the response body as a readable stream, or `null` if no request has been made yet.\n   * @throws {DeepgramUnknownError} If a request has not been made yet.\n   */\n  getStream() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.result) throw new DeepgramUnknownError(\"Tried to get stream before making request\", \"\");\n      return this.result.body;\n    });\n  }\n  /**\n   * Retrieves the response headers from the previous request.\n   *\n   * @returns A promise that resolves to the response headers, or throws a `DeepgramUnknownError` if no request has been made yet.\n   */\n  getHeaders() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.result) throw new DeepgramUnknownError(\"Tried to get headers before making request\", \"\");\n      return this.result.headers;\n    });\n  }\n}","map":{"version":3,"names":["DeepgramError","DeepgramUnknownError","isTextSource","AbstractRestClient","SpeakRestClient","constructor","namespace","request","source","options","endpoint","body","JSON","stringify","requestUrl","getRequestUrl","Object","assign","model","result","post","headers","Accept","getStream","getHeaders"],"sources":["/Users/niko/node_modules/.pnpm/@deepgram+sdk@3.11.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@deepgram/sdk/src/packages/SpeakRestClient.ts"],"sourcesContent":["import { DeepgramError, DeepgramUnknownError } from \"../lib/errors\";\nimport { isTextSource } from \"../lib/helpers\";\nimport { SpeakSchema, TextSource } from \"../lib/types\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n\n/**\n * Provides a client for interacting with the Deepgram Text-to-Speech API.\n */\nexport class SpeakRestClient extends AbstractRestClient {\n  public namespace: string = \"speak\";\n  public result: undefined | Response;\n\n  /**\n   * Sends a request to the Deepgram Text-to-Speech API to generate audio from the provided text source.\n   *\n   * @param source - The text source to be converted to audio.\n   * @param options - Optional configuration options for the text-to-speech request.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/speak\".\n   * @returns A promise that resolves to the SpeakRestClient instance, which can be used to retrieve the response headers and body.\n   * @throws {DeepgramError} If the text source type is unknown.\n   * @throws {DeepgramUnknownError} If the request was made before a previous request completed.\n   * @see https://developers.deepgram.com/reference/text-to-speech-api\n   */\n  async request(\n    source: TextSource,\n    options?: SpeakSchema,\n    endpoint = \":version/speak\"\n  ): Promise<SpeakRestClient> {\n    let body;\n\n    if (isTextSource(source)) {\n      body = JSON.stringify(source);\n    } else {\n      throw new DeepgramError(\"Unknown transcription source type\");\n    }\n\n    const requestUrl = this.getRequestUrl(\n      endpoint,\n      {},\n      { ...{ model: \"aura-asteria-en\" }, ...options }\n    );\n    this.result = await this.post(requestUrl, body, {\n      headers: { Accept: \"audio/*\", \"Content-Type\": \"application/json\" },\n    });\n\n    return this;\n  }\n\n  /**\n   * Retrieves the response body as a readable stream.\n   *\n   * @returns A promise that resolves to the response body as a readable stream, or `null` if no request has been made yet.\n   * @throws {DeepgramUnknownError} If a request has not been made yet.\n   */\n  async getStream(): Promise<ReadableStream<Uint8Array> | null> {\n    if (!this.result)\n      throw new DeepgramUnknownError(\"Tried to get stream before making request\", \"\");\n\n    return this.result.body;\n  }\n\n  /**\n   * Retrieves the response headers from the previous request.\n   *\n   * @returns A promise that resolves to the response headers, or throws a `DeepgramUnknownError` if no request has been made yet.\n   */\n  async getHeaders(): Promise<Headers> {\n    if (!this.result)\n      throw new DeepgramUnknownError(\"Tried to get headers before making request\", \"\");\n\n    return this.result.headers;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,aAAa,EAAEC,oBAAoB,QAAQ,eAAe;AACnE,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,SAASC,kBAAkB,QAAQ,sBAAsB;AAEzD;;;AAGA,OAAM,MAAOC,eAAgB,SAAQD,kBAAkB;EAAvDE,YAAA;;IACS,KAAAC,SAAS,GAAW,OAAO;EA+DpC;EA5DE;;;;;;;;;;;EAWMC,OAAOA,CACXC,MAAkB,EAClBC,OAAqB,EACrBC,QAAQ,GAAG,gBAAgB;;MAE3B,IAAIC,IAAI;MAER,IAAIT,YAAY,CAACM,MAAM,CAAC,EAAE;QACxBG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACL,MAAM,CAAC;OAC9B,MAAM;QACL,MAAM,IAAIR,aAAa,CAAC,mCAAmC,CAAC;;MAG9D,MAAMc,UAAU,GAAG,IAAI,CAACC,aAAa,CACnCL,QAAQ,EACR,EAAE,EAAAM,MAAA,CAAAC,MAAA,CACG;QAAEC,KAAK,EAAE;MAAiB,CAAE,EAAKT,OAAO,EAC9C;MACD,IAAI,CAACU,MAAM,GAAG,MAAM,IAAI,CAACC,IAAI,CAACN,UAAU,EAAEH,IAAI,EAAE;QAC9CU,OAAO,EAAE;UAAEC,MAAM,EAAE,SAAS;UAAE,cAAc,EAAE;QAAkB;OACjE,CAAC;MAEF,OAAO,IAAI;IACb,CAAC;;EAED;;;;;;EAMMC,SAASA,CAAA;;MACb,IAAI,CAAC,IAAI,CAACJ,MAAM,EACd,MAAM,IAAIlB,oBAAoB,CAAC,2CAA2C,EAAE,EAAE,CAAC;MAEjF,OAAO,IAAI,CAACkB,MAAM,CAACR,IAAI;IACzB,CAAC;;EAED;;;;;EAKMa,UAAUA,CAAA;;MACd,IAAI,CAAC,IAAI,CAACL,MAAM,EACd,MAAM,IAAIlB,oBAAoB,CAAC,4CAA4C,EAAE,EAAE,CAAC;MAElF,OAAO,IAAI,CAACkB,MAAM,CAACE,OAAO;IAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}