{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isFileSource, isUrlSource } from \"../lib/helpers\";\nimport { DeepgramError, isDeepgramError } from \"../lib/errors\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n/**\n * The `ListenRestClient` class extends the `AbstractRestClient` class and provides methods for transcribing audio from URLs or files using the Deepgram API.\n *\n * The `transcribeUrl` method is used to transcribe audio from a URL synchronously. It takes a `UrlSource` object as the source, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n *\n * The `transcribeFile` method is used to transcribe audio from a file synchronously. It takes a `FileSource` object as the source, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n *\n * The `transcribeUrlCallback` method is used to transcribe audio from a URL asynchronously. It takes a `UrlSource` object as the source, a `CallbackUrl` object as the callback, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n *\n * The `transcribeFileCallback` method is used to transcribe audio from a file asynchronously. It takes a `FileSource` object as the source, a `CallbackUrl` object as the callback, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n */\nexport class ListenRestClient extends AbstractRestClient {\n  constructor() {\n    super(...arguments);\n    this.namespace = \"listen\";\n  }\n  /**\n   * Transcribes audio from a URL synchronously.\n   *\n   * @param source - The URL source object containing the audio URL to transcribe.\n   * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n   * @param endpoint - An optional endpoint string to use for the transcription request.\n   * @returns A `DeepgramResponse` object containing the transcription result or an error.\n   */\n  transcribeUrl(source, options, endpoint = \":version/listen\") {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        if (isUrlSource(source)) {\n          body = JSON.stringify(source);\n        } else {\n          throw new DeepgramError(\"Unknown transcription source type\");\n        }\n        if (options !== undefined && \"callback\" in options) {\n          throw new DeepgramError(\"Callback cannot be provided as an option to a synchronous transcription. Use `transcribeUrlCallback` or `transcribeFileCallback` instead.\");\n        }\n        if (((_a = options === null || options === void 0 ? void 0 : options.keyterm) === null || _a === void 0 ? void 0 : _a.length) && !((_b = options.model) === null || _b === void 0 ? void 0 : _b.startsWith(\"nova-3\"))) {\n          throw new DeepgramError(\"Keyterms are only supported with the Nova 3 models.\");\n        }\n        const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign({}, options));\n        const result = yield this.post(requestUrl, body).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Transcribes audio from a file asynchronously.\n   *\n   * @param source - The file source object containing the audio file to transcribe.\n   * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n   * @param endpoint - An optional endpoint string to use for the transcription request.\n   * @returns A `DeepgramResponse` object containing the transcription result or an error.\n   */\n  transcribeFile(source, options, endpoint = \":version/listen\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        if (isFileSource(source)) {\n          body = source;\n        } else {\n          throw new DeepgramError(\"Unknown transcription source type\");\n        }\n        if (options !== undefined && \"callback\" in options) {\n          throw new DeepgramError(\"Callback cannot be provided as an option to a synchronous transcription. Use `transcribeUrlCallback` or `transcribeFileCallback` instead.\");\n        }\n        const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign({}, options));\n        const result = yield this.post(requestUrl, body, {\n          headers: {\n            \"Content-Type\": \"deepgram/audio+video\"\n          }\n        }).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Transcribes audio from a URL asynchronously.\n   *\n   * @param source - The URL source object containing the audio file to transcribe.\n   * @param callback - The callback URL to receive the transcription result.\n   * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n   * @param endpoint - An optional endpoint string to use for the transcription request.\n   * @returns A `DeepgramResponse` object containing the transcription result or an error.\n   */\n  transcribeUrlCallback(source, callback, options, endpoint = \":version/listen\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        if (isUrlSource(source)) {\n          body = JSON.stringify(source);\n        } else {\n          throw new DeepgramError(\"Unknown transcription source type\");\n        }\n        const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign(Object.assign({}, options), {\n          callback: callback.toString()\n        }));\n        const result = yield this.post(requestUrl, body).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Transcribes audio from a file asynchronously.\n   *\n   * @param source - The file source object containing the audio file to transcribe.\n   * @param callback - The callback URL to receive the transcription result.\n   * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n   * @param endpoint - An optional endpoint string to use for the transcription request.\n   * @returns A `DeepgramResponse` object containing the transcription result or an error.\n   */\n  transcribeFileCallback(source, callback, options, endpoint = \":version/listen\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        if (isFileSource(source)) {\n          body = source;\n        } else {\n          throw new DeepgramError(\"Unknown transcription source type\");\n        }\n        const requestUrl = this.getRequestUrl(endpoint, {}, Object.assign(Object.assign({}, options), {\n          callback: callback.toString()\n        }));\n        const result = yield this.post(requestUrl, body, {\n          headers: {\n            \"Content-Type\": \"deepgram/audio+video\"\n          }\n        }).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n}\nexport { ListenRestClient as PrerecordedClient };","map":{"version":3,"names":["isFileSource","isUrlSource","DeepgramError","isDeepgramError","AbstractRestClient","ListenRestClient","constructor","namespace","transcribeUrl","source","options","endpoint","body","JSON","stringify","undefined","_a","keyterm","length","_b","model","startsWith","requestUrl","getRequestUrl","Object","assign","result","post","then","json","error","transcribeFile","headers","transcribeUrlCallback","callback","toString","transcribeFileCallback","PrerecordedClient"],"sources":["/Users/niko/node_modules/.pnpm/@deepgram+sdk@3.11.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@deepgram/sdk/src/packages/ListenRestClient.ts"],"sourcesContent":["import { CallbackUrl, isFileSource, isUrlSource } from \"../lib/helpers\";\nimport { DeepgramError, isDeepgramError } from \"../lib/errors\";\nimport type {\n  AsyncPrerecordedResponse,\n  DeepgramResponse,\n  FileSource,\n  PrerecordedSchema,\n  SyncPrerecordedResponse,\n  UrlSource,\n} from \"../lib/types\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n\n/**\n * The `ListenRestClient` class extends the `AbstractRestClient` class and provides methods for transcribing audio from URLs or files using the Deepgram API.\n *\n * The `transcribeUrl` method is used to transcribe audio from a URL synchronously. It takes a `UrlSource` object as the source, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n *\n * The `transcribeFile` method is used to transcribe audio from a file synchronously. It takes a `FileSource` object as the source, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n *\n * The `transcribeUrlCallback` method is used to transcribe audio from a URL asynchronously. It takes a `UrlSource` object as the source, a `CallbackUrl` object as the callback, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n *\n * The `transcribeFileCallback` method is used to transcribe audio from a file asynchronously. It takes a `FileSource` object as the source, a `CallbackUrl` object as the callback, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n */\nexport class ListenRestClient extends AbstractRestClient {\n  public namespace: string = \"listen\";\n\n  /**\n   * Transcribes audio from a URL synchronously.\n   *\n   * @param source - The URL source object containing the audio URL to transcribe.\n   * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n   * @param endpoint - An optional endpoint string to use for the transcription request.\n   * @returns A `DeepgramResponse` object containing the transcription result or an error.\n   */\n  async transcribeUrl(\n    source: UrlSource,\n    options?: PrerecordedSchema,\n    endpoint = \":version/listen\"\n  ): Promise<DeepgramResponse<SyncPrerecordedResponse>> {\n    try {\n      let body;\n\n      if (isUrlSource(source)) {\n        body = JSON.stringify(source);\n      } else {\n        throw new DeepgramError(\"Unknown transcription source type\");\n      }\n\n      if (options !== undefined && \"callback\" in options) {\n        throw new DeepgramError(\n          \"Callback cannot be provided as an option to a synchronous transcription. Use `transcribeUrlCallback` or `transcribeFileCallback` instead.\"\n        );\n      }\n\n      if (options?.keyterm?.length && !options.model?.startsWith(\"nova-3\")) {\n        throw new DeepgramError(\"Keyterms are only supported with the Nova 3 models.\");\n      }\n\n      const requestUrl = this.getRequestUrl(endpoint, {}, { ...{}, ...options });\n      const result: SyncPrerecordedResponse = await this.post(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Transcribes audio from a file asynchronously.\n   *\n   * @param source - The file source object containing the audio file to transcribe.\n   * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n   * @param endpoint - An optional endpoint string to use for the transcription request.\n   * @returns A `DeepgramResponse` object containing the transcription result or an error.\n   */\n  async transcribeFile(\n    source: FileSource,\n    options?: PrerecordedSchema,\n    endpoint = \":version/listen\"\n  ): Promise<DeepgramResponse<SyncPrerecordedResponse>> {\n    try {\n      let body;\n\n      if (isFileSource(source)) {\n        body = source;\n      } else {\n        throw new DeepgramError(\"Unknown transcription source type\");\n      }\n\n      if (options !== undefined && \"callback\" in options) {\n        throw new DeepgramError(\n          \"Callback cannot be provided as an option to a synchronous transcription. Use `transcribeUrlCallback` or `transcribeFileCallback` instead.\"\n        );\n      }\n\n      const requestUrl = this.getRequestUrl(endpoint, {}, { ...{}, ...options });\n      const result: SyncPrerecordedResponse = await this.post(requestUrl, body, {\n        headers: { \"Content-Type\": \"deepgram/audio+video\" },\n      }).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Transcribes audio from a URL asynchronously.\n   *\n   * @param source - The URL source object containing the audio file to transcribe.\n   * @param callback - The callback URL to receive the transcription result.\n   * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n   * @param endpoint - An optional endpoint string to use for the transcription request.\n   * @returns A `DeepgramResponse` object containing the transcription result or an error.\n   */\n  async transcribeUrlCallback(\n    source: UrlSource,\n    callback: CallbackUrl,\n    options?: PrerecordedSchema,\n    endpoint = \":version/listen\"\n  ): Promise<DeepgramResponse<AsyncPrerecordedResponse>> {\n    try {\n      let body;\n\n      if (isUrlSource(source)) {\n        body = JSON.stringify(source);\n      } else {\n        throw new DeepgramError(\"Unknown transcription source type\");\n      }\n\n      const requestUrl = this.getRequestUrl(\n        endpoint,\n        {},\n        { ...options, callback: callback.toString() }\n      );\n      const result: AsyncPrerecordedResponse = await this.post(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Transcribes audio from a file asynchronously.\n   *\n   * @param source - The file source object containing the audio file to transcribe.\n   * @param callback - The callback URL to receive the transcription result.\n   * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n   * @param endpoint - An optional endpoint string to use for the transcription request.\n   * @returns A `DeepgramResponse` object containing the transcription result or an error.\n   */\n  async transcribeFileCallback(\n    source: FileSource,\n    callback: CallbackUrl,\n    options?: PrerecordedSchema,\n    endpoint = \":version/listen\"\n  ): Promise<DeepgramResponse<AsyncPrerecordedResponse>> {\n    try {\n      let body;\n\n      if (isFileSource(source)) {\n        body = source;\n      } else {\n        throw new DeepgramError(\"Unknown transcription source type\");\n      }\n\n      const requestUrl = this.getRequestUrl(\n        endpoint,\n        {},\n        { ...options, callback: callback.toString() }\n      );\n      const result: AsyncPrerecordedResponse = await this.post(requestUrl, body, {\n        headers: { \"Content-Type\": \"deepgram/audio+video\" },\n      }).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n}\n\nexport { ListenRestClient as PrerecordedClient };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}