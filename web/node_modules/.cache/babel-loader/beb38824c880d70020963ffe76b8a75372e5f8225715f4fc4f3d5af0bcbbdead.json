{"ast":null,"code":"var _jsxFileName = \"/Users/niko/digital-human/frontend/src/contexts/WebSocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { useConfig } from './ConfigContext';\nimport { useNotification } from './NotificationContext';\n\n// 创建上下文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketContext = /*#__PURE__*/createContext();\n\n// WebSocket提供者组件\nexport const WebSocketProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    config\n  } = useConfig();\n  const {\n    success,\n    error\n  } = useNotification();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('offline');\n  const [statusMessage, setStatusMessage] = useState('等待连接...');\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [lastMessage, setLastMessage] = useState(null);\n\n  // 初始化WebSocket连接\n  const initWebSocket = useCallback(() => {\n    // 修改WebSocket URL，确保连接到正确的后端地址\n    const wsUrl = 'ws://localhost:8000/ws';\n    let reconnectAttempts = 0;\n    const maxReconnectAttempts = 5;\n    const baseReconnectDelay = 1000; // 1秒\n\n    const connect = () => {\n      updateStatus('connecting', `连接中... ${reconnectAttempts > 0 ? `(尝试 ${reconnectAttempts}/${maxReconnectAttempts})` : ''}`);\n      console.log(`尝试连接到WebSocket: ${wsUrl}`);\n\n      // 创建WebSocket连接\n      const newSocket = new WebSocket(wsUrl);\n\n      // 连接打开\n      newSocket.onopen = () => {\n        console.log('WebSocket连接已建立');\n        setIsConnected(true);\n        updateStatus('online', '已连接');\n        reconnectAttempts = 0; // 重置重连计数\n\n        // 发送配置\n        newSocket.send(JSON.stringify({\n          type: 'config',\n          config: config\n        }));\n\n        // 显示成功通知\n        if (reconnectAttempts > 0) {\n          success('连接已恢复');\n        }\n      };\n\n      // 连接关闭\n      newSocket.onclose = event => {\n        console.log('WebSocket连接已关闭:', event);\n        setIsConnected(false);\n        if (reconnectAttempts < maxReconnectAttempts) {\n          // 指数退避重连\n          const delay = Math.min(baseReconnectDelay * Math.pow(2, reconnectAttempts), 30000);\n          reconnectAttempts++;\n          updateStatus('reconnecting', `连接已断开，${delay / 1000}秒后重连... (${reconnectAttempts}/${maxReconnectAttempts})`);\n\n          // 显示重连通知\n          if (reconnectAttempts === 1) {\n            error('连接已断开，正在尝试重连...');\n          }\n          setTimeout(connect, delay);\n        } else {\n          updateStatus('offline', '连接失败，请检查网络并刷新页面');\n          error('连接失败，请检查网络并刷新页面');\n        }\n      };\n\n      // 连接错误\n      newSocket.onerror = err => {\n        console.error('WebSocket连接错误:', err);\n        error('连接发生错误，正在尝试重连...');\n      };\n\n      // 收到消息\n      newSocket.onmessage = event => {\n        try {\n          // 检查是否为二进制数据（音频）\n          if (event.data instanceof Blob) {\n            handleAudioMessage(event.data);\n            return;\n          }\n\n          // 尝试解析JSON消息\n          const data = JSON.parse(event.data);\n          console.log('收到消息:', data);\n\n          // 更新最近消息状态\n          setLastMessage(data);\n\n          // 根据消息类型处理\n          switch (data.type) {\n            case 'thinking':\n              updateLoading(true, data.message || '思考中...');\n              break;\n            case 'bot_reply':\n              updateLoading(false);\n              break;\n            case 'generating_video':\n              updateLoading(true, data.message || '生成视频中...');\n              break;\n            case 'video_ready':\n              updateLoading(false);\n              if (data.success && data.video_url) {\n                console.log('视频已就绪:', data.video_url);\n              }\n              break;\n            case 'error':\n              updateLoading(false);\n              error(data.message || '发生错误');\n              break;\n            default:\n              break;\n          }\n        } catch (err) {\n          console.error('处理WebSocket消息错误:', err);\n        }\n      };\n      setSocket(newSocket);\n    };\n    connect();\n\n    // 组件卸载时清理WebSocket连接\n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, [config, success, error]);\n\n  // 组件挂载时初始化WebSocket\n  useEffect(() => {\n    initWebSocket();\n\n    // 清理函数\n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, [initWebSocket]);\n\n  // 更新状态\n  const updateStatus = (status, message) => {\n    setConnectionStatus(status);\n    setStatusMessage(message);\n  };\n\n  // 设置加载状态\n  const setLoading = (isLoading, message = '') => {\n    setIsLoading(isLoading);\n    setLoadingMessage(message);\n  };\n\n  // 发送消息\n  const sendMessage = useCallback(message => {\n    if (socket && isConnected) {\n      try {\n        console.log('发送消息:', message);\n        socket.send(JSON.stringify(message));\n        return true;\n      } catch (err) {\n        console.error('发送消息失败:', err);\n        error('发送消息失败');\n        return false;\n      }\n    } else {\n      console.warn('WebSocket未连接，无法发送消息');\n      error('未连接到服务器，请稍后重试');\n      return false;\n    }\n  }, [socket, isConnected, error]);\n\n  // 发送音频数据\n  const sendAudioData = useCallback((blob, config) => {\n    if (socket && isConnected) {\n      try {\n        console.log('发送音频数据', blob.size);\n\n        // 使用 FileReader 读取 Blob 为 ArrayBuffer\n        const reader = new FileReader();\n        reader.onload = e => {\n          const arrayBuffer = e.target.result;\n\n          // 发送音频二进制数据\n          socket.send(arrayBuffer);\n\n          // 发送元数据\n          sendMessage({\n            type: 'audio_metadata',\n            config: config\n          });\n        };\n        reader.readAsArrayBuffer(blob);\n        return true;\n      } catch (err) {\n        console.error('发送音频数据失败:', err);\n        error('发送音频数据失败');\n        return false;\n      }\n    } else {\n      console.warn('WebSocket未连接，无法发送音频数据');\n      error('未连接到服务器，请稍后重试');\n      return false;\n    }\n  }, [socket, isConnected, sendMessage, error]);\n\n  // 处理服务器消息\n  const handleServerMessage = message => {\n    // 创建自定义事件并分发，这样组件可以监听此事件\n    const event = new CustomEvent('server-message', {\n      detail: message\n    });\n    window.dispatchEvent(event);\n\n    // 处理加载状态\n    if (message.status === 'processing') {\n      setLoading(true, message.message || '处理中...');\n    } else {\n      setLoading(false);\n    }\n  };\n\n  // 处理音频响应\n  const handleAudioResponse = message => {\n    console.log('收到音频响应', message);\n    if (message.audio) {\n      try {\n        // 将 base64 编码的音频解码为 ArrayBuffer\n        const audioData = Uint8Array.from(atob(message.audio), c => c.charCodeAt(0)).buffer;\n\n        // 创建 Blob\n        const blob = new Blob([audioData], {\n          type: 'audio/wav'\n        });\n\n        // 创建 URL 并播放\n        const audioUrl = URL.createObjectURL(blob);\n        const audio = new Audio(audioUrl);\n        audio.onended = () => {\n          URL.revokeObjectURL(audioUrl);\n        };\n        audio.play().catch(e => {\n          console.error('播放音频失败:', e);\n          error('播放音频失败');\n        });\n      } catch (err) {\n        console.error('处理音频响应失败:', err);\n        error('处理音频响应失败');\n      }\n    }\n  };\n\n  // 处理音频消息\n  const handleAudioMessage = audioData => {\n    console.log('收到音频消息', audioData);\n    try {\n      // 创建 Blob\n      const blob = new Blob([audioData], {\n        type: 'audio/wav'\n      });\n\n      // 创建 URL 并播放\n      const audioUrl = URL.createObjectURL(blob);\n      const audio = new Audio(audioUrl);\n      audio.onended = () => {\n        URL.revokeObjectURL(audioUrl);\n      };\n      audio.play().catch(e => {\n        console.error('播放音频失败:', e);\n        error('播放音频失败');\n      });\n    } catch (err) {\n      console.error('处理音频消息失败:', err);\n      error('处理音频消息失败');\n    }\n  };\n\n  // 提供上下文值\n  const contextValue = {\n    socket,\n    isConnected,\n    connectionStatus,\n    statusMessage,\n    isLoading,\n    loadingMessage,\n    lastMessage,\n    sendMessage,\n    sendAudioData,\n    setLoading\n  };\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n};\n\n// 自定义Hook，用于在组件中访问WebSocket功能\n_s(WebSocketProvider, \"SecKGAWa6X8qmjaYhCshTILC8NA=\", false, function () {\n  return [useConfig, useNotification];\n});\n_c = WebSocketProvider;\nexport const useWebSocket = () => {\n  _s2();\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocket 必须在 WebSocketProvider 内部使用');\n  }\n  return context;\n};\n_s2(useWebSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","useConfig","useNotification","jsxDEV","_jsxDEV","WebSocketContext","WebSocketProvider","children","_s","config","success","error","socket","setSocket","isConnected","setIsConnected","connectionStatus","setConnectionStatus","statusMessage","setStatusMessage","isLoading","setIsLoading","loadingMessage","setLoadingMessage","lastMessage","setLastMessage","initWebSocket","wsUrl","reconnectAttempts","maxReconnectAttempts","baseReconnectDelay","connect","updateStatus","console","log","newSocket","WebSocket","onopen","send","JSON","stringify","type","onclose","event","delay","Math","min","pow","setTimeout","onerror","err","onmessage","data","Blob","handleAudioMessage","parse","updateLoading","message","video_url","close","status","setLoading","sendMessage","warn","sendAudioData","blob","size","reader","FileReader","onload","e","arrayBuffer","target","result","readAsArrayBuffer","handleServerMessage","CustomEvent","detail","window","dispatchEvent","handleAudioResponse","audio","audioData","Uint8Array","from","atob","c","charCodeAt","buffer","audioUrl","URL","createObjectURL","Audio","onended","revokeObjectURL","play","catch","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWebSocket","_s2","context","Error","$RefreshReg$"],"sources":["/Users/niko/digital-human/frontend/src/contexts/WebSocketContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { useConfig } from './ConfigContext';\nimport { useNotification } from './NotificationContext';\n\n// 创建上下文\nconst WebSocketContext = createContext();\n\n// WebSocket提供者组件\nexport const WebSocketProvider = ({ children }) => {\n  const { config } = useConfig();\n  const { success, error } = useNotification();\n  \n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('offline');\n  const [statusMessage, setStatusMessage] = useState('等待连接...');\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [lastMessage, setLastMessage] = useState(null);\n\n  // 初始化WebSocket连接\n  const initWebSocket = useCallback(() => {\n    // 修改WebSocket URL，确保连接到正确的后端地址\n    const wsUrl = 'ws://localhost:8000/ws';\n    \n    let reconnectAttempts = 0;\n    const maxReconnectAttempts = 5;\n    const baseReconnectDelay = 1000; // 1秒\n    \n    const connect = () => {\n      updateStatus('connecting', `连接中... ${reconnectAttempts > 0 ? `(尝试 ${reconnectAttempts}/${maxReconnectAttempts})` : ''}`);\n      \n      console.log(`尝试连接到WebSocket: ${wsUrl}`);\n      \n      // 创建WebSocket连接\n      const newSocket = new WebSocket(wsUrl);\n      \n      // 连接打开\n      newSocket.onopen = () => {\n        console.log('WebSocket连接已建立');\n        setIsConnected(true);\n        updateStatus('online', '已连接');\n        reconnectAttempts = 0; // 重置重连计数\n        \n        // 发送配置\n        newSocket.send(JSON.stringify({\n          type: 'config',\n          config: config\n        }));\n        \n        // 显示成功通知\n        if (reconnectAttempts > 0) {\n          success('连接已恢复');\n        }\n      };\n      \n      // 连接关闭\n      newSocket.onclose = (event) => {\n        console.log('WebSocket连接已关闭:', event);\n        setIsConnected(false);\n        \n        if (reconnectAttempts < maxReconnectAttempts) {\n          // 指数退避重连\n          const delay = Math.min(baseReconnectDelay * Math.pow(2, reconnectAttempts), 30000);\n          reconnectAttempts++;\n          \n          updateStatus('reconnecting', `连接已断开，${delay / 1000}秒后重连... (${reconnectAttempts}/${maxReconnectAttempts})`);\n          \n          // 显示重连通知\n          if (reconnectAttempts === 1) {\n            error('连接已断开，正在尝试重连...');\n          }\n          \n          setTimeout(connect, delay);\n        } else {\n          updateStatus('offline', '连接失败，请检查网络并刷新页面');\n          error('连接失败，请检查网络并刷新页面');\n        }\n      };\n      \n      // 连接错误\n      newSocket.onerror = (err) => {\n        console.error('WebSocket连接错误:', err);\n        error('连接发生错误，正在尝试重连...');\n      };\n      \n      // 收到消息\n      newSocket.onmessage = (event) => {\n        try {\n          // 检查是否为二进制数据（音频）\n          if (event.data instanceof Blob) {\n            handleAudioMessage(event.data);\n            return;\n          }\n          \n          // 尝试解析JSON消息\n          const data = JSON.parse(event.data);\n          console.log('收到消息:', data);\n          \n          // 更新最近消息状态\n          setLastMessage(data);\n          \n          // 根据消息类型处理\n          switch (data.type) {\n            case 'thinking':\n              updateLoading(true, data.message || '思考中...');\n              break;\n            case 'bot_reply':\n              updateLoading(false);\n              break;\n            case 'generating_video':\n              updateLoading(true, data.message || '生成视频中...');\n              break;\n            case 'video_ready':\n              updateLoading(false);\n              if (data.success && data.video_url) {\n                console.log('视频已就绪:', data.video_url);\n              }\n              break;\n            case 'error':\n              updateLoading(false);\n              error(data.message || '发生错误');\n              break;\n            default:\n              break;\n          }\n        } catch (err) {\n          console.error('处理WebSocket消息错误:', err);\n        }\n      };\n      \n      setSocket(newSocket);\n    };\n    \n    connect();\n    \n    // 组件卸载时清理WebSocket连接\n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, [config, success, error]);\n\n  // 组件挂载时初始化WebSocket\n  useEffect(() => {\n    initWebSocket();\n    \n    // 清理函数\n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, [initWebSocket]);\n\n  // 更新状态\n  const updateStatus = (status, message) => {\n    setConnectionStatus(status);\n    setStatusMessage(message);\n  };\n\n  // 设置加载状态\n  const setLoading = (isLoading, message = '') => {\n    setIsLoading(isLoading);\n    setLoadingMessage(message);\n  };\n\n  // 发送消息\n  const sendMessage = useCallback((message) => {\n    if (socket && isConnected) {\n      try {\n        console.log('发送消息:', message);\n        socket.send(JSON.stringify(message));\n        return true;\n      } catch (err) {\n        console.error('发送消息失败:', err);\n        error('发送消息失败');\n        return false;\n      }\n    } else {\n      console.warn('WebSocket未连接，无法发送消息');\n      error('未连接到服务器，请稍后重试');\n      return false;\n    }\n  }, [socket, isConnected, error]);\n\n  // 发送音频数据\n  const sendAudioData = useCallback((blob, config) => {\n    if (socket && isConnected) {\n      try {\n        console.log('发送音频数据', blob.size);\n        \n        // 使用 FileReader 读取 Blob 为 ArrayBuffer\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          const arrayBuffer = e.target.result;\n          \n          // 发送音频二进制数据\n          socket.send(arrayBuffer);\n          \n          // 发送元数据\n          sendMessage({ \n            type: 'audio_metadata',\n            config: config\n          });\n        };\n        reader.readAsArrayBuffer(blob);\n        \n        return true;\n      } catch (err) {\n        console.error('发送音频数据失败:', err);\n        error('发送音频数据失败');\n        return false;\n      }\n    } else {\n      console.warn('WebSocket未连接，无法发送音频数据');\n      error('未连接到服务器，请稍后重试');\n      return false;\n    }\n  }, [socket, isConnected, sendMessage, error]);\n\n  // 处理服务器消息\n  const handleServerMessage = (message) => {\n    // 创建自定义事件并分发，这样组件可以监听此事件\n    const event = new CustomEvent('server-message', { detail: message });\n    window.dispatchEvent(event);\n    \n    // 处理加载状态\n    if (message.status === 'processing') {\n      setLoading(true, message.message || '处理中...');\n    } else {\n      setLoading(false);\n    }\n  };\n\n  // 处理音频响应\n  const handleAudioResponse = (message) => {\n    console.log('收到音频响应', message);\n    \n    if (message.audio) {\n      try {\n        // 将 base64 编码的音频解码为 ArrayBuffer\n        const audioData = Uint8Array.from(atob(message.audio), c => c.charCodeAt(0)).buffer;\n        \n        // 创建 Blob\n        const blob = new Blob([audioData], { type: 'audio/wav' });\n        \n        // 创建 URL 并播放\n        const audioUrl = URL.createObjectURL(blob);\n        const audio = new Audio(audioUrl);\n        \n        audio.onended = () => {\n          URL.revokeObjectURL(audioUrl);\n        };\n        \n        audio.play().catch(e => {\n          console.error('播放音频失败:', e);\n          error('播放音频失败');\n        });\n      } catch (err) {\n        console.error('处理音频响应失败:', err);\n        error('处理音频响应失败');\n      }\n    }\n  };\n\n  // 处理音频消息\n  const handleAudioMessage = (audioData) => {\n    console.log('收到音频消息', audioData);\n    \n    try {\n      // 创建 Blob\n      const blob = new Blob([audioData], { type: 'audio/wav' });\n      \n      // 创建 URL 并播放\n      const audioUrl = URL.createObjectURL(blob);\n      const audio = new Audio(audioUrl);\n      \n      audio.onended = () => {\n        URL.revokeObjectURL(audioUrl);\n      };\n      \n      audio.play().catch(e => {\n        console.error('播放音频失败:', e);\n        error('播放音频失败');\n      });\n    } catch (err) {\n      console.error('处理音频消息失败:', err);\n      error('处理音频消息失败');\n    }\n  };\n\n  // 提供上下文值\n  const contextValue = {\n    socket,\n    isConnected,\n    connectionStatus,\n    statusMessage,\n    isLoading,\n    loadingMessage,\n    lastMessage,\n    sendMessage,\n    sendAudioData,\n    setLoading\n  };\n\n  return (\n    <WebSocketContext.Provider value={contextValue}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n};\n\n// 自定义Hook，用于在组件中访问WebSocket功能\nexport const useWebSocket = () => {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocket 必须在 WebSocketProvider 内部使用');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}