{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect,useCallback}from'react';import{useConfig}from'./ConfigContext';import{useNotification}from'./NotificationContext';// 创建上下文\nimport{jsx as _jsx}from\"react/jsx-runtime\";const WebSocketContext=/*#__PURE__*/createContext();// WebSocket提供者组件\nexport const WebSocketProvider=_ref=>{let{children}=_ref;const{config}=useConfig();const{success,error}=useNotification();const[socket,setSocket]=useState(null);const[isConnected,setIsConnected]=useState(false);const[connectionStatus,setConnectionStatus]=useState('offline');const[statusMessage,setStatusMessage]=useState('等待连接...');const[isLoading,setIsLoading]=useState(false);const[loadingMessage,setLoadingMessage]=useState('');// 初始化WebSocket连接\nconst initWebSocket=useCallback(()=>{const protocol=window.location.protocol==='https:'?'wss:':'ws:';const wsUrl=`${protocol}//${window.location.host}/ws`;let reconnectAttempts=0;const maxReconnectAttempts=5;const baseReconnectDelay=1000;// 1秒\nconst connect=()=>{updateStatus('connecting',`连接中... ${reconnectAttempts>0?`(尝试 ${reconnectAttempts}/${maxReconnectAttempts})`:''}`);// 创建WebSocket连接\nconst newSocket=new WebSocket(wsUrl);// 连接打开\nnewSocket.onopen=()=>{console.log('WebSocket连接已建立');setIsConnected(true);updateStatus('online','已连接');reconnectAttempts=0;// 重置重连计数\n// 发送配置\nnewSocket.send(JSON.stringify({type:'config',config:config}));// 显示成功通知\nif(reconnectAttempts>0){success('连接已恢复');}};// 接收消息\nnewSocket.onmessage=event=>{// 处理二进制数据 (音频)\nif(event.data instanceof Blob){handleAudioResponse(event.data);}// 处理JSON数据\nelse{try{const message=JSON.parse(event.data);handleServerMessage(message);}catch(e){console.error('解析服务器消息失败:',e);error('服务器返回了无效数据');}}};// 连接关闭\nnewSocket.onclose=event=>{console.log(`WebSocket连接已关闭: ${event.code}`);setIsConnected(false);updateStatus('offline','已断开连接');// 重连逻辑\nif(reconnectAttempts<maxReconnectAttempts){const delay=baseReconnectDelay*Math.pow(1.5,reconnectAttempts);reconnectAttempts++;console.log(`尝试重新连接... ${reconnectAttempts}/${maxReconnectAttempts} (${delay}ms后)`);updateStatus('connecting',`将在${Math.round(delay/1000)}秒后重新连接...`);setTimeout(connect,delay);}else{updateStatus('offline','连接失败，请刷新页面');error('无法连接到服务器，请刷新页面重试');}};// 连接错误\nnewSocket.onerror=connectionError=>{console.error('WebSocket错误:',connectionError);updateStatus('offline','连接错误');};setSocket(newSocket);};// 初始连接\nconnect();// 清理函数\nreturn()=>{if(socket){socket.close();}};},[config,error,success]);// 更新连接状态\nconst updateStatus=useCallback((state,text)=>{setConnectionStatus(state);setStatusMessage(text);},[]);// 处理服务器消息 - 会被Message组件使用，暂时为空\nconst handleServerMessage=useCallback(message=>{// 此函数将由具体的组件实现，这里只是提供接口\n// 派发自定义事件，让相关组件可以捕获和处理\nconst event=new CustomEvent('server-message',{detail:message});window.dispatchEvent(event);// 处理加载状态\nif(message.type==='response'||message.type==='error'){setIsLoading(false);}},[]);// 处理音频响应 - 会被AudioPlayer组件使用，暂时为空\nconst handleAudioResponse=useCallback(audioBlob=>{// 此函数将由具体的组件实现，这里只是提供接口\n// 派发自定义事件，让相关组件可以捕获和处理\nconst event=new CustomEvent('audio-response',{detail:audioBlob});window.dispatchEvent(event);// 处理加载状态\nsetIsLoading(false);},[]);// 发送消息\nconst sendMessage=useCallback((messageType,data)=>{if(!socket||!isConnected){error('未连接到服务器，请等待连接恢复');return false;}const message={type:messageType,...data};socket.send(JSON.stringify(message));return true;},[socket,isConnected,error]);// 发送音频数据\nconst sendAudioData=useCallback(audioBlob=>{if(!socket||!isConnected){error('未连接到服务器，请等待连接恢复');return false;}socket.send(audioBlob);return true;},[socket,isConnected,error]);// 设置加载状态\nconst setLoading=useCallback(function(loading){let message=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'处理中...';setIsLoading(loading);setLoadingMessage(message);},[]);// 初始化WebSocket\nuseEffect(()=>{initWebSocket();},[initWebSocket]);return/*#__PURE__*/_jsx(WebSocketContext.Provider,{value:{socket,isConnected,connectionStatus,statusMessage,isLoading,loadingMessage,setLoading,sendMessage,sendAudioData},children:children});};// 自定义Hook，用于在组件中访问WebSocket功能\nexport const useWebSocket=()=>{const context=useContext(WebSocketContext);if(!context){throw new Error('useWebSocket must be used within a WebSocketProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","useConfig","useNotification","jsx","_jsx","WebSocketContext","WebSocketProvider","_ref","children","config","success","error","socket","setSocket","isConnected","setIsConnected","connectionStatus","setConnectionStatus","statusMessage","setStatusMessage","isLoading","setIsLoading","loadingMessage","setLoadingMessage","initWebSocket","protocol","window","location","wsUrl","host","reconnectAttempts","maxReconnectAttempts","baseReconnectDelay","connect","updateStatus","newSocket","WebSocket","onopen","console","log","send","JSON","stringify","type","onmessage","event","data","Blob","handleAudioResponse","message","parse","handleServerMessage","e","onclose","code","delay","Math","pow","round","setTimeout","onerror","connectionError","close","state","text","CustomEvent","detail","dispatchEvent","audioBlob","sendMessage","messageType","sendAudioData","setLoading","loading","arguments","length","undefined","Provider","value","useWebSocket","context","Error"],"sources":["/Users/niko/digital-human/frontend/src/contexts/WebSocketContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { useConfig } from './ConfigContext';\nimport { useNotification } from './NotificationContext';\n\n// 创建上下文\nconst WebSocketContext = createContext();\n\n// WebSocket提供者组件\nexport const WebSocketProvider = ({ children }) => {\n  const { config } = useConfig();\n  const { success, error } = useNotification();\n  \n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('offline');\n  const [statusMessage, setStatusMessage] = useState('等待连接...');\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n\n  // 初始化WebSocket连接\n  const initWebSocket = useCallback(() => {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    let reconnectAttempts = 0;\n    const maxReconnectAttempts = 5;\n    const baseReconnectDelay = 1000; // 1秒\n    \n    const connect = () => {\n      updateStatus('connecting', `连接中... ${reconnectAttempts > 0 ? `(尝试 ${reconnectAttempts}/${maxReconnectAttempts})` : ''}`);\n      \n      // 创建WebSocket连接\n      const newSocket = new WebSocket(wsUrl);\n      \n      // 连接打开\n      newSocket.onopen = () => {\n        console.log('WebSocket连接已建立');\n        setIsConnected(true);\n        updateStatus('online', '已连接');\n        reconnectAttempts = 0; // 重置重连计数\n        \n        // 发送配置\n        newSocket.send(JSON.stringify({\n          type: 'config',\n          config: config\n        }));\n        \n        // 显示成功通知\n        if (reconnectAttempts > 0) {\n          success('连接已恢复');\n        }\n      };\n      \n      // 接收消息\n      newSocket.onmessage = (event) => {\n        // 处理二进制数据 (音频)\n        if (event.data instanceof Blob) {\n          handleAudioResponse(event.data);\n        } \n        // 处理JSON数据\n        else {\n          try {\n            const message = JSON.parse(event.data);\n            handleServerMessage(message);\n          } catch (e) {\n            console.error('解析服务器消息失败:', e);\n            error('服务器返回了无效数据');\n          }\n        }\n      };\n      \n      // 连接关闭\n      newSocket.onclose = (event) => {\n        console.log(`WebSocket连接已关闭: ${event.code}`);\n        setIsConnected(false);\n        updateStatus('offline', '已断开连接');\n        \n        // 重连逻辑\n        if (reconnectAttempts < maxReconnectAttempts) {\n          const delay = baseReconnectDelay * Math.pow(1.5, reconnectAttempts);\n          reconnectAttempts++;\n          console.log(`尝试重新连接... ${reconnectAttempts}/${maxReconnectAttempts} (${delay}ms后)`);\n          \n          updateStatus('connecting', `将在${Math.round(delay/1000)}秒后重新连接...`);\n          \n          setTimeout(connect, delay);\n        } else {\n          updateStatus('offline', '连接失败，请刷新页面');\n          error('无法连接到服务器，请刷新页面重试');\n        }\n      };\n      \n      // 连接错误\n      newSocket.onerror = (connectionError) => {\n        console.error('WebSocket错误:', connectionError);\n        updateStatus('offline', '连接错误');\n      };\n\n      setSocket(newSocket);\n    };\n    \n    // 初始连接\n    connect();\n\n    // 清理函数\n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, [config, error, success]);\n\n  // 更新连接状态\n  const updateStatus = useCallback((state, text) => {\n    setConnectionStatus(state);\n    setStatusMessage(text);\n  }, []);\n\n  // 处理服务器消息 - 会被Message组件使用，暂时为空\n  const handleServerMessage = useCallback((message) => {\n    // 此函数将由具体的组件实现，这里只是提供接口\n    // 派发自定义事件，让相关组件可以捕获和处理\n    const event = new CustomEvent('server-message', { detail: message });\n    window.dispatchEvent(event);\n\n    // 处理加载状态\n    if (message.type === 'response' || message.type === 'error') {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // 处理音频响应 - 会被AudioPlayer组件使用，暂时为空\n  const handleAudioResponse = useCallback((audioBlob) => {\n    // 此函数将由具体的组件实现，这里只是提供接口\n    // 派发自定义事件，让相关组件可以捕获和处理\n    const event = new CustomEvent('audio-response', { detail: audioBlob });\n    window.dispatchEvent(event);\n    \n    // 处理加载状态\n    setIsLoading(false);\n  }, []);\n\n  // 发送消息\n  const sendMessage = useCallback((messageType, data) => {\n    if (!socket || !isConnected) {\n      error('未连接到服务器，请等待连接恢复');\n      return false;\n    }\n\n    const message = {\n      type: messageType,\n      ...data\n    };\n\n    socket.send(JSON.stringify(message));\n    return true;\n  }, [socket, isConnected, error]);\n\n  // 发送音频数据\n  const sendAudioData = useCallback((audioBlob) => {\n    if (!socket || !isConnected) {\n      error('未连接到服务器，请等待连接恢复');\n      return false;\n    }\n\n    socket.send(audioBlob);\n    return true;\n  }, [socket, isConnected, error]);\n\n  // 设置加载状态\n  const setLoading = useCallback((loading, message = '处理中...') => {\n    setIsLoading(loading);\n    setLoadingMessage(message);\n  }, []);\n\n  // 初始化WebSocket\n  useEffect(() => {\n    initWebSocket();\n  }, [initWebSocket]);\n\n  return (\n    <WebSocketContext.Provider\n      value={{\n        socket,\n        isConnected,\n        connectionStatus,\n        statusMessage,\n        isLoading,\n        loadingMessage,\n        setLoading,\n        sendMessage,\n        sendAudioData\n      }}\n    >\n      {children}\n    </WebSocketContext.Provider>\n  );\n};\n\n// 自定义Hook，用于在组件中访问WebSocket功能\nexport const useWebSocket = () => {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocket must be used within a WebSocketProvider');\n  }\n  return context;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CAC1F,OAASC,SAAS,KAAQ,iBAAiB,CAC3C,OAASC,eAAe,KAAQ,uBAAuB,CAEvD;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,gBAAgB,cAAGT,aAAa,CAAC,CAAC,CAExC;AACA,MAAO,MAAM,CAAAU,iBAAiB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC5C,KAAM,CAAEE,MAAO,CAAC,CAAGR,SAAS,CAAC,CAAC,CAC9B,KAAM,CAAES,OAAO,CAAEC,KAAM,CAAC,CAAGT,eAAe,CAAC,CAAC,CAE5C,KAAM,CAACU,MAAM,CAAEC,SAAS,CAAC,CAAGhB,QAAQ,CAAC,IAAI,CAAC,CAC1C,KAAM,CAACiB,WAAW,CAAEC,cAAc,CAAC,CAAGlB,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACmB,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGpB,QAAQ,CAAC,SAAS,CAAC,CACnE,KAAM,CAACqB,aAAa,CAAEC,gBAAgB,CAAC,CAAGtB,QAAQ,CAAC,SAAS,CAAC,CAC7D,KAAM,CAACuB,SAAS,CAAEC,YAAY,CAAC,CAAGxB,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAACyB,cAAc,CAAEC,iBAAiB,CAAC,CAAG1B,QAAQ,CAAC,EAAE,CAAC,CAExD;AACA,KAAM,CAAA2B,aAAa,CAAGxB,WAAW,CAAC,IAAM,CACtC,KAAM,CAAAyB,QAAQ,CAAGC,MAAM,CAACC,QAAQ,CAACF,QAAQ,GAAK,QAAQ,CAAG,MAAM,CAAG,KAAK,CACvE,KAAM,CAAAG,KAAK,CAAG,GAAGH,QAAQ,KAAKC,MAAM,CAACC,QAAQ,CAACE,IAAI,KAAK,CAEvD,GAAI,CAAAC,iBAAiB,CAAG,CAAC,CACzB,KAAM,CAAAC,oBAAoB,CAAG,CAAC,CAC9B,KAAM,CAAAC,kBAAkB,CAAG,IAAI,CAAE;AAEjC,KAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CACpBC,YAAY,CAAC,YAAY,CAAE,UAAUJ,iBAAiB,CAAG,CAAC,CAAG,OAAOA,iBAAiB,IAAIC,oBAAoB,GAAG,CAAG,EAAE,EAAE,CAAC,CAExH;AACA,KAAM,CAAAI,SAAS,CAAG,GAAI,CAAAC,SAAS,CAACR,KAAK,CAAC,CAEtC;AACAO,SAAS,CAACE,MAAM,CAAG,IAAM,CACvBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAC7BxB,cAAc,CAAC,IAAI,CAAC,CACpBmB,YAAY,CAAC,QAAQ,CAAE,KAAK,CAAC,CAC7BJ,iBAAiB,CAAG,CAAC,CAAE;AAEvB;AACAK,SAAS,CAACK,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAC5BC,IAAI,CAAE,QAAQ,CACdlC,MAAM,CAAEA,MACV,CAAC,CAAC,CAAC,CAEH;AACA,GAAIqB,iBAAiB,CAAG,CAAC,CAAE,CACzBpB,OAAO,CAAC,OAAO,CAAC,CAClB,CACF,CAAC,CAED;AACAyB,SAAS,CAACS,SAAS,CAAIC,KAAK,EAAK,CAC/B;AACA,GAAIA,KAAK,CAACC,IAAI,WAAY,CAAAC,IAAI,CAAE,CAC9BC,mBAAmB,CAACH,KAAK,CAACC,IAAI,CAAC,CACjC,CACA;AAAA,IACK,CACH,GAAI,CACF,KAAM,CAAAG,OAAO,CAAGR,IAAI,CAACS,KAAK,CAACL,KAAK,CAACC,IAAI,CAAC,CACtCK,mBAAmB,CAACF,OAAO,CAAC,CAC9B,CAAE,MAAOG,CAAC,CAAE,CACVd,OAAO,CAAC3B,KAAK,CAAC,YAAY,CAAEyC,CAAC,CAAC,CAC9BzC,KAAK,CAAC,YAAY,CAAC,CACrB,CACF,CACF,CAAC,CAED;AACAwB,SAAS,CAACkB,OAAO,CAAIR,KAAK,EAAK,CAC7BP,OAAO,CAACC,GAAG,CAAC,mBAAmBM,KAAK,CAACS,IAAI,EAAE,CAAC,CAC5CvC,cAAc,CAAC,KAAK,CAAC,CACrBmB,YAAY,CAAC,SAAS,CAAE,OAAO,CAAC,CAEhC;AACA,GAAIJ,iBAAiB,CAAGC,oBAAoB,CAAE,CAC5C,KAAM,CAAAwB,KAAK,CAAGvB,kBAAkB,CAAGwB,IAAI,CAACC,GAAG,CAAC,GAAG,CAAE3B,iBAAiB,CAAC,CACnEA,iBAAiB,EAAE,CACnBQ,OAAO,CAACC,GAAG,CAAC,aAAaT,iBAAiB,IAAIC,oBAAoB,KAAKwB,KAAK,MAAM,CAAC,CAEnFrB,YAAY,CAAC,YAAY,CAAE,KAAKsB,IAAI,CAACE,KAAK,CAACH,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAElEI,UAAU,CAAC1B,OAAO,CAAEsB,KAAK,CAAC,CAC5B,CAAC,IAAM,CACLrB,YAAY,CAAC,SAAS,CAAE,YAAY,CAAC,CACrCvB,KAAK,CAAC,kBAAkB,CAAC,CAC3B,CACF,CAAC,CAED;AACAwB,SAAS,CAACyB,OAAO,CAAIC,eAAe,EAAK,CACvCvB,OAAO,CAAC3B,KAAK,CAAC,cAAc,CAAEkD,eAAe,CAAC,CAC9C3B,YAAY,CAAC,SAAS,CAAE,MAAM,CAAC,CACjC,CAAC,CAEDrB,SAAS,CAACsB,SAAS,CAAC,CACtB,CAAC,CAED;AACAF,OAAO,CAAC,CAAC,CAET;AACA,MAAO,IAAM,CACX,GAAIrB,MAAM,CAAE,CACVA,MAAM,CAACkD,KAAK,CAAC,CAAC,CAChB,CACF,CAAC,CACH,CAAC,CAAE,CAACrD,MAAM,CAAEE,KAAK,CAAED,OAAO,CAAC,CAAC,CAE5B;AACA,KAAM,CAAAwB,YAAY,CAAGlC,WAAW,CAAC,CAAC+D,KAAK,CAAEC,IAAI,GAAK,CAChD/C,mBAAmB,CAAC8C,KAAK,CAAC,CAC1B5C,gBAAgB,CAAC6C,IAAI,CAAC,CACxB,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAb,mBAAmB,CAAGnD,WAAW,CAAEiD,OAAO,EAAK,CACnD;AACA;AACA,KAAM,CAAAJ,KAAK,CAAG,GAAI,CAAAoB,WAAW,CAAC,gBAAgB,CAAE,CAAEC,MAAM,CAAEjB,OAAQ,CAAC,CAAC,CACpEvB,MAAM,CAACyC,aAAa,CAACtB,KAAK,CAAC,CAE3B;AACA,GAAII,OAAO,CAACN,IAAI,GAAK,UAAU,EAAIM,OAAO,CAACN,IAAI,GAAK,OAAO,CAAE,CAC3DtB,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAA2B,mBAAmB,CAAGhD,WAAW,CAAEoE,SAAS,EAAK,CACrD;AACA;AACA,KAAM,CAAAvB,KAAK,CAAG,GAAI,CAAAoB,WAAW,CAAC,gBAAgB,CAAE,CAAEC,MAAM,CAAEE,SAAU,CAAC,CAAC,CACtE1C,MAAM,CAACyC,aAAa,CAACtB,KAAK,CAAC,CAE3B;AACAxB,YAAY,CAAC,KAAK,CAAC,CACrB,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAgD,WAAW,CAAGrE,WAAW,CAAC,CAACsE,WAAW,CAAExB,IAAI,GAAK,CACrD,GAAI,CAAClC,MAAM,EAAI,CAACE,WAAW,CAAE,CAC3BH,KAAK,CAAC,iBAAiB,CAAC,CACxB,MAAO,MAAK,CACd,CAEA,KAAM,CAAAsC,OAAO,CAAG,CACdN,IAAI,CAAE2B,WAAW,CACjB,GAAGxB,IACL,CAAC,CAEDlC,MAAM,CAAC4B,IAAI,CAACC,IAAI,CAACC,SAAS,CAACO,OAAO,CAAC,CAAC,CACpC,MAAO,KAAI,CACb,CAAC,CAAE,CAACrC,MAAM,CAAEE,WAAW,CAAEH,KAAK,CAAC,CAAC,CAEhC;AACA,KAAM,CAAA4D,aAAa,CAAGvE,WAAW,CAAEoE,SAAS,EAAK,CAC/C,GAAI,CAACxD,MAAM,EAAI,CAACE,WAAW,CAAE,CAC3BH,KAAK,CAAC,iBAAiB,CAAC,CACxB,MAAO,MAAK,CACd,CAEAC,MAAM,CAAC4B,IAAI,CAAC4B,SAAS,CAAC,CACtB,MAAO,KAAI,CACb,CAAC,CAAE,CAACxD,MAAM,CAAEE,WAAW,CAAEH,KAAK,CAAC,CAAC,CAEhC;AACA,KAAM,CAAA6D,UAAU,CAAGxE,WAAW,CAAC,SAACyE,OAAO,CAAyB,IAAvB,CAAAxB,OAAO,CAAAyB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,QAAQ,CACzDrD,YAAY,CAACoD,OAAO,CAAC,CACrBlD,iBAAiB,CAAC0B,OAAO,CAAC,CAC5B,CAAC,CAAE,EAAE,CAAC,CAEN;AACAlD,SAAS,CAAC,IAAM,CACdyB,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,CAACA,aAAa,CAAC,CAAC,CAEnB,mBACEpB,IAAA,CAACC,gBAAgB,CAACwE,QAAQ,EACxBC,KAAK,CAAE,CACLlE,MAAM,CACNE,WAAW,CACXE,gBAAgB,CAChBE,aAAa,CACbE,SAAS,CACTE,cAAc,CACdkD,UAAU,CACVH,WAAW,CACXE,aACF,CAAE,CAAA/D,QAAA,CAEDA,QAAQ,CACgB,CAAC,CAEhC,CAAC,CAED;AACA,MAAO,MAAM,CAAAuE,YAAY,CAAGA,CAAA,GAAM,CAChC,KAAM,CAAAC,OAAO,CAAGlF,UAAU,CAACO,gBAAgB,CAAC,CAC5C,GAAI,CAAC2E,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,sDAAsD,CAAC,CACzE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}