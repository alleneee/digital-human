{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { resolveHeadersConstructor } from \"./helpers\";\nimport crossFetch from \"cross-fetch\";\n/**\n * Resolves the appropriate fetch function to use, either a custom fetch function provided as an argument, or the global fetch function if available, or the cross-fetch library if the global fetch function is not available.\n *\n * @param customFetch - An optional custom fetch function to use instead of the global fetch function.\n * @returns A fetch function that can be used to make HTTP requests.\n */\nexport const resolveFetch = customFetch => {\n  let _fetch;\n  if (customFetch) {\n    _fetch = customFetch;\n  } else if (typeof fetch === \"undefined\") {\n    _fetch = crossFetch;\n  } else {\n    _fetch = fetch;\n  }\n  return (...args) => _fetch(...args);\n};\n/**\n * Resolves a fetch function that includes an \"Authorization\" header with the provided API key.\n *\n * @param apiKey - The API key to include in the \"Authorization\" header.\n * @param customFetch - An optional custom fetch function to use instead of the global fetch function.\n * @returns A fetch function that can be used to make HTTP requests with the provided API key in the \"Authorization\" header.\n */\nexport const fetchWithAuth = (apiKey, customFetch) => {\n  const fetch = resolveFetch(customFetch);\n  const HeadersConstructor = resolveHeadersConstructor();\n  return (input, init) => __awaiter(void 0, void 0, void 0, function* () {\n    const headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);\n    if (!headers.has(\"Authorization\")) {\n      headers.set(\"Authorization\", `Token ${apiKey}`);\n    }\n    return fetch(input, Object.assign(Object.assign({}, init), {\n      headers\n    }));\n  });\n};\n/**\n * Resolves the appropriate Response object to use, either the global Response object if available, or the Response object from the cross-fetch library if the global Response object is not available.\n *\n * @returns The appropriate Response object to use for making HTTP requests.\n */\nexport const resolveResponse = () => __awaiter(void 0, void 0, void 0, function* () {\n  if (typeof Response === \"undefined\") {\n    return (yield import(\"cross-fetch\")).Response;\n  }\n  return Response;\n});","map":{"version":3,"names":["resolveHeadersConstructor","crossFetch","resolveFetch","customFetch","_fetch","fetch","args","fetchWithAuth","apiKey","HeadersConstructor","input","init","__awaiter","headers","has","set","Object","assign","resolveResponse","Response"],"sources":["/Users/niko/node_modules/.pnpm/@deepgram+sdk@3.11.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@deepgram/sdk/src/lib/fetch.ts"],"sourcesContent":["import { resolveHeadersConstructor } from \"./helpers\";\nimport crossFetch from \"cross-fetch\";\nimport type { Fetch } from \"./types\";\n\n/**\n * Resolves the appropriate fetch function to use, either a custom fetch function provided as an argument, or the global fetch function if available, or the cross-fetch library if the global fetch function is not available.\n *\n * @param customFetch - An optional custom fetch function to use instead of the global fetch function.\n * @returns A fetch function that can be used to make HTTP requests.\n */\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch;\n\n  if (customFetch) {\n    _fetch = customFetch;\n  } else if (typeof fetch === \"undefined\") {\n    _fetch = crossFetch as unknown as Fetch;\n  } else {\n    _fetch = fetch;\n  }\n\n  return (...args) => _fetch(...args);\n};\n\n/**\n * Resolves a fetch function that includes an \"Authorization\" header with the provided API key.\n *\n * @param apiKey - The API key to include in the \"Authorization\" header.\n * @param customFetch - An optional custom fetch function to use instead of the global fetch function.\n * @returns A fetch function that can be used to make HTTP requests with the provided API key in the \"Authorization\" header.\n */\nexport const fetchWithAuth = (apiKey: string, customFetch?: Fetch): Fetch => {\n  const fetch = resolveFetch(customFetch);\n  const HeadersConstructor = resolveHeadersConstructor();\n\n  return async (input, init) => {\n    const headers = new HeadersConstructor(init?.headers);\n\n    if (!headers.has(\"Authorization\")) {\n      headers.set(\"Authorization\", `Token ${apiKey}`);\n    }\n\n    return fetch(input, { ...init, headers });\n  };\n};\n\n/**\n * Resolves the appropriate Response object to use, either the global Response object if available, or the Response object from the cross-fetch library if the global Response object is not available.\n *\n * @returns The appropriate Response object to use for making HTTP requests.\n */\nexport const resolveResponse = async () => {\n  if (typeof Response === \"undefined\") {\n    return (await import(\"cross-fetch\")).Response;\n  }\n\n  return Response;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,yBAAyB,QAAQ,WAAW;AACrD,OAAOC,UAAU,MAAM,aAAa;AAGpC;;;;;;AAMA,OAAO,MAAMC,YAAY,GAAIC,WAAmB,IAAW;EACzD,IAAIC,MAAa;EAEjB,IAAID,WAAW,EAAE;IACfC,MAAM,GAAGD,WAAW;GACrB,MAAM,IAAI,OAAOE,KAAK,KAAK,WAAW,EAAE;IACvCD,MAAM,GAAGH,UAA8B;GACxC,MAAM;IACLG,MAAM,GAAGC,KAAK;;EAGhB,OAAO,CAAC,GAAGC,IAAI,KAAKF,MAAM,CAAC,GAAGE,IAAI,CAAC;AACrC,CAAC;AAED;;;;;;;AAOA,OAAO,MAAMC,aAAa,GAAGA,CAACC,MAAc,EAAEL,WAAmB,KAAW;EAC1E,MAAME,KAAK,GAAGH,YAAY,CAACC,WAAW,CAAC;EACvC,MAAMM,kBAAkB,GAAGT,yBAAyB,EAAE;EAEtD,OAAO,CAAOU,KAAK,EAAEC,IAAI,KAAIC,SAAA;IAC3B,MAAMC,OAAO,GAAG,IAAIJ,kBAAkB,CAACE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,OAAO,CAAC;IAErD,IAAI,CAACA,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,EAAE;MACjCD,OAAO,CAACE,GAAG,CAAC,eAAe,EAAE,SAASP,MAAM,EAAE,CAAC;;IAGjD,OAAOH,KAAK,CAACK,KAAK,EAAAM,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAON,IAAI;MAAEE;IAAO,GAAG;EAC3C,CAAC;AACH,CAAC;AAED;;;;;AAKA,OAAO,MAAMK,eAAe,GAAGA,CAAA,KAAWN,SAAA;EACxC,IAAI,OAAOO,QAAQ,KAAK,WAAW,EAAE;IACnC,OAAO,CAAC,MAAM,MAAM,CAAC,aAAa,CAAC,EAAEA,QAAQ;;EAG/C,OAAOA,QAAQ;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}