{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport { DEFAULT_OPTIONS, DEFAULT_URL } from \"../lib/constants\";\nimport { DeepgramError } from \"../lib/errors\";\nimport { appendSearchParams, applyDefaults, convertLegacyOptions } from \"../lib/helpers\";\nexport const noop = () => {};\n/**\n * Represents an abstract Deepgram client that provides a base implementation for interacting with the Deepgram API.\n *\n * The `AbstractClient` class is responsible for:\n * - Initializing the Deepgram API key\n * - Applying default options for the client and namespace\n * - Providing a namespace for organizing API requests\n *\n * Subclasses of `AbstractClient` should implement the specific functionality for interacting with the Deepgram API.\n */\nexport class AbstractClient extends EventEmitter {\n  /**\n   * Constructs a new instance of the DeepgramClient class with the provided options.\n   *\n   * @param options - The options to configure the DeepgramClient instance.\n   * @param options.key - The Deepgram API key to use for authentication. If not provided, the `DEEPGRAM_API_KEY` environment variable will be used.\n   * @param options.global - Global options that apply to all requests made by the DeepgramClient instance.\n   * @param options.global.fetch - Options to configure the fetch requests made by the DeepgramClient instance.\n   * @param options.global.fetch.options - Additional options to pass to the fetch function, such as `url` and `headers`.\n   * @param options.namespace - Options specific to a particular namespace within the DeepgramClient instance.\n   */\n  constructor(options) {\n    super();\n    this.factory = undefined;\n    this.namespace = \"global\";\n    this.version = \"v1\";\n    this.baseUrl = DEFAULT_URL;\n    this.logger = noop;\n    let key;\n    if (typeof options.key === \"function\") {\n      this.factory = options.key;\n      key = this.factory();\n    } else {\n      key = options.key;\n    }\n    if (!key) {\n      key = process.env.DEEPGRAM_API_KEY;\n    }\n    if (!key) {\n      throw new DeepgramError(\"A deepgram API key is required.\");\n    }\n    this.key = key;\n    options = convertLegacyOptions(options);\n    /**\n     * Apply default options.\n     */\n    this.options = applyDefaults(options, DEFAULT_OPTIONS);\n  }\n  /**\n   * Sets the version for the current instance of the Deepgram API and returns the instance.\n   *\n   * @param version - The version to set for the Deepgram API instance. Defaults to \"v1\" if not provided.\n   * @returns The current instance of the AbstractClient with the updated version.\n   */\n  v(version = \"v1\") {\n    this.version = version;\n    return this;\n  }\n  /**\n   * Gets the namespace options for the current instance of the AbstractClient.\n   * The namespace options include the default options merged with the global options,\n   * and the API key for the current instance.\n   *\n   * @returns The namespace options for the current instance.\n   */\n  get namespaceOptions() {\n    const defaults = applyDefaults(this.options[this.namespace], this.options.global);\n    return Object.assign(Object.assign({}, defaults), {\n      key: this.key\n    });\n  }\n  /**\n   * Generates a URL for an API endpoint with optional query parameters and transcription options.\n   *\n   * @param endpoint - The API endpoint URL, which may contain placeholders for fields.\n   * @param fields - An optional object containing key-value pairs to replace placeholders in the endpoint URL.\n   * @param transcriptionOptions - Optional transcription options to include as query parameters in the URL.\n   * @returns A URL object representing the constructed API request URL.\n   */\n  getRequestUrl(endpoint, fields = {\n    version: this.version\n  }, transcriptionOptions) {\n    /**\n     * If we pass in fields without a version, set a version.\n     */\n    fields.version = this.version;\n    /**\n     * Version and template the endpoint for input argument..\n     */\n    endpoint = endpoint.replace(/:(\\w+)/g, function (_, key) {\n      return fields[key];\n    });\n    /**\n     * Create a URL object.\n     */\n    const url = new URL(endpoint, this.baseUrl);\n    /**\n     * If there are transcription options, append them to the request as URL querystring parameters\n     */\n    if (transcriptionOptions) {\n      appendSearchParams(url.searchParams, transcriptionOptions);\n    }\n    return url;\n  }\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n}","map":{"version":3,"names":["EventEmitter","DEFAULT_OPTIONS","DEFAULT_URL","DeepgramError","appendSearchParams","applyDefaults","convertLegacyOptions","noop","AbstractClient","constructor","options","factory","undefined","namespace","version","baseUrl","logger","key","process","env","DEEPGRAM_API_KEY","v","namespaceOptions","defaults","global","Object","assign","getRequestUrl","endpoint","fields","transcriptionOptions","replace","_","url","URL","searchParams","log","kind","msg","data"],"sources":["/Users/niko/node_modules/.pnpm/@deepgram+sdk@3.11.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@deepgram/sdk/src/packages/AbstractClient.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\nimport { DEFAULT_OPTIONS, DEFAULT_URL } from \"../lib/constants\";\nimport { DeepgramError } from \"../lib/errors\";\nimport { appendSearchParams, applyDefaults, convertLegacyOptions } from \"../lib/helpers\";\nimport type {\n  DeepgramClientOptions,\n  DefaultClientOptions,\n  DefaultNamespaceOptions,\n  NamespaceOptions,\n} from \"../lib/types\";\n\nexport const noop = () => {};\n\n/**\n * Represents an abstract Deepgram client that provides a base implementation for interacting with the Deepgram API.\n *\n * The `AbstractClient` class is responsible for:\n * - Initializing the Deepgram API key\n * - Applying default options for the client and namespace\n * - Providing a namespace for organizing API requests\n *\n * Subclasses of `AbstractClient` should implement the specific functionality for interacting with the Deepgram API.\n */\nexport abstract class AbstractClient extends EventEmitter {\n  protected factory: Function | undefined = undefined;\n  protected key: string;\n  protected options: DefaultClientOptions;\n  public namespace: string = \"global\";\n  public version: string = \"v1\";\n  public baseUrl: string = DEFAULT_URL;\n  public logger: Function = noop;\n\n  /**\n   * Constructs a new instance of the DeepgramClient class with the provided options.\n   *\n   * @param options - The options to configure the DeepgramClient instance.\n   * @param options.key - The Deepgram API key to use for authentication. If not provided, the `DEEPGRAM_API_KEY` environment variable will be used.\n   * @param options.global - Global options that apply to all requests made by the DeepgramClient instance.\n   * @param options.global.fetch - Options to configure the fetch requests made by the DeepgramClient instance.\n   * @param options.global.fetch.options - Additional options to pass to the fetch function, such as `url` and `headers`.\n   * @param options.namespace - Options specific to a particular namespace within the DeepgramClient instance.\n   */\n  constructor(options: DeepgramClientOptions) {\n    super();\n\n    let key;\n\n    if (typeof options.key === \"function\") {\n      this.factory = options.key;\n      key = this.factory();\n    } else {\n      key = options.key;\n    }\n\n    if (!key) {\n      key = process.env.DEEPGRAM_API_KEY as string;\n    }\n\n    if (!key) {\n      throw new DeepgramError(\"A deepgram API key is required.\");\n    }\n\n    this.key = key;\n\n    options = convertLegacyOptions(options);\n\n    /**\n     * Apply default options.\n     */\n    this.options = applyDefaults<DeepgramClientOptions, DefaultClientOptions>(\n      options,\n      DEFAULT_OPTIONS\n    );\n  }\n\n  /**\n   * Sets the version for the current instance of the Deepgram API and returns the instance.\n   *\n   * @param version - The version to set for the Deepgram API instance. Defaults to \"v1\" if not provided.\n   * @returns The current instance of the AbstractClient with the updated version.\n   */\n  public v(version: string = \"v1\"): this {\n    this.version = version;\n\n    return this;\n  }\n\n  /**\n   * Gets the namespace options for the current instance of the AbstractClient.\n   * The namespace options include the default options merged with the global options,\n   * and the API key for the current instance.\n   *\n   * @returns The namespace options for the current instance.\n   */\n  get namespaceOptions(): DefaultNamespaceOptions {\n    const defaults = applyDefaults<NamespaceOptions, DefaultNamespaceOptions>(\n      (this.options as any)[this.namespace],\n      this.options.global\n    );\n\n    return {\n      ...defaults,\n      key: this.key,\n    };\n  }\n\n  /**\n   * Generates a URL for an API endpoint with optional query parameters and transcription options.\n   *\n   * @param endpoint - The API endpoint URL, which may contain placeholders for fields.\n   * @param fields - An optional object containing key-value pairs to replace placeholders in the endpoint URL.\n   * @param transcriptionOptions - Optional transcription options to include as query parameters in the URL.\n   * @returns A URL object representing the constructed API request URL.\n   */\n  public getRequestUrl(\n    endpoint: string,\n    fields: { [key: string]: string } = { version: this.version },\n    transcriptionOptions?: {\n      [key: string]: unknown;\n    }\n  ): URL {\n    /**\n     * If we pass in fields without a version, set a version.\n     */\n    fields.version = this.version;\n\n    /**\n     * Version and template the endpoint for input argument..\n     */\n    endpoint = endpoint.replace(/:(\\w+)/g, function (_, key) {\n      return fields![key];\n    });\n\n    /**\n     * Create a URL object.\n     */\n    const url = new URL(endpoint as string, this.baseUrl);\n\n    /**\n     * If there are transcription options, append them to the request as URL querystring parameters\n     */\n    if (transcriptionOptions) {\n      appendSearchParams(url.searchParams, transcriptionOptions);\n    }\n\n    return url;\n  }\n\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  public log(kind: string, msg: string, data?: any) {\n    this.logger(kind, msg, data);\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,QAAQ;AACrC,SAASC,eAAe,EAAEC,WAAW,QAAQ,kBAAkB;AAC/D,SAASC,aAAa,QAAQ,eAAe;AAC7C,SAASC,kBAAkB,EAAEC,aAAa,EAAEC,oBAAoB,QAAQ,gBAAgB;AAQxF,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAK,CAAE,CAAC;AAE5B;;;;;;;;;;AAUA,OAAM,MAAgBC,cAAe,SAAQR,YAAY;EASvD;;;;;;;;;;EAUAS,YAAYC,OAA8B;IACxC,KAAK,EAAE;IAnBC,KAAAC,OAAO,GAAyBC,SAAS;IAG5C,KAAAC,SAAS,GAAW,QAAQ;IAC5B,KAAAC,OAAO,GAAW,IAAI;IACtB,KAAAC,OAAO,GAAWb,WAAW;IAC7B,KAAAc,MAAM,GAAaT,IAAI;IAe5B,IAAIU,GAAG;IAEP,IAAI,OAAOP,OAAO,CAACO,GAAG,KAAK,UAAU,EAAE;MACrC,IAAI,CAACN,OAAO,GAAGD,OAAO,CAACO,GAAG;MAC1BA,GAAG,GAAG,IAAI,CAACN,OAAO,EAAE;KACrB,MAAM;MACLM,GAAG,GAAGP,OAAO,CAACO,GAAG;;IAGnB,IAAI,CAACA,GAAG,EAAE;MACRA,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,gBAA0B;;IAG9C,IAAI,CAACH,GAAG,EAAE;MACR,MAAM,IAAId,aAAa,CAAC,iCAAiC,CAAC;;IAG5D,IAAI,CAACc,GAAG,GAAGA,GAAG;IAEdP,OAAO,GAAGJ,oBAAoB,CAACI,OAAO,CAAC;IAEvC;;;IAGA,IAAI,CAACA,OAAO,GAAGL,aAAa,CAC1BK,OAAO,EACPT,eAAe,CAChB;EACH;EAEA;;;;;;EAMOoB,CAACA,CAACP,OAAA,GAAkB,IAAI;IAC7B,IAAI,CAACA,OAAO,GAAGA,OAAO;IAEtB,OAAO,IAAI;EACb;EAEA;;;;;;;EAOA,IAAIQ,gBAAgBA,CAAA;IAClB,MAAMC,QAAQ,GAAGlB,aAAa,CAC3B,IAAI,CAACK,OAAe,CAAC,IAAI,CAACG,SAAS,CAAC,EACrC,IAAI,CAACH,OAAO,CAACc,MAAM,CACpB;IAED,OAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKH,QAAQ;MACXN,GAAG,EAAE,IAAI,CAACA;IAAG;EAEjB;EAEA;;;;;;;;EAQOU,aAAaA,CAClBC,QAAgB,EAChBC,MAAA,GAAoC;IAAEf,OAAO,EAAE,IAAI,CAACA;EAAO,CAAE,EAC7DgB,oBAEC;IAED;;;IAGAD,MAAM,CAACf,OAAO,GAAG,IAAI,CAACA,OAAO;IAE7B;;;IAGAc,QAAQ,GAAGA,QAAQ,CAACG,OAAO,CAAC,SAAS,EAAE,UAAUC,CAAC,EAAEf,GAAG;MACrD,OAAOY,MAAO,CAACZ,GAAG,CAAC;IACrB,CAAC,CAAC;IAEF;;;IAGA,MAAMgB,GAAG,GAAG,IAAIC,GAAG,CAACN,QAAkB,EAAE,IAAI,CAACb,OAAO,CAAC;IAErD;;;IAGA,IAAIe,oBAAoB,EAAE;MACxB1B,kBAAkB,CAAC6B,GAAG,CAACE,YAAY,EAAEL,oBAAoB,CAAC;;IAG5D,OAAOG,GAAG;EACZ;EAEA;;;;;EAKOG,GAAGA,CAACC,IAAY,EAAEC,GAAW,EAAEC,IAAU;IAC9C,IAAI,CAACvB,MAAM,CAACqB,IAAI,EAAEC,GAAG,EAAEC,IAAI,CAAC;EAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}