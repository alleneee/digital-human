{"ast":null,"code":"var _jsxFileName = \"/Users/niko/digital-human/frontend/src/components/ChatSection/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatSection.css';\nimport { useWebSocket } from '../../contexts/WebSocketContext';\nimport { useNotification } from '../../contexts/NotificationContext';\nimport { useConfig } from '../../contexts/ConfigContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatSection = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const {\n    sendMessage,\n    sendAudioData,\n    isConnected,\n    setLoading\n  } = useWebSocket();\n  const {\n    error\n  } = useNotification();\n  const {\n    config\n  } = useConfig();\n\n  // 媒体录制相关的状态\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n\n  // 音频配置\n  const audioConfig = {\n    sampleRate: 16000,\n    channels: 1\n  };\n\n  // 监听服务器消息\n  useEffect(() => {\n    const handleServerMessage = event => {\n      const message = event.detail;\n      switch (message.type) {\n        case 'transcription':\n          if (message.text) {\n            addMessage(message.text, 'user');\n          }\n          break;\n        case 'response':\n          if (message.text) {\n            addMessage(message.text, 'ai');\n\n            // 如果响应中包含useEchoMimic标志，触发EchoMimic视频生成\n            if (message.useEchoMimic && config.refImagePath) {\n              // 生成视频处理过程已经在后端开始，显示等待提示\n              addStatusMessage('正在生成视频响应...');\n\n              // 尝试获取视频\n              fetch('/api/text_to_video', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  text: message.text,\n                  connection_id: 'default' // 可以从某处获取真实connection_id\n                })\n              }).then(response => response.json()).then(result => {\n                if (result.success) {\n                  // 视频生成成功，触发视频可用事件\n                  const videoEvent = new CustomEvent('videoAvailable', {\n                    detail: {\n                      videoUrl: result.videoUrl\n                    }\n                  });\n                  window.dispatchEvent(videoEvent);\n                  addStatusMessage('视频生成成功');\n                } else {\n                  throw new Error(result.error || '视频生成失败');\n                }\n              }).catch(err => {\n                console.error('视频生成错误:', err);\n                error(`视频生成失败: ${err.message}`);\n                addStatusMessage(`错误: ${err.message}`);\n              });\n            }\n          }\n          break;\n        case 'error':\n          addStatusMessage(`错误: ${message.message}`);\n          break;\n        default:\n          break;\n      }\n    };\n    window.addEventListener('server-message', handleServerMessage);\n\n    // 清理监听器\n    return () => {\n      window.removeEventListener('server-message', handleServerMessage);\n    };\n  }, []);\n\n  // 监听音频响应\n  useEffect(() => {\n    const handleAudioResponse = event => {\n      const audioBlob = event.detail;\n\n      // 创建音频URL并播放\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n\n      // 播放结束时释放资源\n      audio.onended = () => {\n        URL.revokeObjectURL(audioUrl);\n      };\n\n      // 播放音频\n      audio.play().catch(err => {\n        console.error('播放音频失败:', err);\n      });\n    };\n    window.addEventListener('audio-response', handleAudioResponse);\n\n    // 清理监听器\n    return () => {\n      window.removeEventListener('audio-response', handleAudioResponse);\n    };\n  }, []);\n\n  // 自动滚动到最新消息\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // 添加消息到聊天记录\n  const addMessage = (text, sender) => {\n    const time = getFormattedTime();\n    setMessages(prevMessages => [...prevMessages, {\n      text,\n      sender,\n      time\n    }]);\n  };\n\n  // 添加状态消息\n  const addStatusMessage = text => {\n    const time = getFormattedTime();\n    setMessages(prevMessages => [...prevMessages, {\n      text,\n      sender: 'status',\n      time\n    }]);\n  };\n\n  // 获取格式化的时间\n  const getFormattedTime = () => {\n    const now = new Date();\n    return `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n  };\n\n  // 滚动到底部\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n\n  // 发送文本消息\n  const handleSendMessage = async () => {\n    const text = inputText.trim();\n    if (text && isConnected) {\n      // 添加消息到聊天窗口\n      addMessage(text, 'user');\n\n      // 清空输入框\n      setInputText('');\n      if (config.useEchoMimic && config.refImagePath) {\n        // EchoMimic模式 - 直接生成视频\n        try {\n          setLoading(true, '生成视频中...');\n          addStatusMessage('正在生成视频响应...');\n          const response = await fetch('/api/text_to_video', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              text\n            })\n          });\n          if (!response.ok) {\n            throw new Error('视频生成请求失败');\n          }\n          const result = await response.json();\n          if (result.success) {\n            // 视频生成成功，触发视频可用事件\n            const videoEvent = new CustomEvent('videoAvailable', {\n              detail: {\n                videoUrl: result.videoUrl\n              }\n            });\n            window.dispatchEvent(videoEvent);\n\n            // 添加AI响应到聊天记录\n            if (result.text) {\n              addMessage(result.text, 'ai');\n            }\n            addStatusMessage('视频生成成功');\n          } else {\n            throw new Error(result.error || '视频生成失败');\n          }\n        } catch (err) {\n          console.error('视频生成错误:', err);\n          error(`视频生成失败: ${err.message}`);\n          addStatusMessage(`错误: ${err.message}`);\n\n          // 尝试回退到普通文本模式\n          sendMessage('text_input', {\n            text\n          });\n        } finally {\n          setLoading(false);\n        }\n      } else {\n        // 普通模式 - 使用现有流程\n        setLoading(true, '处理中...');\n        sendMessage('text_input', {\n          text\n        });\n      }\n    } else if (!isConnected) {\n      error('未连接到服务器，请等待连接恢复');\n    }\n  };\n\n  // 处理键盘事件\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // 切换录音状态\n  const toggleRecording = async () => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      await startRecording();\n    }\n  };\n\n  // 开始录音\n  const startRecording = async () => {\n    if (isRecording || !isConnected) {\n      if (!isConnected) {\n        error('未连接到服务器，请等待连接恢复');\n      }\n      return;\n    }\n    try {\n      // 请求麦克风访问权限\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: audioConfig.sampleRate,\n          channelCount: audioConfig.channels,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n\n      // 创建MediaRecorder实例\n      const recorder = new MediaRecorder(stream);\n      setMediaRecorder(recorder);\n      setAudioChunks([]);\n\n      // 收集音频数据\n      recorder.addEventListener('dataavailable', event => {\n        if (event.data.size > 0) {\n          setAudioChunks(prev => [...prev, event.data]);\n        }\n      });\n\n      // 录音结束后发送数据\n      recorder.addEventListener('stop', async () => {\n        const chunks = audioChunks;\n        if (chunks.length > 0 && isConnected) {\n          const audioBlob = new Blob(chunks, {\n            type: 'audio/wav'\n          });\n          if (config.useEchoMimic && config.refImagePath) {\n            // EchoMimic模式 - 生成视频\n            try {\n              setLoading(true, '生成视频中...');\n              addStatusMessage('正在处理语音并生成视频...');\n\n              // 创建 FormData 对象\n              const formData = new FormData();\n              formData.append('audio', audioBlob, 'audio.wav');\n\n              // 发送生成视频请求\n              const response = await fetch('/api/generate_video', {\n                method: 'POST',\n                body: formData\n              });\n              if (!response.ok) {\n                throw new Error('视频生成请求失败');\n              }\n              const result = await response.json();\n              if (result.success) {\n                // 视频生成成功，触发视频可用事件\n                const videoEvent = new CustomEvent('videoAvailable', {\n                  detail: {\n                    videoUrl: result.videoUrl\n                  }\n                });\n                window.dispatchEvent(videoEvent);\n\n                // 添加转录文本到聊天记录\n                if (result.transcription) {\n                  addMessage(result.transcription, 'user');\n                }\n\n                // 添加AI响应到聊天记录\n                if (result.response) {\n                  addMessage(result.response, 'ai');\n                }\n                addStatusMessage('视频生成成功');\n              } else {\n                throw new Error(result.error || '视频生成失败');\n              }\n            } catch (err) {\n              console.error('视频生成错误:', err);\n              error(`视频生成失败: ${err.message}`);\n              addStatusMessage(`错误: ${err.message}`);\n\n              // 尝试回退到普通语音模式\n              sendAudioData(audioBlob);\n            } finally {\n              setLoading(false);\n            }\n          } else {\n            // 普通模式 - 使用现有流程\n            setLoading(true, '处理语音中...');\n            addStatusMessage('正在处理语音...');\n            sendAudioData(audioBlob);\n          }\n        }\n      });\n\n      // 开始录音\n      recorder.start(100); // 每100ms触发一次dataavailable事件\n\n      // 更新UI\n      setIsRecording(true);\n    } catch (err) {\n      console.error('启动录音失败:', err);\n      error('无法访问麦克风，请确保已授予权限');\n    }\n  };\n\n  // 停止录音\n  const stopRecording = () => {\n    if (!isRecording || !mediaRecorder) return;\n\n    // 停止MediaRecorder\n    mediaRecorder.stop();\n\n    // 停止所有音轨\n    mediaRecorder.stream.getTracks().forEach(track => track.stop());\n\n    // 更新UI\n    setIsRecording(false);\n  };\n\n  // 修复useEffect依赖项\n  useEffect(() => {\n    if (config.refImagePath) {\n      addStatusMessage(`已选择参考图片: ${config.refImagePath.split('/').pop()}`);\n    }\n  }, [config.refImagePath, addMessage, addStatusMessage, error]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-title\",\n      children: \"\\u5BF9\\u8BDD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-chat\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u804A\\u5929\\u5DF2\\u51C6\\u5907\\u597D\\uFF0C\\u53D1\\u9001\\u6D88\\u606F\\u5F00\\u59CB\\u5BF9\\u8BDD\\u5427\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 11\n      }, this), messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message message-${message.sender}`,\n        children: message.sender === 'status' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-message\",\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-text\",\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-time\",\n            children: message.time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: inputRef,\n        className: \"user-input\",\n        placeholder: \"\\u8F93\\u5165\\u6D88\\u606F...\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value),\n        onKeyPress: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `record-btn ${isRecording ? 'recording' : ''}`,\n          onClick: toggleRecording,\n          title: isRecording ? '停止录音' : '开始录音',\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: `fas ${isRecording ? 'fa-stop' : 'fa-microphone'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"record-text\",\n            children: isRecording ? '停止录音' : '开始录音'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-btn\",\n          onClick: handleSendMessage,\n          disabled: !inputText.trim(),\n          title: \"\\u53D1\\u9001\\u6D88\\u606F\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-paper-plane\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatSection, \"hABxrCuUjloPFOuO4AtK+qsJK8c=\", false, function () {\n  return [useWebSocket, useNotification, useConfig];\n});\n_c = ChatSection;\nexport default ChatSection;\nvar _c;\n$RefreshReg$(_c, \"ChatSection\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useWebSocket","useNotification","useConfig","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatSection","_s","messages","setMessages","inputText","setInputText","isRecording","setIsRecording","messagesEndRef","inputRef","sendMessage","sendAudioData","isConnected","setLoading","error","config","mediaRecorder","setMediaRecorder","audioChunks","setAudioChunks","audioConfig","sampleRate","channels","handleServerMessage","event","message","detail","type","text","addMessage","useEchoMimic","refImagePath","addStatusMessage","fetch","method","headers","body","JSON","stringify","connection_id","then","response","json","result","success","videoEvent","CustomEvent","videoUrl","window","dispatchEvent","Error","catch","err","console","addEventListener","removeEventListener","handleAudioResponse","audioBlob","audioUrl","URL","createObjectURL","audio","Audio","onended","revokeObjectURL","play","scrollToBottom","sender","time","getFormattedTime","prevMessages","now","Date","getHours","toString","padStart","getMinutes","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","ok","handleKeyPress","e","key","shiftKey","preventDefault","toggleRecording","stopRecording","startRecording","stream","navigator","mediaDevices","getUserMedia","channelCount","echoCancellation","noiseSuppression","autoGainControl","recorder","MediaRecorder","data","size","prev","chunks","length","Blob","formData","FormData","append","transcription","start","stop","getTracks","forEach","track","split","pop","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","ref","placeholder","value","onChange","target","onKeyPress","onClick","title","disabled","_c","$RefreshReg$"],"sources":["/Users/niko/digital-human/frontend/src/components/ChatSection/index.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './ChatSection.css';\nimport { useWebSocket } from '../../contexts/WebSocketContext';\nimport { useNotification } from '../../contexts/NotificationContext';\nimport { useConfig } from '../../contexts/ConfigContext';\n\nconst ChatSection = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const { sendMessage, sendAudioData, isConnected, setLoading } = useWebSocket();\n  const { error } = useNotification();\n  const { config } = useConfig();\n  \n  // 媒体录制相关的状态\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  \n  // 音频配置\n  const audioConfig = {\n    sampleRate: 16000,\n    channels: 1\n  };\n  \n  // 监听服务器消息\n  useEffect(() => {\n    const handleServerMessage = (event) => {\n      const message = event.detail;\n      \n      switch (message.type) {\n        case 'transcription':\n          if (message.text) {\n            addMessage(message.text, 'user');\n          }\n          break;\n          \n        case 'response':\n          if (message.text) {\n            addMessage(message.text, 'ai');\n            \n            // 如果响应中包含useEchoMimic标志，触发EchoMimic视频生成\n            if (message.useEchoMimic && config.refImagePath) {\n              // 生成视频处理过程已经在后端开始，显示等待提示\n              addStatusMessage('正在生成视频响应...');\n              \n              // 尝试获取视频\n              fetch('/api/text_to_video', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ \n                  text: message.text,\n                  connection_id: 'default' // 可以从某处获取真实connection_id\n                })\n              })\n              .then(response => response.json())\n              .then(result => {\n                if (result.success) {\n                  // 视频生成成功，触发视频可用事件\n                  const videoEvent = new CustomEvent('videoAvailable', {\n                    detail: { videoUrl: result.videoUrl }\n                  });\n                  window.dispatchEvent(videoEvent);\n                  addStatusMessage('视频生成成功');\n                } else {\n                  throw new Error(result.error || '视频生成失败');\n                }\n              })\n              .catch(err => {\n                console.error('视频生成错误:', err);\n                error(`视频生成失败: ${err.message}`);\n                addStatusMessage(`错误: ${err.message}`);\n              })\n            }\n          }\n          break;\n          \n        case 'error':\n          addStatusMessage(`错误: ${message.message}`);\n          break;\n          \n        default:\n          break;\n      }\n    };\n    \n    window.addEventListener('server-message', handleServerMessage);\n    \n    // 清理监听器\n    return () => {\n      window.removeEventListener('server-message', handleServerMessage);\n    };\n  }, []);\n  \n  // 监听音频响应\n  useEffect(() => {\n    const handleAudioResponse = (event) => {\n      const audioBlob = event.detail;\n      \n      // 创建音频URL并播放\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      \n      // 播放结束时释放资源\n      audio.onended = () => {\n        URL.revokeObjectURL(audioUrl);\n      };\n      \n      // 播放音频\n      audio.play().catch(err => {\n        console.error('播放音频失败:', err);\n      });\n    };\n    \n    window.addEventListener('audio-response', handleAudioResponse);\n    \n    // 清理监听器\n    return () => {\n      window.removeEventListener('audio-response', handleAudioResponse);\n    };\n  }, []);\n  \n  // 自动滚动到最新消息\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  \n  // 添加消息到聊天记录\n  const addMessage = (text, sender) => {\n    const time = getFormattedTime();\n    setMessages(prevMessages => [\n      ...prevMessages,\n      { text, sender, time }\n    ]);\n  };\n  \n  // 添加状态消息\n  const addStatusMessage = (text) => {\n    const time = getFormattedTime();\n    setMessages(prevMessages => [\n      ...prevMessages,\n      { text, sender: 'status', time }\n    ]);\n  };\n  \n  // 获取格式化的时间\n  const getFormattedTime = () => {\n    const now = new Date();\n    return `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n  };\n  \n  // 滚动到底部\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n  \n  // 发送文本消息\n  const handleSendMessage = async () => {\n    const text = inputText.trim();\n    \n    if (text && isConnected) {\n      // 添加消息到聊天窗口\n      addMessage(text, 'user');\n      \n      // 清空输入框\n      setInputText('');\n      \n      if (config.useEchoMimic && config.refImagePath) {\n        // EchoMimic模式 - 直接生成视频\n        try {\n          setLoading(true, '生成视频中...');\n          addStatusMessage('正在生成视频响应...');\n          \n          const response = await fetch('/api/text_to_video', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ text })\n          });\n          \n          if (!response.ok) {\n            throw new Error('视频生成请求失败');\n          }\n          \n          const result = await response.json();\n          \n          if (result.success) {\n            // 视频生成成功，触发视频可用事件\n            const videoEvent = new CustomEvent('videoAvailable', {\n              detail: { videoUrl: result.videoUrl }\n            });\n            window.dispatchEvent(videoEvent);\n            \n            // 添加AI响应到聊天记录\n            if (result.text) {\n              addMessage(result.text, 'ai');\n            }\n            \n            addStatusMessage('视频生成成功');\n          } else {\n            throw new Error(result.error || '视频生成失败');\n          }\n          \n        } catch (err) {\n          console.error('视频生成错误:', err);\n          error(`视频生成失败: ${err.message}`);\n          addStatusMessage(`错误: ${err.message}`);\n          \n          // 尝试回退到普通文本模式\n          sendMessage('text_input', { text });\n        } finally {\n          setLoading(false);\n        }\n      } else {\n        // 普通模式 - 使用现有流程\n        setLoading(true, '处理中...');\n        sendMessage('text_input', { text });\n      }\n    } else if (!isConnected) {\n      error('未连接到服务器，请等待连接恢复');\n    }\n  };\n  \n  // 处理键盘事件\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  \n  // 切换录音状态\n  const toggleRecording = async () => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      await startRecording();\n    }\n  };\n  \n  // 开始录音\n  const startRecording = async () => {\n    if (isRecording || !isConnected) {\n      if (!isConnected) {\n        error('未连接到服务器，请等待连接恢复');\n      }\n      return;\n    }\n    \n    try {\n      // 请求麦克风访问权限\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          sampleRate: audioConfig.sampleRate,\n          channelCount: audioConfig.channels,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        } \n      });\n      \n      // 创建MediaRecorder实例\n      const recorder = new MediaRecorder(stream);\n      setMediaRecorder(recorder);\n      setAudioChunks([]);\n      \n      // 收集音频数据\n      recorder.addEventListener('dataavailable', event => {\n        if (event.data.size > 0) {\n          setAudioChunks(prev => [...prev, event.data]);\n        }\n      });\n      \n      // 录音结束后发送数据\n      recorder.addEventListener('stop', async () => {\n        const chunks = audioChunks;\n        if (chunks.length > 0 && isConnected) {\n          const audioBlob = new Blob(chunks, { type: 'audio/wav' });\n          \n          if (config.useEchoMimic && config.refImagePath) {\n            // EchoMimic模式 - 生成视频\n            try {\n              setLoading(true, '生成视频中...');\n              addStatusMessage('正在处理语音并生成视频...');\n              \n              // 创建 FormData 对象\n              const formData = new FormData();\n              formData.append('audio', audioBlob, 'audio.wav');\n              \n              // 发送生成视频请求\n              const response = await fetch('/api/generate_video', {\n                method: 'POST',\n                body: formData\n              });\n              \n              if (!response.ok) {\n                throw new Error('视频生成请求失败');\n              }\n              \n              const result = await response.json();\n              \n              if (result.success) {\n                // 视频生成成功，触发视频可用事件\n                const videoEvent = new CustomEvent('videoAvailable', {\n                  detail: { videoUrl: result.videoUrl }\n                });\n                window.dispatchEvent(videoEvent);\n                \n                // 添加转录文本到聊天记录\n                if (result.transcription) {\n                  addMessage(result.transcription, 'user');\n                }\n                \n                // 添加AI响应到聊天记录\n                if (result.response) {\n                  addMessage(result.response, 'ai');\n                }\n                \n                addStatusMessage('视频生成成功');\n              } else {\n                throw new Error(result.error || '视频生成失败');\n              }\n              \n            } catch (err) {\n              console.error('视频生成错误:', err);\n              error(`视频生成失败: ${err.message}`);\n              addStatusMessage(`错误: ${err.message}`);\n              \n              // 尝试回退到普通语音模式\n              sendAudioData(audioBlob);\n            } finally {\n              setLoading(false);\n            }\n          } else {\n            // 普通模式 - 使用现有流程\n            setLoading(true, '处理语音中...');\n            addStatusMessage('正在处理语音...');\n            sendAudioData(audioBlob);\n          }\n        }\n      });\n      \n      // 开始录音\n      recorder.start(100); // 每100ms触发一次dataavailable事件\n      \n      // 更新UI\n      setIsRecording(true);\n      \n    } catch (err) {\n      console.error('启动录音失败:', err);\n      error('无法访问麦克风，请确保已授予权限');\n    }\n  };\n  \n  // 停止录音\n  const stopRecording = () => {\n    if (!isRecording || !mediaRecorder) return;\n    \n    // 停止MediaRecorder\n    mediaRecorder.stop();\n    \n    // 停止所有音轨\n    mediaRecorder.stream.getTracks().forEach(track => track.stop());\n    \n    // 更新UI\n    setIsRecording(false);\n  };\n  \n  // 修复useEffect依赖项\n  useEffect(() => {\n    if (config.refImagePath) {\n      addStatusMessage(`已选择参考图片: ${config.refImagePath.split('/').pop()}`);\n    }\n  }, [config.refImagePath, addMessage, addStatusMessage, error]);\n  \n  return (\n    <div className=\"chat-section\">\n      <div className=\"chat-title\">对话</div>\n      \n      <div className=\"chat-messages\">\n        {messages.length === 0 && (\n          <div className=\"empty-chat\">\n            <i className=\"fas fa-comments\"></i>\n            <p>聊天已准备好，发送消息开始对话吧</p>\n          </div>\n        )}\n        \n        {messages.map((message, index) => (\n          <div \n            key={index} \n            className={`message message-${message.sender}`}\n          >\n            {message.sender === 'status' ? (\n              <div className=\"status-message\">{message.text}</div>\n            ) : (\n              <>\n                <div className=\"message-text\">{message.text}</div>\n                <div className=\"message-time\">{message.time}</div>\n              </>\n            )}\n          </div>\n        ))}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      <div className=\"chat-input\">\n        <textarea\n          ref={inputRef}\n          className=\"user-input\"\n          placeholder=\"输入消息...\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n          onKeyPress={handleKeyPress}\n        />\n        \n        <div className=\"input-controls\">\n          <button \n            className={`record-btn ${isRecording ? 'recording' : ''}`}\n            onClick={toggleRecording}\n            title={isRecording ? '停止录音' : '开始录音'}\n          >\n            <i className={`fas ${isRecording ? 'fa-stop' : 'fa-microphone'}`}></i>\n            <span className=\"record-text\">\n              {isRecording ? '停止录音' : '开始录音'}\n            </span>\n          </button>\n          \n          <button \n            className=\"send-btn\"\n            onClick={handleSendMessage}\n            disabled={!inputText.trim()}\n            title=\"发送消息\"\n          >\n            <i className=\"fas fa-paper-plane\"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}