{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./ChatSection.css';import{useWebSocket}from'../../contexts/WebSocketContext';import{useNotification}from'../../contexts/NotificationContext';import{useConfig}from'../../contexts/ConfigContext';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const ChatSection=()=>{const[messages,setMessages]=useState([]);const[inputText,setInputText]=useState('');const[isRecording,setIsRecording]=useState(false);const messagesEndRef=useRef(null);const inputRef=useRef(null);const{sendMessage,sendAudioData,isConnected,setLoading}=useWebSocket();const{error}=useNotification();const{config}=useConfig();// 媒体录制相关的状态\nconst[mediaRecorder,setMediaRecorder]=useState(null);const[audioChunks,setAudioChunks]=useState([]);// 音频配置\nconst audioConfig={sampleRate:16000,channels:1};// 监听服务器消息\nuseEffect(()=>{const handleServerMessage=event=>{const message=event.detail;switch(message.type){case'transcription':if(message.text){addMessage(message.text,'user');}break;case'response':if(message.text){addMessage(message.text,'ai');// 如果响应中包含useEchoMimic标志，触发EchoMimic视频生成\nif(message.useEchoMimic&&config.refImagePath){// 生成视频处理过程已经在后端开始，显示等待提示\naddStatusMessage('正在生成视频响应...');// 尝试获取视频\nfetch('/api/text_to_video',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({text:message.text,connection_id:'default'// 可以从某处获取真实connection_id\n})}).then(response=>response.json()).then(result=>{if(result.success){// 视频生成成功，触发视频可用事件\nconst videoEvent=new CustomEvent('videoAvailable',{detail:{videoUrl:result.videoUrl}});window.dispatchEvent(videoEvent);addStatusMessage('视频生成成功');}else{throw new Error(result.error||'视频生成失败');}}).catch(err=>{console.error('视频生成错误:',err);error(`视频生成失败: ${err.message}`);addStatusMessage(`错误: ${err.message}`);});}}break;case'error':addStatusMessage(`错误: ${message.message}`);break;default:break;}};window.addEventListener('server-message',handleServerMessage);// 清理监听器\nreturn()=>{window.removeEventListener('server-message',handleServerMessage);};},[]);// 监听音频响应\nuseEffect(()=>{const handleAudioResponse=event=>{const audioBlob=event.detail;// 创建音频URL并播放\nconst audioUrl=URL.createObjectURL(audioBlob);const audio=new Audio(audioUrl);// 播放结束时释放资源\naudio.onended=()=>{URL.revokeObjectURL(audioUrl);};// 播放音频\naudio.play().catch(err=>{console.error('播放音频失败:',err);});};window.addEventListener('audio-response',handleAudioResponse);// 清理监听器\nreturn()=>{window.removeEventListener('audio-response',handleAudioResponse);};},[]);// 自动滚动到最新消息\nuseEffect(()=>{scrollToBottom();},[messages]);// 添加消息到聊天记录\nconst addMessage=(text,sender)=>{const time=getFormattedTime();setMessages(prevMessages=>[...prevMessages,{text,sender,time}]);};// 添加状态消息\nconst addStatusMessage=text=>{const time=getFormattedTime();setMessages(prevMessages=>[...prevMessages,{text,sender:'status',time}]);};// 获取格式化的时间\nconst getFormattedTime=()=>{const now=new Date();return`${now.getHours().toString().padStart(2,'0')}:${now.getMinutes().toString().padStart(2,'0')}`;};// 滚动到底部\nconst scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});};// 发送文本消息\nconst handleSendMessage=async()=>{const text=inputText.trim();if(text&&isConnected){// 添加消息到聊天窗口\naddMessage(text,'user');// 清空输入框\nsetInputText('');if(config.useEchoMimic&&config.refImagePath){// EchoMimic模式 - 直接生成视频\ntry{setLoading(true,'生成视频中...');addStatusMessage('正在生成视频响应...');const response=await fetch('/api/text_to_video',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({text})});if(!response.ok){throw new Error('视频生成请求失败');}const result=await response.json();if(result.success){// 视频生成成功，触发视频可用事件\nconst videoEvent=new CustomEvent('videoAvailable',{detail:{videoUrl:result.videoUrl}});window.dispatchEvent(videoEvent);// 添加AI响应到聊天记录\nif(result.text){addMessage(result.text,'ai');}addStatusMessage('视频生成成功');}else{throw new Error(result.error||'视频生成失败');}}catch(err){console.error('视频生成错误:',err);error(`视频生成失败: ${err.message}`);addStatusMessage(`错误: ${err.message}`);// 尝试回退到普通文本模式\nsendMessage('text_input',{text});}finally{setLoading(false);}}else{// 普通模式 - 使用现有流程\nsetLoading(true,'处理中...');sendMessage('text_input',{text});}}else if(!isConnected){error('未连接到服务器，请等待连接恢复');}};// 处理键盘事件\nconst handleKeyPress=e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();handleSendMessage();}};// 切换录音状态\nconst toggleRecording=async()=>{if(isRecording){stopRecording();}else{await startRecording();}};// 开始录音\nconst startRecording=async()=>{if(isRecording||!isConnected){if(!isConnected){error('未连接到服务器，请等待连接恢复');}return;}try{// 请求麦克风访问权限\nconst stream=await navigator.mediaDevices.getUserMedia({audio:{sampleRate:audioConfig.sampleRate,channelCount:audioConfig.channels,echoCancellation:true,noiseSuppression:true,autoGainControl:true}});// 创建MediaRecorder实例\nconst recorder=new MediaRecorder(stream);setMediaRecorder(recorder);setAudioChunks([]);// 收集音频数据\nrecorder.addEventListener('dataavailable',event=>{if(event.data.size>0){setAudioChunks(prev=>[...prev,event.data]);}});// 录音结束后发送数据\nrecorder.addEventListener('stop',async()=>{const chunks=audioChunks;if(chunks.length>0&&isConnected){const audioBlob=new Blob(chunks,{type:'audio/wav'});if(config.useEchoMimic&&config.refImagePath){// EchoMimic模式 - 生成视频\ntry{setLoading(true,'生成视频中...');addStatusMessage('正在处理语音并生成视频...');// 创建 FormData 对象\nconst formData=new FormData();formData.append('audio',audioBlob,'audio.wav');// 发送生成视频请求\nconst response=await fetch('/api/generate_video',{method:'POST',body:formData});if(!response.ok){throw new Error('视频生成请求失败');}const result=await response.json();if(result.success){// 视频生成成功，触发视频可用事件\nconst videoEvent=new CustomEvent('videoAvailable',{detail:{videoUrl:result.videoUrl}});window.dispatchEvent(videoEvent);// 添加转录文本到聊天记录\nif(result.transcription){addMessage(result.transcription,'user');}// 添加AI响应到聊天记录\nif(result.response){addMessage(result.response,'ai');}addStatusMessage('视频生成成功');}else{throw new Error(result.error||'视频生成失败');}}catch(err){console.error('视频生成错误:',err);error(`视频生成失败: ${err.message}`);addStatusMessage(`错误: ${err.message}`);// 尝试回退到普通语音模式\nsendAudioData(audioBlob);}finally{setLoading(false);}}else{// 普通模式 - 使用现有流程\nsetLoading(true,'处理语音中...');addStatusMessage('正在处理语音...');sendAudioData(audioBlob);}}});// 开始录音\nrecorder.start(100);// 每100ms触发一次dataavailable事件\n// 更新UI\nsetIsRecording(true);}catch(err){console.error('启动录音失败:',err);error('无法访问麦克风，请确保已授予权限');}};// 停止录音\nconst stopRecording=()=>{if(!isRecording||!mediaRecorder)return;// 停止MediaRecorder\nmediaRecorder.stop();// 停止所有音轨\nmediaRecorder.stream.getTracks().forEach(track=>track.stop());// 更新UI\nsetIsRecording(false);};// 修复useEffect依赖项\nuseEffect(()=>{if(config.refImagePath){addStatusMessage(`已选择参考图片: ${config.refImagePath.split('/').pop()}`);}},[config.refImagePath,addMessage,addStatusMessage,error]);return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-title\",children:\"\\u5BF9\\u8BDD\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-messages\",children:[messages.length===0&&/*#__PURE__*/_jsxs(\"div\",{className:\"empty-chat\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-comments\"}),/*#__PURE__*/_jsx(\"p\",{children:\"\\u804A\\u5929\\u5DF2\\u51C6\\u5907\\u597D\\uFF0C\\u53D1\\u9001\\u6D88\\u606F\\u5F00\\u59CB\\u5BF9\\u8BDD\\u5427\"})]}),messages.map((message,index)=>/*#__PURE__*/_jsx(\"div\",{className:`message message-${message.sender}`,children:message.sender==='status'?/*#__PURE__*/_jsx(\"div\",{className:\"status-message\",children:message.text}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-text\",children:message.text}),/*#__PURE__*/_jsx(\"div\",{className:\"message-time\",children:message.time})]})},index)),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-input\",children:[/*#__PURE__*/_jsx(\"textarea\",{ref:inputRef,className:\"user-input\",placeholder:\"\\u8F93\\u5165\\u6D88\\u606F...\",value:inputText,onChange:e=>setInputText(e.target.value),onKeyPress:handleKeyPress}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-controls\",children:[/*#__PURE__*/_jsxs(\"button\",{className:`record-btn ${isRecording?'recording':''}`,onClick:toggleRecording,title:isRecording?'停止录音':'开始录音',children:[/*#__PURE__*/_jsx(\"i\",{className:`fas ${isRecording?'fa-stop':'fa-microphone'}`}),/*#__PURE__*/_jsx(\"span\",{className:\"record-text\",children:isRecording?'停止录音':'开始录音'})]}),/*#__PURE__*/_jsx(\"button\",{className:\"send-btn\",onClick:handleSendMessage,disabled:!inputText.trim(),title:\"\\u53D1\\u9001\\u6D88\\u606F\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-paper-plane\"})})]})]})]});};export default ChatSection;","map":{"version":3,"names":["React","useState","useEffect","useRef","useWebSocket","useNotification","useConfig","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ChatSection","messages","setMessages","inputText","setInputText","isRecording","setIsRecording","messagesEndRef","inputRef","sendMessage","sendAudioData","isConnected","setLoading","error","config","mediaRecorder","setMediaRecorder","audioChunks","setAudioChunks","audioConfig","sampleRate","channels","handleServerMessage","event","message","detail","type","text","addMessage","useEchoMimic","refImagePath","addStatusMessage","fetch","method","headers","body","JSON","stringify","connection_id","then","response","json","result","success","videoEvent","CustomEvent","videoUrl","window","dispatchEvent","Error","catch","err","console","addEventListener","removeEventListener","handleAudioResponse","audioBlob","audioUrl","URL","createObjectURL","audio","Audio","onended","revokeObjectURL","play","scrollToBottom","sender","time","getFormattedTime","prevMessages","now","Date","getHours","toString","padStart","getMinutes","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","ok","handleKeyPress","e","key","shiftKey","preventDefault","toggleRecording","stopRecording","startRecording","stream","navigator","mediaDevices","getUserMedia","channelCount","echoCancellation","noiseSuppression","autoGainControl","recorder","MediaRecorder","data","size","prev","chunks","length","Blob","formData","FormData","append","transcription","start","stop","getTracks","forEach","track","split","pop","className","children","map","index","ref","placeholder","value","onChange","target","onKeyPress","onClick","title","disabled"],"sources":["/Users/niko/digital-human/frontend/src/components/ChatSection/index.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './ChatSection.css';\nimport { useWebSocket } from '../../contexts/WebSocketContext';\nimport { useNotification } from '../../contexts/NotificationContext';\nimport { useConfig } from '../../contexts/ConfigContext';\n\nconst ChatSection = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const { sendMessage, sendAudioData, isConnected, setLoading } = useWebSocket();\n  const { error } = useNotification();\n  const { config } = useConfig();\n  \n  // 媒体录制相关的状态\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  \n  // 音频配置\n  const audioConfig = {\n    sampleRate: 16000,\n    channels: 1\n  };\n  \n  // 监听服务器消息\n  useEffect(() => {\n    const handleServerMessage = (event) => {\n      const message = event.detail;\n      \n      switch (message.type) {\n        case 'transcription':\n          if (message.text) {\n            addMessage(message.text, 'user');\n          }\n          break;\n          \n        case 'response':\n          if (message.text) {\n            addMessage(message.text, 'ai');\n            \n            // 如果响应中包含useEchoMimic标志，触发EchoMimic视频生成\n            if (message.useEchoMimic && config.refImagePath) {\n              // 生成视频处理过程已经在后端开始，显示等待提示\n              addStatusMessage('正在生成视频响应...');\n              \n              // 尝试获取视频\n              fetch('/api/text_to_video', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ \n                  text: message.text,\n                  connection_id: 'default' // 可以从某处获取真实connection_id\n                })\n              })\n              .then(response => response.json())\n              .then(result => {\n                if (result.success) {\n                  // 视频生成成功，触发视频可用事件\n                  const videoEvent = new CustomEvent('videoAvailable', {\n                    detail: { videoUrl: result.videoUrl }\n                  });\n                  window.dispatchEvent(videoEvent);\n                  addStatusMessage('视频生成成功');\n                } else {\n                  throw new Error(result.error || '视频生成失败');\n                }\n              })\n              .catch(err => {\n                console.error('视频生成错误:', err);\n                error(`视频生成失败: ${err.message}`);\n                addStatusMessage(`错误: ${err.message}`);\n              })\n            }\n          }\n          break;\n          \n        case 'error':\n          addStatusMessage(`错误: ${message.message}`);\n          break;\n          \n        default:\n          break;\n      }\n    };\n    \n    window.addEventListener('server-message', handleServerMessage);\n    \n    // 清理监听器\n    return () => {\n      window.removeEventListener('server-message', handleServerMessage);\n    };\n  }, []);\n  \n  // 监听音频响应\n  useEffect(() => {\n    const handleAudioResponse = (event) => {\n      const audioBlob = event.detail;\n      \n      // 创建音频URL并播放\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      \n      // 播放结束时释放资源\n      audio.onended = () => {\n        URL.revokeObjectURL(audioUrl);\n      };\n      \n      // 播放音频\n      audio.play().catch(err => {\n        console.error('播放音频失败:', err);\n      });\n    };\n    \n    window.addEventListener('audio-response', handleAudioResponse);\n    \n    // 清理监听器\n    return () => {\n      window.removeEventListener('audio-response', handleAudioResponse);\n    };\n  }, []);\n  \n  // 自动滚动到最新消息\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  \n  // 添加消息到聊天记录\n  const addMessage = (text, sender) => {\n    const time = getFormattedTime();\n    setMessages(prevMessages => [\n      ...prevMessages,\n      { text, sender, time }\n    ]);\n  };\n  \n  // 添加状态消息\n  const addStatusMessage = (text) => {\n    const time = getFormattedTime();\n    setMessages(prevMessages => [\n      ...prevMessages,\n      { text, sender: 'status', time }\n    ]);\n  };\n  \n  // 获取格式化的时间\n  const getFormattedTime = () => {\n    const now = new Date();\n    return `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n  };\n  \n  // 滚动到底部\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n  \n  // 发送文本消息\n  const handleSendMessage = async () => {\n    const text = inputText.trim();\n    \n    if (text && isConnected) {\n      // 添加消息到聊天窗口\n      addMessage(text, 'user');\n      \n      // 清空输入框\n      setInputText('');\n      \n      if (config.useEchoMimic && config.refImagePath) {\n        // EchoMimic模式 - 直接生成视频\n        try {\n          setLoading(true, '生成视频中...');\n          addStatusMessage('正在生成视频响应...');\n          \n          const response = await fetch('/api/text_to_video', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ text })\n          });\n          \n          if (!response.ok) {\n            throw new Error('视频生成请求失败');\n          }\n          \n          const result = await response.json();\n          \n          if (result.success) {\n            // 视频生成成功，触发视频可用事件\n            const videoEvent = new CustomEvent('videoAvailable', {\n              detail: { videoUrl: result.videoUrl }\n            });\n            window.dispatchEvent(videoEvent);\n            \n            // 添加AI响应到聊天记录\n            if (result.text) {\n              addMessage(result.text, 'ai');\n            }\n            \n            addStatusMessage('视频生成成功');\n          } else {\n            throw new Error(result.error || '视频生成失败');\n          }\n          \n        } catch (err) {\n          console.error('视频生成错误:', err);\n          error(`视频生成失败: ${err.message}`);\n          addStatusMessage(`错误: ${err.message}`);\n          \n          // 尝试回退到普通文本模式\n          sendMessage('text_input', { text });\n        } finally {\n          setLoading(false);\n        }\n      } else {\n        // 普通模式 - 使用现有流程\n        setLoading(true, '处理中...');\n        sendMessage('text_input', { text });\n      }\n    } else if (!isConnected) {\n      error('未连接到服务器，请等待连接恢复');\n    }\n  };\n  \n  // 处理键盘事件\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  \n  // 切换录音状态\n  const toggleRecording = async () => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      await startRecording();\n    }\n  };\n  \n  // 开始录音\n  const startRecording = async () => {\n    if (isRecording || !isConnected) {\n      if (!isConnected) {\n        error('未连接到服务器，请等待连接恢复');\n      }\n      return;\n    }\n    \n    try {\n      // 请求麦克风访问权限\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          sampleRate: audioConfig.sampleRate,\n          channelCount: audioConfig.channels,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        } \n      });\n      \n      // 创建MediaRecorder实例\n      const recorder = new MediaRecorder(stream);\n      setMediaRecorder(recorder);\n      setAudioChunks([]);\n      \n      // 收集音频数据\n      recorder.addEventListener('dataavailable', event => {\n        if (event.data.size > 0) {\n          setAudioChunks(prev => [...prev, event.data]);\n        }\n      });\n      \n      // 录音结束后发送数据\n      recorder.addEventListener('stop', async () => {\n        const chunks = audioChunks;\n        if (chunks.length > 0 && isConnected) {\n          const audioBlob = new Blob(chunks, { type: 'audio/wav' });\n          \n          if (config.useEchoMimic && config.refImagePath) {\n            // EchoMimic模式 - 生成视频\n            try {\n              setLoading(true, '生成视频中...');\n              addStatusMessage('正在处理语音并生成视频...');\n              \n              // 创建 FormData 对象\n              const formData = new FormData();\n              formData.append('audio', audioBlob, 'audio.wav');\n              \n              // 发送生成视频请求\n              const response = await fetch('/api/generate_video', {\n                method: 'POST',\n                body: formData\n              });\n              \n              if (!response.ok) {\n                throw new Error('视频生成请求失败');\n              }\n              \n              const result = await response.json();\n              \n              if (result.success) {\n                // 视频生成成功，触发视频可用事件\n                const videoEvent = new CustomEvent('videoAvailable', {\n                  detail: { videoUrl: result.videoUrl }\n                });\n                window.dispatchEvent(videoEvent);\n                \n                // 添加转录文本到聊天记录\n                if (result.transcription) {\n                  addMessage(result.transcription, 'user');\n                }\n                \n                // 添加AI响应到聊天记录\n                if (result.response) {\n                  addMessage(result.response, 'ai');\n                }\n                \n                addStatusMessage('视频生成成功');\n              } else {\n                throw new Error(result.error || '视频生成失败');\n              }\n              \n            } catch (err) {\n              console.error('视频生成错误:', err);\n              error(`视频生成失败: ${err.message}`);\n              addStatusMessage(`错误: ${err.message}`);\n              \n              // 尝试回退到普通语音模式\n              sendAudioData(audioBlob);\n            } finally {\n              setLoading(false);\n            }\n          } else {\n            // 普通模式 - 使用现有流程\n            setLoading(true, '处理语音中...');\n            addStatusMessage('正在处理语音...');\n            sendAudioData(audioBlob);\n          }\n        }\n      });\n      \n      // 开始录音\n      recorder.start(100); // 每100ms触发一次dataavailable事件\n      \n      // 更新UI\n      setIsRecording(true);\n      \n    } catch (err) {\n      console.error('启动录音失败:', err);\n      error('无法访问麦克风，请确保已授予权限');\n    }\n  };\n  \n  // 停止录音\n  const stopRecording = () => {\n    if (!isRecording || !mediaRecorder) return;\n    \n    // 停止MediaRecorder\n    mediaRecorder.stop();\n    \n    // 停止所有音轨\n    mediaRecorder.stream.getTracks().forEach(track => track.stop());\n    \n    // 更新UI\n    setIsRecording(false);\n  };\n  \n  // 修复useEffect依赖项\n  useEffect(() => {\n    if (config.refImagePath) {\n      addStatusMessage(`已选择参考图片: ${config.refImagePath.split('/').pop()}`);\n    }\n  }, [config.refImagePath, addMessage, addStatusMessage, error]);\n  \n  return (\n    <div className=\"chat-section\">\n      <div className=\"chat-title\">对话</div>\n      \n      <div className=\"chat-messages\">\n        {messages.length === 0 && (\n          <div className=\"empty-chat\">\n            <i className=\"fas fa-comments\"></i>\n            <p>聊天已准备好，发送消息开始对话吧</p>\n          </div>\n        )}\n        \n        {messages.map((message, index) => (\n          <div \n            key={index} \n            className={`message message-${message.sender}`}\n          >\n            {message.sender === 'status' ? (\n              <div className=\"status-message\">{message.text}</div>\n            ) : (\n              <>\n                <div className=\"message-text\">{message.text}</div>\n                <div className=\"message-time\">{message.time}</div>\n              </>\n            )}\n          </div>\n        ))}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      <div className=\"chat-input\">\n        <textarea\n          ref={inputRef}\n          className=\"user-input\"\n          placeholder=\"输入消息...\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n          onKeyPress={handleKeyPress}\n        />\n        \n        <div className=\"input-controls\">\n          <button \n            className={`record-btn ${isRecording ? 'recording' : ''}`}\n            onClick={toggleRecording}\n            title={isRecording ? '停止录音' : '开始录音'}\n          >\n            <i className={`fas ${isRecording ? 'fa-stop' : 'fa-microphone'}`}></i>\n            <span className=\"record-text\">\n              {isRecording ? '停止录音' : '开始录音'}\n            </span>\n          </button>\n          \n          <button \n            className=\"send-btn\"\n            onClick={handleSendMessage}\n            disabled={!inputText.trim()}\n            title=\"发送消息\"\n          >\n            <i className=\"fas fa-paper-plane\"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}