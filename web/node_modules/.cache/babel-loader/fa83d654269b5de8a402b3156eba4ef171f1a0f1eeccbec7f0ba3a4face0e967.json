{"ast":null,"code":"import React,{useEffect,useState}from'react';import'./App.css';import Header from'./components/Header';import DigitalHuman from'./components/DigitalHuman';import ChatSection from'./components/ChatSection';import NotificationContainer from'./components/NotificationContainer';import SettingsPanel from'./components/SettingsPanel';import LoadingOverlay from'./components/LoadingOverlay';import StatusBar from'./components/StatusBar';import EchoMimicPlayer from'./components/EchoMimicPlayer';import{useConfig}from'./contexts/ConfigContext';import{useWebSocket}from'./contexts/WebSocketContext';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const{config}=useConfig();const{connectionStatus,statusMessage,isLoading,loadingMessage}=useWebSocket();const[settingsOpen,setSettingsOpen]=useState(false);const[videoSrc,setVideoSrc]=useState(null);const[showEchoMimic,setShowEchoMimic]=useState(false);// 处理主题切换\nuseEffect(()=>{const htmlElement=document.documentElement;if(config.theme==='dark'){htmlElement.classList.add('dark-theme');}else{htmlElement.classList.remove('dark-theme');}},[config.theme]);// 监听WebSocket消息以获取生成的视频\nuseEffect(()=>{// 创建事件监听器\nconst handleVideoAvailable=event=>{const videoData=event.detail;setVideoSrc(videoData.videoUrl);setShowEchoMimic(true);};// 添加事件监听器\nwindow.addEventListener('videoAvailable',handleVideoAvailable);// 清理函数\nreturn()=>{window.removeEventListener('videoAvailable',handleVideoAvailable);};},[]);// 切换设置面板\nconst toggleSettings=()=>{setSettingsOpen(!settingsOpen);};// 获取状态栏显示的状态\nconst getStatusBarState=()=>{switch(connectionStatus){case'online':return'online';case'connecting':return'connecting';case'offline':default:return'offline';}};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(Header,{toggleSettings:toggleSettings}),/*#__PURE__*/_jsxs(\"main\",{className:\"main-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"digital-human-container\",children:config.useEchoMimic&&showEchoMimic?/*#__PURE__*/_jsx(EchoMimicPlayer,{videoSrc:videoSrc,onClose:()=>setShowEchoMimic(false)}):/*#__PURE__*/_jsx(DigitalHuman,{modelPath:config.modelPath})}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-container\",children:/*#__PURE__*/_jsx(ChatSection,{})})]}),/*#__PURE__*/_jsx(StatusBar,{status:getStatusBarState(),message:statusMessage}),/*#__PURE__*/_jsx(SettingsPanel,{isOpen:settingsOpen,onClose:()=>setSettingsOpen(false)}),/*#__PURE__*/_jsx(NotificationContainer,{}),isLoading&&/*#__PURE__*/_jsx(LoadingOverlay,{message:loadingMessage})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","Header","DigitalHuman","ChatSection","NotificationContainer","SettingsPanel","LoadingOverlay","StatusBar","EchoMimicPlayer","useConfig","useWebSocket","jsx","_jsx","jsxs","_jsxs","App","config","connectionStatus","statusMessage","isLoading","loadingMessage","settingsOpen","setSettingsOpen","videoSrc","setVideoSrc","showEchoMimic","setShowEchoMimic","htmlElement","document","documentElement","theme","classList","add","remove","handleVideoAvailable","event","videoData","detail","videoUrl","window","addEventListener","removeEventListener","toggleSettings","getStatusBarState","className","children","useEchoMimic","onClose","modelPath","status","message","isOpen"],"sources":["/Users/niko/digital-human/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport DigitalHuman from './components/DigitalHuman';\nimport ChatSection from './components/ChatSection';\nimport NotificationContainer from './components/NotificationContainer';\nimport SettingsPanel from './components/SettingsPanel';\nimport LoadingOverlay from './components/LoadingOverlay';\nimport StatusBar from './components/StatusBar';\nimport EchoMimicPlayer from './components/EchoMimicPlayer';\nimport { useConfig } from './contexts/ConfigContext';\nimport { useWebSocket } from './contexts/WebSocketContext';\n\nfunction App() {\n  const { config } = useConfig();\n  const { connectionStatus, statusMessage, isLoading, loadingMessage } = useWebSocket();\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [videoSrc, setVideoSrc] = useState(null);\n  const [showEchoMimic, setShowEchoMimic] = useState(false);\n\n  // 处理主题切换\n  useEffect(() => {\n    const htmlElement = document.documentElement;\n    \n    if (config.theme === 'dark') {\n      htmlElement.classList.add('dark-theme');\n    } else {\n      htmlElement.classList.remove('dark-theme');\n    }\n  }, [config.theme]);\n  \n  // 监听WebSocket消息以获取生成的视频\n  useEffect(() => {\n    // 创建事件监听器\n    const handleVideoAvailable = (event) => {\n      const videoData = event.detail;\n      setVideoSrc(videoData.videoUrl);\n      setShowEchoMimic(true);\n    };\n    \n    // 添加事件监听器\n    window.addEventListener('videoAvailable', handleVideoAvailable);\n    \n    // 清理函数\n    return () => {\n      window.removeEventListener('videoAvailable', handleVideoAvailable);\n    };\n  }, []);\n\n  // 切换设置面板\n  const toggleSettings = () => {\n    setSettingsOpen(!settingsOpen);\n  };\n\n  // 获取状态栏显示的状态\n  const getStatusBarState = () => {\n    switch (connectionStatus) {\n      case 'online':\n        return 'online';\n      case 'connecting':\n        return 'connecting';\n      case 'offline':\n      default:\n        return 'offline';\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <Header toggleSettings={toggleSettings} />\n      \n      <main className=\"main-content\">\n        <div className=\"digital-human-container\">\n          {config.useEchoMimic && showEchoMimic ? (\n            <EchoMimicPlayer \n              videoSrc={videoSrc} \n              onClose={() => setShowEchoMimic(false)}\n            />\n          ) : (\n            <DigitalHuman modelPath={config.modelPath} />\n          )}\n        </div>\n        \n        <div className=\"chat-container\">\n          <ChatSection />\n        </div>\n      </main>\n      \n      <StatusBar \n        status={getStatusBarState()} \n        message={statusMessage} \n      />\n      \n      <SettingsPanel \n        isOpen={settingsOpen} \n        onClose={() => setSettingsOpen(false)} \n      />\n      \n      <NotificationContainer />\n      \n      {isLoading && (\n        <LoadingOverlay message={loadingMessage} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}