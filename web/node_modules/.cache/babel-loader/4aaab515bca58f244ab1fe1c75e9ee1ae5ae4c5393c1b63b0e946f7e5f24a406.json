{"ast":null,"code":"var _jsxFileName = \"/Users/niko/digital-human/frontend/src/contexts/WebSocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { useConfig } from './ConfigContext';\nimport { useNotification } from './NotificationContext';\n\n// 创建上下文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketContext = /*#__PURE__*/createContext();\n\n// WebSocket提供者组件\nexport const WebSocketProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    config\n  } = useConfig();\n  const {\n    success,\n    error\n  } = useNotification();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('offline');\n  const [statusMessage, setStatusMessage] = useState('等待连接...');\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [lastMessage, setLastMessage] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // 初始化WebSocket连接\n  const initWebSocket = useCallback(() => {\n    // 修改WebSocket URL，确保连接到正确的后端地址\n    const wsUrl = 'ws://localhost:8000/ws';\n    let reconnectAttempts = 0;\n    const maxReconnectAttempts = 5;\n    const baseReconnectDelay = 1000; // 1秒\n\n    const connect = () => {\n      updateStatus('connecting', `连接中... ${reconnectAttempts > 0 ? `(尝试 ${reconnectAttempts}/${maxReconnectAttempts})` : ''}`);\n      console.log(`尝试连接到WebSocket: ${wsUrl}`);\n\n      // 创建WebSocket连接\n      const newSocket = new WebSocket(wsUrl);\n\n      // 连接打开\n      newSocket.onopen = () => {\n        console.log('WebSocket连接已建立');\n        setIsConnected(true);\n        updateStatus('online', '已连接');\n        reconnectAttempts = 0; // 重置重连计数\n\n        // 发送配置\n        newSocket.send(JSON.stringify({\n          type: 'config',\n          config: config\n        }));\n\n        // 显示成功通知\n        if (reconnectAttempts > 0) {\n          success('连接已恢复');\n        }\n      };\n\n      // 连接关闭\n      newSocket.onclose = event => {\n        console.log('WebSocket连接已关闭:', event);\n        setIsConnected(false);\n        if (reconnectAttempts < maxReconnectAttempts) {\n          // 指数退避重连\n          const delay = Math.min(baseReconnectDelay * Math.pow(2, reconnectAttempts), 30000);\n          reconnectAttempts++;\n          updateStatus('reconnecting', `连接已断开，${delay / 1000}秒后重连... (${reconnectAttempts}/${maxReconnectAttempts})`);\n\n          // 显示重连通知\n          if (reconnectAttempts === 1) {\n            error('连接已断开，正在尝试重连...');\n          }\n          setTimeout(connect, delay);\n        } else {\n          updateStatus('offline', '连接失败，请检查网络并刷新页面');\n          error('连接失败，请检查网络并刷新页面');\n        }\n      };\n\n      // 连接错误\n      newSocket.onerror = err => {\n        console.error('WebSocket连接错误:', err);\n        error('连接发生错误，正在尝试重连...');\n      };\n\n      // 收到消息\n      newSocket.onmessage = event => {\n        try {\n          // 检查是否为二进制数据（音频）\n          if (event.data instanceof Blob) {\n            console.log('收到二进制数据:', event.data.size, event.data.type);\n            handleAudioMessage(event.data);\n            return;\n          }\n\n          // 尝试解析JSON消息\n          const data = JSON.parse(event.data);\n          console.log('收到JSON消息:', data);\n\n          // 更新最近消息状态\n          setLastMessage(data);\n\n          // 根据消息类型处理\n          switch (data.type) {\n            case 'thinking':\n              setLoading(true, data.message || '思考中...');\n              break;\n            case 'bot_reply':\n              setLoading(false);\n              break;\n            case 'generating_video':\n              setLoading(true, data.message || '生成视频中...');\n              break;\n            case 'video_ready':\n              setLoading(false);\n              if (data.success && data.video_url) {\n                console.log('视频已就绪:', data.video_url);\n              }\n              break;\n            case 'error':\n              setLoading(false);\n              error(data.message || '发生错误');\n              break;\n            default:\n              break;\n          }\n        } catch (err) {\n          console.error('处理WebSocket消息错误:', err);\n        }\n      };\n      setSocket(newSocket);\n    };\n    connect();\n\n    // 组件卸载时清理WebSocket连接\n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, [config, success, error]);\n\n  // 组件挂载时初始化WebSocket\n  useEffect(() => {\n    initWebSocket();\n\n    // 清理函数\n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, [initWebSocket]);\n\n  // 更新状态\n  const updateStatus = (status, message) => {\n    setConnectionStatus(status);\n    setStatusMessage(message);\n  };\n\n  // 设置加载状态\n  const setLoading = (isLoading, message = '') => {\n    setIsLoading(isLoading);\n    setLoadingMessage(message);\n  };\n\n  // 发送文本消息\n  const sendMessage = useCallback(text => {\n    if (!socket || socket.readyState !== WebSocket.OPEN) {\n      error('WebSocket连接未建立，无法发送消息');\n      return;\n    }\n    try {\n      // 添加用户消息到消息列表\n      setMessages(prev => [...prev, {\n        role: 'user',\n        content: text\n      }]);\n\n      // 设置处理状态\n      setIsProcessing(true);\n\n      // 发送消息到服务器\n      socket.send(JSON.stringify({\n        type: 'text_input',\n        text: text\n      }));\n    } catch (err) {\n      error(`发送消息失败: ${err.message}`);\n      setIsProcessing(false);\n    }\n  }, [socket, error]);\n\n  // 发送音频数据\n  const sendAudioData = useCallback(async audioBlob => {\n    if (!socket || socket.readyState !== WebSocket.OPEN) {\n      error('WebSocket连接未打开，无法发送音频');\n      return;\n    }\n    try {\n      // 验证音频Blob的有效性\n      if (!audioBlob || audioBlob.size === 0) {\n        error('无效的音频数据，无法发送');\n        return;\n      }\n\n      // 确保我们有正确的MIME类型\n      let mimeType = audioBlob.type || 'audio/webm';\n\n      // 检查已知的格式，如果不是标准MIME类型则进行修正\n      if (!mimeType.includes('/')) {\n        // 尝试根据文件格式确定正确的MIME类型\n        if (mimeType.toLowerCase().includes('webm')) {\n          mimeType = 'audio/webm';\n        } else if (mimeType.toLowerCase().includes('mp3')) {\n          mimeType = 'audio/mpeg';\n        } else if (mimeType.toLowerCase().includes('wav')) {\n          mimeType = 'audio/wav';\n        } else if (mimeType.toLowerCase().includes('ogg')) {\n          mimeType = 'audio/ogg';\n        } else {\n          console.warn(`未知的音频格式: ${mimeType}, 使用默认值 audio/webm`);\n          mimeType = 'audio/webm';\n        }\n      }\n      console.log(`准备发送音频数据，大小: ${audioBlob.size} 字节, 类型: ${mimeType}`);\n\n      // 设置处理状态\n      setIsProcessing(true);\n\n      // 首先发送格式通知\n      console.log('发送音频格式通知...');\n      socket.send(JSON.stringify({\n        type: 'audio_input',\n        format: mimeType,\n        size: audioBlob.size\n      }));\n\n      // 等待一小段时间确保服务器已处理通知\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // 记录要发送的音频数据详细信息\n      console.log(`发送数据类型: ${audioBlob.constructor.name}, 是否是Blob: ${audioBlob instanceof Blob}`);\n\n      // 检查Blob内容是否可以序列化(如果太大会有问题)\n      if (audioBlob.size < 1024 * 10) {\n        // 只记录小于10KB的数据\n        const reader = new FileReader();\n        reader.onload = () => {\n          const arrayBuffer = reader.result;\n          const bytes = new Uint8Array(arrayBuffer);\n          // 仅记录前20个字节用于调试\n          const prefix = Array.from(bytes.slice(0, 20)).map(b => b.toString(16).padStart(2, '0')).join(' ');\n          console.log(`音频数据前20字节: ${prefix}`);\n        };\n        reader.readAsArrayBuffer(audioBlob);\n      }\n\n      // 使用超时检测发送是否成功\n      let sendTimeout;\n      const sendPromise = new Promise((resolve, reject) => {\n        // 设置5秒超时\n        sendTimeout = setTimeout(() => {\n          reject(new Error('发送音频数据超时'));\n        }, 5000);\n        try {\n          // 然后发送二进制数据\n          console.log('开始发送音频数据...');\n          socket.send(audioBlob);\n          clearTimeout(sendTimeout);\n          resolve();\n        } catch (err) {\n          clearTimeout(sendTimeout);\n          reject(err);\n        }\n      });\n      await sendPromise;\n      console.log('音频数据已发送到服务器，等待处理结果...');\n    } catch (err) {\n      console.error('发送音频失败:', err);\n      error(`发送音频失败: ${err.message}`);\n      setIsProcessing(false);\n    }\n  }, [socket, error, setIsProcessing]);\n\n  // 发送音频数据\n  const sendAudio = useCallback(audioBlob => {\n    sendAudioData(audioBlob);\n  }, [sendAudioData]);\n\n  // 处理服务器消息\n  const handleServerMessage = message => {\n    try {\n      // 检查是否为ArrayBuffer类型的二进制消息\n      if (message.data instanceof ArrayBuffer) {\n        console.log('收到二进制数据:', message.data.byteLength);\n        // 处理二进制数据...\n        return;\n      }\n\n      // 检查是否为Blob类型\n      if (message.data instanceof Blob) {\n        console.log('收到Blob数据:', message.data.size);\n        // 处理Blob数据...\n        return;\n      }\n\n      // 处理文本消息\n      const data = JSON.parse(message.data);\n      console.log('收到服务器消息:', data);\n      if (data.type === 'video_ready') {\n        // 处理视频生成完成消息\n        setLastMessage(data);\n        setIsProcessing(false);\n      } else if (data.type === 'text_response') {\n        // 处理文本响应\n        setMessages(prev => [...prev, {\n          role: 'assistant',\n          content: data.text\n        }]);\n        setIsProcessing(false);\n      } else if (data.type === 'error') {\n        // 处理错误消息\n        error(data.message || '服务器返回错误');\n        setIsProcessing(false);\n      } else if (data.type === 'processing') {\n        // 处理处理中状态\n        setLoadingMessage(data.message || '处理中...');\n      } else if (data.type === 'transcription') {\n        // 处理转录结果\n        console.log('收到转录结果:', data.text);\n        if (data.final) {\n          // 如果是最终结果，显示在用户消息中\n          setMessages(prev => [...prev, {\n            role: 'user',\n            content: data.text\n          }]);\n        }\n      } else if (data.type === 'audio_received') {\n        // 音频已接收确认\n        console.log(`服务器已接收音频数据: ${data.size} 字节, 格式: ${data.format}`);\n      } else if (data.type === 'thinking') {\n        // AI思考中状态\n        setLoadingMessage(data.message || 'AI思考中...');\n      }\n    } catch (err) {\n      console.error('处理服务器消息失败:', err);\n      if (typeof message.data === 'string') {\n        console.error('错误的消息内容:', message.data.substring(0, 100) + '...');\n      }\n    }\n  };\n\n  // 处理音频响应\n  const handleAudioResponse = message => {\n    console.log('收到音频响应', message);\n    if (message.audio) {\n      try {\n        // 将 base64 编码的音频解码为 ArrayBuffer\n        const audioData = Uint8Array.from(atob(message.audio), c => c.charCodeAt(0)).buffer;\n\n        // 创建 Blob\n        const blob = new Blob([audioData], {\n          type: 'audio/wav'\n        });\n\n        // 创建 URL 并播放\n        const audioUrl = URL.createObjectURL(blob);\n        const audio = new Audio(audioUrl);\n        audio.onended = () => {\n          URL.revokeObjectURL(audioUrl);\n        };\n        audio.play().catch(e => {\n          console.error('播放音频失败:', e);\n          error('播放音频失败');\n        });\n      } catch (err) {\n        console.error('处理音频响应失败:', err);\n        error('处理音频响应失败');\n      }\n    }\n  };\n\n  // 处理音频消息\n  const handleAudioMessage = audioData => {\n    console.log('收到音频消息', audioData);\n    try {\n      // 创建 Blob\n      const blob = new Blob([audioData], {\n        type: 'audio/wav'\n      });\n\n      // 创建 URL 并播放\n      const audioUrl = URL.createObjectURL(blob);\n      const audio = new Audio(audioUrl);\n      audio.onended = () => {\n        URL.revokeObjectURL(audioUrl);\n      };\n      audio.play().catch(e => {\n        console.error('播放音频失败:', e);\n        error('播放音频失败');\n      });\n    } catch (err) {\n      console.error('处理音频消息失败:', err);\n      error('处理音频消息失败');\n    }\n  };\n\n  // 提供上下文值\n  const contextValue = {\n    socket,\n    isConnected,\n    connectionStatus,\n    statusMessage,\n    isLoading,\n    loadingMessage,\n    lastMessage,\n    messages,\n    isProcessing,\n    sendMessage,\n    sendAudio,\n    setLoading\n  };\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 5\n  }, this);\n};\n\n// 自定义Hook，用于在组件中访问WebSocket功能\n_s(WebSocketProvider, \"n6Vb5mrhAOL4PHIx0FAwifTgV2U=\", false, function () {\n  return [useConfig, useNotification];\n});\n_c = WebSocketProvider;\nexport const useWebSocket = () => {\n  _s2();\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocket 必须在 WebSocketProvider 内部使用');\n  }\n  return context;\n};\n_s2(useWebSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","useConfig","useNotification","jsxDEV","_jsxDEV","WebSocketContext","WebSocketProvider","children","_s","config","success","error","socket","setSocket","isConnected","setIsConnected","connectionStatus","setConnectionStatus","statusMessage","setStatusMessage","isLoading","setIsLoading","loadingMessage","setLoadingMessage","lastMessage","setLastMessage","messages","setMessages","isProcessing","setIsProcessing","initWebSocket","wsUrl","reconnectAttempts","maxReconnectAttempts","baseReconnectDelay","connect","updateStatus","console","log","newSocket","WebSocket","onopen","send","JSON","stringify","type","onclose","event","delay","Math","min","pow","setTimeout","onerror","err","onmessage","data","Blob","size","handleAudioMessage","parse","setLoading","message","video_url","close","status","sendMessage","text","readyState","OPEN","prev","role","content","sendAudioData","audioBlob","mimeType","includes","toLowerCase","warn","format","Promise","resolve","constructor","name","reader","FileReader","onload","arrayBuffer","result","bytes","Uint8Array","prefix","Array","from","slice","map","b","toString","padStart","join","readAsArrayBuffer","sendTimeout","sendPromise","reject","Error","clearTimeout","sendAudio","handleServerMessage","ArrayBuffer","byteLength","final","substring","handleAudioResponse","audio","audioData","atob","c","charCodeAt","buffer","blob","audioUrl","URL","createObjectURL","Audio","onended","revokeObjectURL","play","catch","e","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWebSocket","_s2","context","$RefreshReg$"],"sources":["/Users/niko/digital-human/frontend/src/contexts/WebSocketContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { useConfig } from './ConfigContext';\nimport { useNotification } from './NotificationContext';\n\n// 创建上下文\nconst WebSocketContext = createContext();\n\n// WebSocket提供者组件\nexport const WebSocketProvider = ({ children }) => {\n  const { config } = useConfig();\n  const { success, error } = useNotification();\n  \n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('offline');\n  const [statusMessage, setStatusMessage] = useState('等待连接...');\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n  const [lastMessage, setLastMessage] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // 初始化WebSocket连接\n  const initWebSocket = useCallback(() => {\n    // 修改WebSocket URL，确保连接到正确的后端地址\n    const wsUrl = 'ws://localhost:8000/ws';\n    \n    let reconnectAttempts = 0;\n    const maxReconnectAttempts = 5;\n    const baseReconnectDelay = 1000; // 1秒\n    \n    const connect = () => {\n      updateStatus('connecting', `连接中... ${reconnectAttempts > 0 ? `(尝试 ${reconnectAttempts}/${maxReconnectAttempts})` : ''}`);\n      \n      console.log(`尝试连接到WebSocket: ${wsUrl}`);\n      \n      // 创建WebSocket连接\n      const newSocket = new WebSocket(wsUrl);\n      \n      // 连接打开\n      newSocket.onopen = () => {\n        console.log('WebSocket连接已建立');\n        setIsConnected(true);\n        updateStatus('online', '已连接');\n        reconnectAttempts = 0; // 重置重连计数\n        \n        // 发送配置\n        newSocket.send(JSON.stringify({\n          type: 'config',\n          config: config\n        }));\n        \n        // 显示成功通知\n        if (reconnectAttempts > 0) {\n          success('连接已恢复');\n        }\n      };\n      \n      // 连接关闭\n      newSocket.onclose = (event) => {\n        console.log('WebSocket连接已关闭:', event);\n        setIsConnected(false);\n        \n        if (reconnectAttempts < maxReconnectAttempts) {\n          // 指数退避重连\n          const delay = Math.min(baseReconnectDelay * Math.pow(2, reconnectAttempts), 30000);\n          reconnectAttempts++;\n          \n          updateStatus('reconnecting', `连接已断开，${delay / 1000}秒后重连... (${reconnectAttempts}/${maxReconnectAttempts})`);\n          \n          // 显示重连通知\n          if (reconnectAttempts === 1) {\n            error('连接已断开，正在尝试重连...');\n          }\n          \n          setTimeout(connect, delay);\n        } else {\n          updateStatus('offline', '连接失败，请检查网络并刷新页面');\n          error('连接失败，请检查网络并刷新页面');\n        }\n      };\n      \n      // 连接错误\n      newSocket.onerror = (err) => {\n        console.error('WebSocket连接错误:', err);\n        error('连接发生错误，正在尝试重连...');\n      };\n      \n      // 收到消息\n      newSocket.onmessage = (event) => {\n        try {\n          // 检查是否为二进制数据（音频）\n          if (event.data instanceof Blob) {\n            console.log('收到二进制数据:', event.data.size, event.data.type);\n            handleAudioMessage(event.data);\n            return;\n          }\n          \n          // 尝试解析JSON消息\n          const data = JSON.parse(event.data);\n          console.log('收到JSON消息:', data);\n          \n          // 更新最近消息状态\n          setLastMessage(data);\n          \n          // 根据消息类型处理\n          switch (data.type) {\n            case 'thinking':\n              setLoading(true, data.message || '思考中...');\n              break;\n            case 'bot_reply':\n              setLoading(false);\n              break;\n            case 'generating_video':\n              setLoading(true, data.message || '生成视频中...');\n              break;\n            case 'video_ready':\n              setLoading(false);\n              if (data.success && data.video_url) {\n                console.log('视频已就绪:', data.video_url);\n              }\n              break;\n            case 'error':\n              setLoading(false);\n              error(data.message || '发生错误');\n              break;\n            default:\n              break;\n          }\n        } catch (err) {\n          console.error('处理WebSocket消息错误:', err);\n        }\n      };\n      \n      setSocket(newSocket);\n    };\n    \n    connect();\n    \n    // 组件卸载时清理WebSocket连接\n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, [config, success, error]);\n\n  // 组件挂载时初始化WebSocket\n  useEffect(() => {\n    initWebSocket();\n    \n    // 清理函数\n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, [initWebSocket]);\n\n  // 更新状态\n  const updateStatus = (status, message) => {\n    setConnectionStatus(status);\n    setStatusMessage(message);\n  };\n\n  // 设置加载状态\n  const setLoading = (isLoading, message = '') => {\n    setIsLoading(isLoading);\n    setLoadingMessage(message);\n  };\n\n  // 发送文本消息\n  const sendMessage = useCallback((text) => {\n    if (!socket || socket.readyState !== WebSocket.OPEN) {\n      error('WebSocket连接未建立，无法发送消息');\n      return;\n    }\n    \n    try {\n      // 添加用户消息到消息列表\n      setMessages(prev => [...prev, { role: 'user', content: text }]);\n      \n      // 设置处理状态\n      setIsProcessing(true);\n      \n      // 发送消息到服务器\n      socket.send(JSON.stringify({\n        type: 'text_input',\n        text: text\n      }));\n    } catch (err) {\n      error(`发送消息失败: ${err.message}`);\n      setIsProcessing(false);\n    }\n  }, [socket, error]);\n\n  // 发送音频数据\n  const sendAudioData = useCallback(async (audioBlob) => {\n    if (!socket || socket.readyState !== WebSocket.OPEN) {\n      error('WebSocket连接未打开，无法发送音频');\n      return;\n    }\n\n    try {\n      // 验证音频Blob的有效性\n      if (!audioBlob || audioBlob.size === 0) {\n        error('无效的音频数据，无法发送');\n        return;\n      }\n\n      // 确保我们有正确的MIME类型\n      let mimeType = audioBlob.type || 'audio/webm';\n      \n      // 检查已知的格式，如果不是标准MIME类型则进行修正\n      if (!mimeType.includes('/')) {\n        // 尝试根据文件格式确定正确的MIME类型\n        if (mimeType.toLowerCase().includes('webm')) {\n          mimeType = 'audio/webm';\n        } else if (mimeType.toLowerCase().includes('mp3')) {\n          mimeType = 'audio/mpeg';\n        } else if (mimeType.toLowerCase().includes('wav')) {\n          mimeType = 'audio/wav';\n        } else if (mimeType.toLowerCase().includes('ogg')) {\n          mimeType = 'audio/ogg';\n        } else {\n          console.warn(`未知的音频格式: ${mimeType}, 使用默认值 audio/webm`);\n          mimeType = 'audio/webm';\n        }\n      }\n      \n      console.log(`准备发送音频数据，大小: ${audioBlob.size} 字节, 类型: ${mimeType}`);\n      \n      // 设置处理状态\n      setIsProcessing(true);\n      \n      // 首先发送格式通知\n      console.log('发送音频格式通知...');\n      socket.send(JSON.stringify({\n        type: 'audio_input',\n        format: mimeType,\n        size: audioBlob.size\n      }));\n      \n      // 等待一小段时间确保服务器已处理通知\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // 记录要发送的音频数据详细信息\n      console.log(`发送数据类型: ${audioBlob.constructor.name}, 是否是Blob: ${audioBlob instanceof Blob}`);\n      \n      // 检查Blob内容是否可以序列化(如果太大会有问题)\n      if (audioBlob.size < 1024 * 10) { // 只记录小于10KB的数据\n        const reader = new FileReader();\n        reader.onload = () => {\n          const arrayBuffer = reader.result;\n          const bytes = new Uint8Array(arrayBuffer);\n          // 仅记录前20个字节用于调试\n          const prefix = Array.from(bytes.slice(0, 20)).map(b => b.toString(16).padStart(2, '0')).join(' ');\n          console.log(`音频数据前20字节: ${prefix}`);\n        };\n        reader.readAsArrayBuffer(audioBlob);\n      }\n      \n      // 使用超时检测发送是否成功\n      let sendTimeout;\n      const sendPromise = new Promise((resolve, reject) => {\n        // 设置5秒超时\n        sendTimeout = setTimeout(() => {\n          reject(new Error('发送音频数据超时'));\n        }, 5000);\n        \n        try {\n          // 然后发送二进制数据\n          console.log('开始发送音频数据...');\n          socket.send(audioBlob);\n          clearTimeout(sendTimeout);\n          resolve();\n        } catch (err) {\n          clearTimeout(sendTimeout);\n          reject(err);\n        }\n      });\n      \n      await sendPromise;\n      console.log('音频数据已发送到服务器，等待处理结果...');\n      \n    } catch (err) {\n      console.error('发送音频失败:', err);\n      error(`发送音频失败: ${err.message}`);\n      setIsProcessing(false);\n    }\n  }, [socket, error, setIsProcessing]);\n\n  // 发送音频数据\n  const sendAudio = useCallback((audioBlob) => {\n    sendAudioData(audioBlob);\n  }, [sendAudioData]);\n\n  // 处理服务器消息\n  const handleServerMessage = (message) => {\n    try {\n      // 检查是否为ArrayBuffer类型的二进制消息\n      if (message.data instanceof ArrayBuffer) {\n        console.log('收到二进制数据:', message.data.byteLength);\n        // 处理二进制数据...\n        return;\n      }\n      \n      // 检查是否为Blob类型\n      if (message.data instanceof Blob) {\n        console.log('收到Blob数据:', message.data.size);\n        // 处理Blob数据...\n        return;\n      }\n      \n      // 处理文本消息\n      const data = JSON.parse(message.data);\n      console.log('收到服务器消息:', data);\n      \n      if (data.type === 'video_ready') {\n        // 处理视频生成完成消息\n        setLastMessage(data);\n        setIsProcessing(false);\n      } else if (data.type === 'text_response') {\n        // 处理文本响应\n        setMessages(prev => [...prev, { role: 'assistant', content: data.text }]);\n        setIsProcessing(false);\n      } else if (data.type === 'error') {\n        // 处理错误消息\n        error(data.message || '服务器返回错误');\n        setIsProcessing(false);\n      } else if (data.type === 'processing') {\n        // 处理处理中状态\n        setLoadingMessage(data.message || '处理中...');\n      } else if (data.type === 'transcription') {\n        // 处理转录结果\n        console.log('收到转录结果:', data.text);\n        if (data.final) {\n          // 如果是最终结果，显示在用户消息中\n          setMessages(prev => [...prev, { role: 'user', content: data.text }]);\n        }\n      } else if (data.type === 'audio_received') {\n        // 音频已接收确认\n        console.log(`服务器已接收音频数据: ${data.size} 字节, 格式: ${data.format}`);\n      } else if (data.type === 'thinking') {\n        // AI思考中状态\n        setLoadingMessage(data.message || 'AI思考中...');\n      }\n    } catch (err) {\n      console.error('处理服务器消息失败:', err);\n      if (typeof message.data === 'string') {\n        console.error('错误的消息内容:', message.data.substring(0, 100) + '...');\n      }\n    }\n  };\n\n  // 处理音频响应\n  const handleAudioResponse = (message) => {\n    console.log('收到音频响应', message);\n    \n    if (message.audio) {\n      try {\n        // 将 base64 编码的音频解码为 ArrayBuffer\n        const audioData = Uint8Array.from(atob(message.audio), c => c.charCodeAt(0)).buffer;\n        \n        // 创建 Blob\n        const blob = new Blob([audioData], { type: 'audio/wav' });\n        \n        // 创建 URL 并播放\n        const audioUrl = URL.createObjectURL(blob);\n        const audio = new Audio(audioUrl);\n        \n        audio.onended = () => {\n          URL.revokeObjectURL(audioUrl);\n        };\n        \n        audio.play().catch(e => {\n          console.error('播放音频失败:', e);\n          error('播放音频失败');\n        });\n      } catch (err) {\n        console.error('处理音频响应失败:', err);\n        error('处理音频响应失败');\n      }\n    }\n  };\n\n  // 处理音频消息\n  const handleAudioMessage = (audioData) => {\n    console.log('收到音频消息', audioData);\n    \n    try {\n      // 创建 Blob\n      const blob = new Blob([audioData], { type: 'audio/wav' });\n      \n      // 创建 URL 并播放\n      const audioUrl = URL.createObjectURL(blob);\n      const audio = new Audio(audioUrl);\n      \n      audio.onended = () => {\n        URL.revokeObjectURL(audioUrl);\n      };\n      \n      audio.play().catch(e => {\n        console.error('播放音频失败:', e);\n        error('播放音频失败');\n      });\n    } catch (err) {\n      console.error('处理音频消息失败:', err);\n      error('处理音频消息失败');\n    }\n  };\n\n  // 提供上下文值\n  const contextValue = {\n    socket,\n    isConnected,\n    connectionStatus,\n    statusMessage,\n    isLoading,\n    loadingMessage,\n    lastMessage,\n    messages,\n    isProcessing,\n    sendMessage,\n    sendAudio,\n    setLoading\n  };\n\n  return (\n    <WebSocketContext.Provider value={contextValue}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n};\n\n// 自定义Hook，用于在组件中访问WebSocket功能\nexport const useWebSocket = () => {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocket 必须在 WebSocketProvider 内部使用');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}