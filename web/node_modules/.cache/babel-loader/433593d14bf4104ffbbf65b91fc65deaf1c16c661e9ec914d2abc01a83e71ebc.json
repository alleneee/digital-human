{"ast":null,"code":"var _jsxFileName = \"/Users/niko/digital-human/frontend/src/contexts/WebRTCContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback, useRef } from 'react';\nimport { useWebSocket } from './WebSocketContext';\nimport { useConfig } from './ConfigContext';\nimport { useNotification } from './NotificationContext';\nimport { createClient } from '@deepgram/sdk';\n\n// 创建上下文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebRTCContext = /*#__PURE__*/createContext();\n\n// WebRTC提供者组件\nexport const WebRTCProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    socket,\n    isConnected,\n    sendMessage\n  } = useWebSocket();\n  const {\n    config\n  } = useConfig();\n  const {\n    success,\n    error\n  } = useNotification();\n\n  // WebRTC状态\n  const [isReady, setIsReady] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcription, setTranscription] = useState('');\n  const [interimTranscription, setInterimTranscription] = useState('');\n  const [audioLevel, setAudioLevel] = useState(0);\n  const [lowVolumeWarning, setLowVolumeWarning] = useState(false);\n  const [processorLoaded, setProcessorLoaded] = useState(false);\n\n  // 引用存储\n  const mediaStreamRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const processorRef = useRef(null);\n  const sourceNodeRef = useRef(null);\n  const deepgramConnectionRef = useRef(null);\n  const analyzerRef = useRef(null);\n  const audioDataBufferRef = useRef([]);\n  const animationFrameRef = useRef(null);\n\n  // 初始化Deepgram客户端\n  const initDeepgram = useCallback(async () => {\n    try {\n      // 使用环境变量中的API密钥\n      const apiKey = process.env.REACT_APP_DEEPGRAM_API_KEY;\n      if (!apiKey) {\n        throw new Error('未找到Deepgram API密钥');\n      }\n      console.log('正在初始化Deepgram...');\n      return createClient(apiKey);\n    } catch (err) {\n      console.error('初始化Deepgram失败:', err);\n      error('无法连接到语音服务');\n      return null;\n    }\n  }, [error]);\n\n  // 开始录音并实时转写\n  const startRecording = useCallback(async () => {\n    if (isRecording) return;\n    try {\n      console.log('正在请求麦克风权限...');\n\n      // 请求麦克风访问权限\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        },\n        video: false\n      });\n      mediaStreamRef.current = stream;\n\n      // 创建音频处理上下文\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      audioContextRef.current = audioContext;\n\n      // 创建媒体源节点\n      const sourceNode = audioContext.createMediaStreamSource(stream);\n      sourceNodeRef.current = sourceNode;\n\n      // 创建音频分析器节点用于音量监测\n      const analyzer = audioContext.createAnalyser();\n      analyzer.fftSize = 256;\n      analyzer.smoothingTimeConstant = 0.8;\n      analyzerRef.current = analyzer;\n\n      // 加载并创建AudioWorklet处理器\n      try {\n        // 检查是否已加载处理器代码\n        if (!processorLoaded) {\n          console.log('正在加载音频处理器模块...');\n          await audioContext.audioWorklet.addModule('/audio-processor.js');\n          setProcessorLoaded(true);\n        }\n\n        // 创建工作节点\n        const processor = new AudioWorkletNode(audioContext, 'audio-processor');\n        processorRef.current = processor;\n\n        // 配置处理器\n        processor.port.postMessage({\n          command: 'configure',\n          config: {\n            sampleRate: audioContext.sampleRate,\n            targetSampleRate: 16000 // Deepgram推荐采样率\n          }\n        });\n\n        // 处理来自处理器的音频数据\n        processor.port.onmessage = event => {\n          if (!deepgramConnectionRef.current) return;\n          if (event.data.type === 'audio-data') {\n            // 向Deepgram发送处理好的音频数据\n            deepgramConnectionRef.current.send(event.data.buffer);\n          }\n        };\n      } catch (err) {\n        console.error('创建AudioWorklet处理器失败:', err);\n        error('高级音频处理不可用，将使用备用方法');\n\n        // 备用方案：创建旧版处理器节点\n        const backupProcessor = audioContext.createScriptProcessor(4096, 1, 1);\n        processorRef.current = backupProcessor;\n\n        // 处理音频数据并发送到Deepgram\n        backupProcessor.onaudioprocess = e => {\n          if (!deepgramConnectionRef.current) return;\n\n          // 获取音频数据\n          const inputData = e.inputBuffer.getChannelData(0);\n\n          // 转换为16位PCM格式\n          const pcmData = new Int16Array(inputData.length);\n          for (let i = 0; i < inputData.length; i++) {\n            pcmData[i] = Math.min(1, Math.max(-1, inputData[i])) * 0x7FFF;\n          }\n\n          // 发送到Deepgram\n          deepgramConnectionRef.current.send(pcmData.buffer);\n        };\n      }\n\n      // 初始化Deepgram客户端\n      const deepgram = await initDeepgram();\n      if (!deepgram) {\n        throw new Error('无法初始化Deepgram');\n      }\n\n      // 创建Deepgram实时连接\n      const deepgramConnection = deepgram.listen.live({\n        language: config.language || 'zh-CN',\n        model: 'nova',\n        smart_format: true,\n        interim_results: true,\n        punctuate: true\n      });\n\n      // 保存连接引用\n      deepgramConnectionRef.current = deepgramConnection;\n\n      // 处理转写结果\n      deepgramConnection.on('transcriptReceived', transcript => {\n        // 解析转写结果\n        const result = transcript.channel.alternatives[0];\n        if (transcript.is_final) {\n          // 最终结果\n          if (result.transcript) {\n            console.log('最终转写结果:', result.transcript);\n            setTranscription(prev => prev + result.transcript + ' ');\n\n            // 清除临时结果\n            setInterimTranscription('');\n\n            // 可选：发送到服务器\n            sendMessage({\n              type: 'transcription',\n              text: result.transcript,\n              final: true\n            });\n          }\n        } else {\n          // 临时结果\n          if (result.transcript) {\n            console.log('临时转写结果:', result.transcript);\n            setInterimTranscription(result.transcript);\n          }\n        }\n      });\n\n      // 错误处理\n      deepgramConnection.on('error', err => {\n        console.error('Deepgram转写错误:', err);\n        error('语音转写服务出错');\n      });\n\n      // 启动音频音量监测\n      const monitorAudioLevel = () => {\n        if (!analyzerRef.current || !isRecording) return;\n\n        // 获取频率数据\n        const dataArray = new Uint8Array(analyzerRef.current.frequencyBinCount);\n        analyzerRef.current.getByteFrequencyData(dataArray);\n\n        // 计算平均音量\n        let sum = 0;\n        for (let i = 0; i < dataArray.length; i++) {\n          sum += dataArray[i];\n        }\n        const average = sum / dataArray.length;\n\n        // 更新音量状态\n        setAudioLevel(average);\n\n        // 如果音量太低，显示警告\n        if (isRecording && average < 10 && Date.now() - recordingStartTime > 1000) {\n          setLowVolumeWarning(true);\n        } else {\n          setLowVolumeWarning(false);\n        }\n\n        // 继续监测\n        animationFrameRef.current = requestAnimationFrame(monitorAudioLevel);\n      };\n\n      // 记录录音开始时间\n      const recordingStartTime = Date.now();\n\n      // 开始音量监测\n      animationFrameRef.current = requestAnimationFrame(monitorAudioLevel);\n\n      // 连接音频节点\n      sourceNode.connect(analyzer);\n\n      // 连接到AudioWorklet或ScriptProcessor\n      if (audioWorklet) {\n        analyzer.connect(audioWorklet);\n        // 只有备用处理器需要连接到目标\n        if (processorType === 'scriptProcessor' && audioWorklet instanceof ScriptProcessorNode) {\n          audioWorklet.connect(audioContext.destination);\n        }\n      }\n\n      // 更新状态\n      setIsRecording(true);\n      success('已开始录音');\n\n      // 通知服务器开始录音\n      sendMessage({\n        type: 'recording_started',\n        timestamp: new Date().toISOString()\n      });\n    } catch (err) {\n      console.error('启动录音失败:', err);\n      error(err.message || '无法访问麦克风');\n      stopRecording();\n    }\n  }, [isRecording, config, initDeepgram, sendMessage, success, error]);\n\n  // 停止录音\n  const stopRecording = useCallback(() => {\n    // 停止所有媒体轨道\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      mediaStreamRef.current = null;\n    }\n\n    // 关闭Deepgram连接\n    if (deepgramConnectionRef.current) {\n      try {\n        deepgramConnectionRef.current.finish();\n        deepgramConnectionRef.current = null;\n      } catch (err) {\n        console.error('关闭Deepgram连接出错:', err);\n      }\n    }\n\n    // 停止音量监测\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n\n    // 断开音频处理节点\n    try {\n      if (analyzerRef.current) {\n        analyzerRef.current.disconnect();\n      }\n      if (sourceNodeRef.current) {\n        sourceNodeRef.current.disconnect();\n      }\n      if (processorRef.current) {\n        processorRef.current.disconnect();\n      }\n    } catch (err) {\n      console.error('断开音频节点出错:', err);\n    }\n\n    // 关闭音频上下文\n    if (audioContextRef.current) {\n      try {\n        audioContextRef.current.close();\n        audioContextRef.current = null;\n      } catch (err) {\n        console.error('关闭音频上下文出错:', err);\n      }\n    }\n\n    // 更新状态\n    setIsRecording(false);\n\n    // 如果有最终的转写结果，发送到服务器\n    if (transcription.trim()) {\n      sendMessage({\n        type: 'transcription_complete',\n        text: transcription.trim(),\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // 通知服务器录音已停止\n    sendMessage({\n      type: 'recording_stopped',\n      timestamp: new Date().toISOString()\n    });\n  }, [transcription, sendMessage]);\n\n  // 切换录音状态\n  const toggleRecording = useCallback(() => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      // 如果开始新的录音，清除之前的转写结果\n      setTranscription('');\n      setInterimTranscription('');\n      startRecording();\n    }\n  }, [isRecording, startRecording, stopRecording]);\n\n  // 向服务器发送完整的转写文本\n  const sendTranscription = useCallback(() => {\n    if (!transcription.trim()) {\n      error('没有可发送的文本');\n      return;\n    }\n    sendMessage({\n      type: 'text_input',\n      text: transcription.trim(),\n      audio_quality: {\n        averageLevel: audioLevel,\n        hadLowVolumeWarning: lowVolumeWarning\n      }\n    });\n\n    // 清除本地转写缓存\n    setTranscription('');\n    setInterimTranscription('');\n    setLowVolumeWarning(false);\n    success('消息已发送');\n  }, [transcription, audioLevel, lowVolumeWarning, sendMessage, success, error]);\n\n  // 初始化检查WebRTC支持\n  useEffect(() => {\n    // 检查浏览器支持\n    const checkSupport = () => {\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        console.error('浏览器不支持WebRTC');\n        error('您的浏览器不支持语音功能');\n        return false;\n      }\n      if (!window.AudioContext && !window.webkitAudioContext) {\n        console.error('浏览器不支持AudioContext');\n        error('您的浏览器不支持音频处理功能');\n        return false;\n      }\n      return true;\n    };\n    const isSupported = checkSupport();\n    setIsReady(isSupported);\n    if (isSupported) {\n      console.log('WebRTC和音频处理功能已就绪');\n    }\n\n    // 组件卸载时停止录音\n    return () => {\n      if (isRecording) {\n        stopRecording();\n      }\n    };\n  }, [isRecording, stopRecording, error]);\n\n  // 提供上下文值\n  const contextValue = {\n    isReady,\n    isRecording,\n    transcription,\n    interimTranscription,\n    audioLevel,\n    lowVolumeWarning,\n    startRecording,\n    stopRecording,\n    toggleRecording,\n    sendTranscription,\n    clearTranscription: () => {\n      setTranscription('');\n      setInterimTranscription('');\n      setLowVolumeWarning(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(WebRTCContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 421,\n    columnNumber: 5\n  }, this);\n};\n\n// 自定义Hook，用于在组件中访问WebRTC功能\n_s(WebRTCProvider, \"hl/jKfKUJdnO2P0AbPJpJZ/jc1Y=\", false, function () {\n  return [useWebSocket, useConfig, useNotification];\n});\n_c = WebRTCProvider;\nexport const useWebRTC = () => {\n  _s2();\n  const context = useContext(WebRTCContext);\n  if (!context) {\n    throw new Error('useWebRTC必须在WebRTCProvider内部使用');\n  }\n  return context;\n};\n_s2(useWebRTC, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"WebRTCProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","useRef","useWebSocket","useConfig","useNotification","createClient","jsxDEV","_jsxDEV","WebRTCContext","WebRTCProvider","children","_s","socket","isConnected","sendMessage","config","success","error","isReady","setIsReady","isRecording","setIsRecording","transcription","setTranscription","interimTranscription","setInterimTranscription","audioLevel","setAudioLevel","lowVolumeWarning","setLowVolumeWarning","processorLoaded","setProcessorLoaded","mediaStreamRef","audioContextRef","processorRef","sourceNodeRef","deepgramConnectionRef","analyzerRef","audioDataBufferRef","animationFrameRef","initDeepgram","apiKey","process","env","REACT_APP_DEEPGRAM_API_KEY","Error","console","log","err","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","video","current","audioContext","window","AudioContext","webkitAudioContext","sourceNode","createMediaStreamSource","analyzer","createAnalyser","fftSize","smoothingTimeConstant","audioWorklet","addModule","processor","AudioWorkletNode","port","postMessage","command","sampleRate","targetSampleRate","onmessage","event","data","type","send","buffer","backupProcessor","createScriptProcessor","onaudioprocess","e","inputData","inputBuffer","getChannelData","pcmData","Int16Array","length","i","Math","min","max","deepgram","deepgramConnection","listen","live","language","model","smart_format","interim_results","punctuate","on","transcript","result","channel","alternatives","is_final","prev","text","final","monitorAudioLevel","dataArray","Uint8Array","frequencyBinCount","getByteFrequencyData","sum","average","Date","now","recordingStartTime","requestAnimationFrame","connect","processorType","ScriptProcessorNode","destination","timestamp","toISOString","message","stopRecording","getTracks","forEach","track","stop","finish","cancelAnimationFrame","disconnect","close","trim","toggleRecording","sendTranscription","audio_quality","averageLevel","hadLowVolumeWarning","checkSupport","isSupported","contextValue","clearTranscription","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWebRTC","_s2","context","$RefreshReg$"],"sources":["/Users/niko/digital-human/frontend/src/contexts/WebRTCContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback, useRef } from 'react';\nimport { useWebSocket } from './WebSocketContext';\nimport { useConfig } from './ConfigContext';\nimport { useNotification } from './NotificationContext';\nimport { createClient } from '@deepgram/sdk';\n\n// 创建上下文\nconst WebRTCContext = createContext();\n\n// WebRTC提供者组件\nexport const WebRTCProvider = ({ children }) => {\n  const { socket, isConnected, sendMessage } = useWebSocket();\n  const { config } = useConfig();\n  const { success, error } = useNotification();\n  \n  // WebRTC状态\n  const [isReady, setIsReady] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcription, setTranscription] = useState('');\n  const [interimTranscription, setInterimTranscription] = useState('');\n  const [audioLevel, setAudioLevel] = useState(0);\n  const [lowVolumeWarning, setLowVolumeWarning] = useState(false);\n  const [processorLoaded, setProcessorLoaded] = useState(false);\n  \n  // 引用存储\n  const mediaStreamRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const processorRef = useRef(null);\n  const sourceNodeRef = useRef(null);\n  const deepgramConnectionRef = useRef(null);\n  const analyzerRef = useRef(null);\n  const audioDataBufferRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  \n  // 初始化Deepgram客户端\n  const initDeepgram = useCallback(async () => {\n    try {\n      // 使用环境变量中的API密钥\n      const apiKey = process.env.REACT_APP_DEEPGRAM_API_KEY;\n      if (!apiKey) {\n        throw new Error('未找到Deepgram API密钥');\n      }\n      \n      console.log('正在初始化Deepgram...');\n      return createClient(apiKey);\n    } catch (err) {\n      console.error('初始化Deepgram失败:', err);\n      error('无法连接到语音服务');\n      return null;\n    }\n  }, [error]);\n  \n  // 开始录音并实时转写\n  const startRecording = useCallback(async () => {\n    if (isRecording) return;\n    \n    try {\n      console.log('正在请求麦克风权限...');\n      \n      // 请求麦克风访问权限\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }, \n        video: false \n      });\n      \n      mediaStreamRef.current = stream;\n      \n      // 创建音频处理上下文\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      audioContextRef.current = audioContext;\n      \n      // 创建媒体源节点\n      const sourceNode = audioContext.createMediaStreamSource(stream);\n      sourceNodeRef.current = sourceNode;\n      \n      // 创建音频分析器节点用于音量监测\n      const analyzer = audioContext.createAnalyser();\n      analyzer.fftSize = 256;\n      analyzer.smoothingTimeConstant = 0.8;\n      analyzerRef.current = analyzer;\n      \n      // 加载并创建AudioWorklet处理器\n      try {\n        // 检查是否已加载处理器代码\n        if (!processorLoaded) {\n          console.log('正在加载音频处理器模块...');\n          await audioContext.audioWorklet.addModule('/audio-processor.js');\n          setProcessorLoaded(true);\n        }\n        \n        // 创建工作节点\n        const processor = new AudioWorkletNode(audioContext, 'audio-processor');\n        processorRef.current = processor;\n        \n        // 配置处理器\n        processor.port.postMessage({\n          command: 'configure',\n          config: {\n            sampleRate: audioContext.sampleRate,\n            targetSampleRate: 16000  // Deepgram推荐采样率\n          }\n        });\n        \n        // 处理来自处理器的音频数据\n        processor.port.onmessage = (event) => {\n          if (!deepgramConnectionRef.current) return;\n          \n          if (event.data.type === 'audio-data') {\n            // 向Deepgram发送处理好的音频数据\n            deepgramConnectionRef.current.send(event.data.buffer);\n          }\n        };\n      } catch (err) {\n        console.error('创建AudioWorklet处理器失败:', err);\n        error('高级音频处理不可用，将使用备用方法');\n        \n        // 备用方案：创建旧版处理器节点\n        const backupProcessor = audioContext.createScriptProcessor(4096, 1, 1);\n        processorRef.current = backupProcessor;\n        \n        // 处理音频数据并发送到Deepgram\n        backupProcessor.onaudioprocess = (e) => {\n          if (!deepgramConnectionRef.current) return;\n          \n          // 获取音频数据\n          const inputData = e.inputBuffer.getChannelData(0);\n          \n          // 转换为16位PCM格式\n          const pcmData = new Int16Array(inputData.length);\n          for (let i = 0; i < inputData.length; i++) {\n            pcmData[i] = Math.min(1, Math.max(-1, inputData[i])) * 0x7FFF;\n          }\n          \n          // 发送到Deepgram\n          deepgramConnectionRef.current.send(pcmData.buffer);\n        };\n      }\n      \n      // 初始化Deepgram客户端\n      const deepgram = await initDeepgram();\n      if (!deepgram) {\n        throw new Error('无法初始化Deepgram');\n      }\n      \n      // 创建Deepgram实时连接\n      const deepgramConnection = deepgram.listen.live({\n        language: config.language || 'zh-CN',\n        model: 'nova',\n        smart_format: true,\n        interim_results: true,\n        punctuate: true\n      });\n      \n      // 保存连接引用\n      deepgramConnectionRef.current = deepgramConnection;\n      \n      // 处理转写结果\n      deepgramConnection.on('transcriptReceived', (transcript) => {\n        // 解析转写结果\n        const result = transcript.channel.alternatives[0];\n        \n        if (transcript.is_final) {\n          // 最终结果\n          if (result.transcript) {\n            console.log('最终转写结果:', result.transcript);\n            setTranscription(prev => prev + result.transcript + ' ');\n            \n            // 清除临时结果\n            setInterimTranscription('');\n            \n            // 可选：发送到服务器\n            sendMessage({\n              type: 'transcription',\n              text: result.transcript,\n              final: true\n            });\n          }\n        } else {\n          // 临时结果\n          if (result.transcript) {\n            console.log('临时转写结果:', result.transcript);\n            setInterimTranscription(result.transcript);\n          }\n        }\n      });\n      \n      // 错误处理\n      deepgramConnection.on('error', (err) => {\n        console.error('Deepgram转写错误:', err);\n        error('语音转写服务出错');\n      });\n      \n      // 启动音频音量监测\n      const monitorAudioLevel = () => {\n        if (!analyzerRef.current || !isRecording) return;\n        \n        // 获取频率数据\n        const dataArray = new Uint8Array(analyzerRef.current.frequencyBinCount);\n        analyzerRef.current.getByteFrequencyData(dataArray);\n        \n        // 计算平均音量\n        let sum = 0;\n        for (let i = 0; i < dataArray.length; i++) {\n          sum += dataArray[i];\n        }\n        const average = sum / dataArray.length;\n        \n        // 更新音量状态\n        setAudioLevel(average);\n        \n        // 如果音量太低，显示警告\n        if (isRecording && average < 10 && Date.now() - recordingStartTime > 1000) {\n          setLowVolumeWarning(true);\n        } else {\n          setLowVolumeWarning(false);\n        }\n        \n        // 继续监测\n        animationFrameRef.current = requestAnimationFrame(monitorAudioLevel);\n      };\n      \n      // 记录录音开始时间\n      const recordingStartTime = Date.now();\n      \n      // 开始音量监测\n      animationFrameRef.current = requestAnimationFrame(monitorAudioLevel);\n      \n      // 连接音频节点\n      sourceNode.connect(analyzer);\n      \n      // 连接到AudioWorklet或ScriptProcessor\n      if (audioWorklet) {\n        analyzer.connect(audioWorklet);\n        // 只有备用处理器需要连接到目标\n        if (processorType === 'scriptProcessor' && audioWorklet instanceof ScriptProcessorNode) {\n          audioWorklet.connect(audioContext.destination);\n        }\n      }\n      \n      // 更新状态\n      setIsRecording(true);\n      success('已开始录音');\n      \n      // 通知服务器开始录音\n      sendMessage({\n        type: 'recording_started',\n        timestamp: new Date().toISOString()\n      });\n      \n    } catch (err) {\n      console.error('启动录音失败:', err);\n      error(err.message || '无法访问麦克风');\n      stopRecording();\n    }\n  }, [isRecording, config, initDeepgram, sendMessage, success, error]);\n  \n  // 停止录音\n  const stopRecording = useCallback(() => {\n    // 停止所有媒体轨道\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      mediaStreamRef.current = null;\n    }\n    \n    // 关闭Deepgram连接\n    if (deepgramConnectionRef.current) {\n      try {\n        deepgramConnectionRef.current.finish();\n        deepgramConnectionRef.current = null;\n      } catch (err) {\n        console.error('关闭Deepgram连接出错:', err);\n      }\n    }\n    \n    // 停止音量监测\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n    \n    // 断开音频处理节点\n    try {\n      if (analyzerRef.current) {\n        analyzerRef.current.disconnect();\n      }\n      \n      if (sourceNodeRef.current) {\n        sourceNodeRef.current.disconnect();\n      }\n      \n      if (processorRef.current) {\n        processorRef.current.disconnect();\n      }\n    } catch (err) {\n      console.error('断开音频节点出错:', err);\n    }\n    \n    // 关闭音频上下文\n    if (audioContextRef.current) {\n      try {\n        audioContextRef.current.close();\n        audioContextRef.current = null;\n      } catch (err) {\n        console.error('关闭音频上下文出错:', err);\n      }\n    }\n    \n    // 更新状态\n    setIsRecording(false);\n    \n    // 如果有最终的转写结果，发送到服务器\n    if (transcription.trim()) {\n      sendMessage({\n        type: 'transcription_complete',\n        text: transcription.trim(),\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // 通知服务器录音已停止\n    sendMessage({\n      type: 'recording_stopped',\n      timestamp: new Date().toISOString()\n    });\n  }, [transcription, sendMessage]);\n  \n  // 切换录音状态\n  const toggleRecording = useCallback(() => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      // 如果开始新的录音，清除之前的转写结果\n      setTranscription('');\n      setInterimTranscription('');\n      startRecording();\n    }\n  }, [isRecording, startRecording, stopRecording]);\n  \n  // 向服务器发送完整的转写文本\n  const sendTranscription = useCallback(() => {\n    if (!transcription.trim()) {\n      error('没有可发送的文本');\n      return;\n    }\n    \n    sendMessage({\n      type: 'text_input',\n      text: transcription.trim(),\n      audio_quality: {\n        averageLevel: audioLevel,\n        hadLowVolumeWarning: lowVolumeWarning\n      }\n    });\n    \n    // 清除本地转写缓存\n    setTranscription('');\n    setInterimTranscription('');\n    setLowVolumeWarning(false);\n    \n    success('消息已发送');\n  }, [transcription, audioLevel, lowVolumeWarning, sendMessage, success, error]);\n  \n  // 初始化检查WebRTC支持\n  useEffect(() => {\n    // 检查浏览器支持\n    const checkSupport = () => {\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        console.error('浏览器不支持WebRTC');\n        error('您的浏览器不支持语音功能');\n        return false;\n      }\n      \n      if (!window.AudioContext && !window.webkitAudioContext) {\n        console.error('浏览器不支持AudioContext');\n        error('您的浏览器不支持音频处理功能');\n        return false;\n      }\n      \n      return true;\n    };\n    \n    const isSupported = checkSupport();\n    setIsReady(isSupported);\n    \n    if (isSupported) {\n      console.log('WebRTC和音频处理功能已就绪');\n    }\n    \n    // 组件卸载时停止录音\n    return () => {\n      if (isRecording) {\n        stopRecording();\n      }\n    };\n  }, [isRecording, stopRecording, error]);\n  \n  // 提供上下文值\n  const contextValue = {\n    isReady,\n    isRecording,\n    transcription,\n    interimTranscription,\n    audioLevel,\n    lowVolumeWarning,\n    startRecording,\n    stopRecording,\n    toggleRecording,\n    sendTranscription,\n    clearTranscription: () => {\n      setTranscription('');\n      setInterimTranscription('');\n      setLowVolumeWarning(false);\n    }\n  };\n  \n  return (\n    <WebRTCContext.Provider value={contextValue}>\n      {children}\n    </WebRTCContext.Provider>\n  );\n};\n\n// 自定义Hook，用于在组件中访问WebRTC功能\nexport const useWebRTC = () => {\n  const context = useContext(WebRTCContext);\n  if (!context) {\n    throw new Error('useWebRTC必须在WebRTCProvider内部使用');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}