{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/niko/node_modules/.pnpm/@deepgram+sdk@3.11.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@deepgram/sdk/src/lib/types/AgentLiveSchema.ts"],"sourcesContent":["type AudioFormat =\n  | {\n      encoding: \"linear16\";\n      container: \"wav\" | \"none\";\n      sampleRate: 8000 | 16000 | 24000 | 32000 | 48000;\n    }\n  | {\n      encoding: \"mulaw\";\n      container: \"wav\" | \"none\";\n      sampleRate: 8000 | 16000;\n    }\n  | {\n      encoding: \"alaw\";\n      container: \"wav\" | \"none\";\n      sampleRate: 8000 | 16000;\n    };\n\ntype AudioEncoding =\n  | \"linear16\"\n  | \"flac\"\n  | \"mulaw\"\n  | \"amr-nb\"\n  | \"amr-wb\"\n  | \"Opus\"\n  | \"speex\"\n  | \"g729\"\n  | string;\n\ntype ListenModel =\n  | \"nova-3\"\n  | \"nova-3-general\"\n  | \"nova-3-medical\"\n  | \"nova-2\"\n  | \"nova-2-meeting\"\n  | \"nova-2-phonecall\"\n  | \"nova-2-voicemail\"\n  | \"nova-2-finance\"\n  | \"nova-2-conversational\"\n  | \"nova-2-video\"\n  | \"nova-2-medical\"\n  | \"nova-2-drivethru\"\n  | \"nova-2-automotive\"\n  | \"nova-2-atc\"\n  | \"nova\"\n  | \"nova-phonecall\"\n  | \"enhanced\"\n  | \"enhanced-meeting\"\n  | \"enhanced-phonecall\"\n  | \"enhanced-finance\"\n  | \"base\"\n  | \"base-meeting\"\n  | \"base-phonecall\"\n  | \"base-voicemail\"\n  | \"base-finance\"\n  | \"base-conversational\"\n  | \"base-video\"\n  | \"whisper-tiny\"\n  | \"whisper\"\n  | \"whisper-small\"\n  | \"whisper-medium\"\n  | \"whisper-large\"\n  | string;\n\ntype SpeakModel =\n  | \"aura-asteria-en\"\n  | \"aura-luna-en\"\n  | \"aura-stella-en\"\n  | \"aura-athena-en\"\n  | \"aura-hera-en\"\n  | \"aura-orion-en\"\n  | \"aura-arcas-en\"\n  | \"aura-perseus-en\"\n  | \"aura-angus-en\"\n  | \"aura-orpheus-en\"\n  | \"aura-helios-en\"\n  | \"aura-zeus-en\"\n  | string;\n\ninterface ThinkModelFunction {\n  name: string;\n  description: string;\n  url: string;\n  headers: [\n    {\n      key: \"authorization\";\n      value: string;\n    }\n  ];\n  method: \"POST\";\n  parameters: {\n    type: string;\n    properties: Record<\n      string,\n      {\n        type: string;\n        description: string;\n      }\n    >;\n  };\n}\n\ntype ThinkModel =\n  | {\n      provider: {\n        type: \"open_ai\";\n      };\n      model: \"gpt-4o-mini\";\n      instructions?: string;\n      functions?: ThinkModelFunction[];\n    }\n  | {\n      provider: {\n        type: \"anthropic\";\n      };\n      model: \"claude-3-haiku-20240307\";\n      instructions?: string;\n      functions?: ThinkModelFunction[];\n    }\n  | {\n      provider: {\n        type: \"groq\";\n      };\n      model: \"\";\n      instructions?: string;\n      functions?: ThinkModelFunction[];\n    }\n  | {\n      provider: {\n        type: \"custom\";\n        url: string;\n        key: string;\n      };\n      model: string;\n      instructions?: string;\n      functions?: ThinkModelFunction[];\n    };\n\n/**\n * @see https://developers.deepgram.com/reference/voicebot-api-phase-preview#settingsconfiguration\n */\ninterface AgentLiveSchema extends Record<string, unknown> {\n  audio: {\n    input?: {\n      /**\n       * @default 1\n       */\n      channels?: number;\n      encoding: AudioEncoding;\n      /**\n       * @default false\n       */\n      multichannel?: boolean;\n      sampleRate: number;\n    };\n    /**\n     * @see https://developers.deepgram.com/docs/tts-media-output-settings#audio-format-combinations\n     */\n    output?: AudioFormat;\n  };\n  agent: {\n    listen: {\n      /**\n       * @see https://developers.deepgram.com/docs/model\n       */\n      model: ListenModel;\n      /**\n       * @see https://developers.deepgram.com/docs/keyterm\n       */\n      keyterms?: string[];\n    };\n    speak: {\n      /**\n       * @see https://developers.deepgram.com/docs/tts-models\n       */\n      model: SpeakModel;\n    };\n    /**\n     * @see https://developers.deepgram.com/reference/voicebot-api-phase-preview#supported-llm-providers-and-models\n     */\n    think: ThinkModel;\n  };\n  context?: {\n    /**\n     * LLM message history (e.g. to restore existing conversation if websocket disconnects)\n     */\n    messages: { role: \"user\" | \"assistant\"; content: string }[];\n    /**\n     * Whether to replay the last message, if it is an assistant message.\n     */\n    replay: boolean;\n  };\n}\n\nexport type { AgentLiveSchema, SpeakModel };\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}