{"ast":null,"code":"import { chunkArray } from \"../lib/helpers\";\nexport class DeepgramConverter {\n  constructor(transcriptionData) {\n    this.transcriptionData = transcriptionData;\n  }\n  getLines(lineLength = 8) {\n    const {\n      results\n    } = this.transcriptionData;\n    let content = [];\n    if (results.utterances) {\n      results.utterances.forEach(utterance => {\n        if (utterance.words.length > lineLength) {\n          content.push(...chunkArray(utterance.words, lineLength));\n        } else {\n          content.push(utterance.words);\n        }\n      });\n    } else {\n      const words = results.channels[0].alternatives[0].words;\n      const diarize = \"speaker\" in words[0]; // was diarization used\n      let buffer = [];\n      let currentSpeaker = 0;\n      words.forEach(word => {\n        var _a;\n        if (diarize && word.speaker !== currentSpeaker) {\n          content.push(buffer);\n          buffer = [];\n        }\n        if (buffer.length === lineLength) {\n          content.push(buffer);\n          buffer = [];\n        }\n        if (diarize) {\n          currentSpeaker = (_a = word.speaker) !== null && _a !== void 0 ? _a : 0;\n        }\n        buffer.push(word);\n      });\n      content.push(buffer);\n    }\n    return content;\n  }\n  getHeaders() {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const output = [];\n    output.push(\"NOTE\");\n    output.push(\"Transcription provided by Deepgram\");\n    ((_a = this.transcriptionData.metadata) === null || _a === void 0 ? void 0 : _a.request_id) ? output.push(`Request Id: ${(_b = this.transcriptionData.metadata) === null || _b === void 0 ? void 0 : _b.request_id}`) : null;\n    ((_c = this.transcriptionData.metadata) === null || _c === void 0 ? void 0 : _c.created) ? output.push(`Created: ${(_d = this.transcriptionData.metadata) === null || _d === void 0 ? void 0 : _d.created}`) : null;\n    ((_e = this.transcriptionData.metadata) === null || _e === void 0 ? void 0 : _e.duration) ? output.push(`Duration: ${(_f = this.transcriptionData.metadata) === null || _f === void 0 ? void 0 : _f.duration}`) : null;\n    ((_g = this.transcriptionData.metadata) === null || _g === void 0 ? void 0 : _g.channels) ? output.push(`Channels: ${(_h = this.transcriptionData.metadata) === null || _h === void 0 ? void 0 : _h.channels}`) : null;\n    return output;\n  }\n}","map":{"version":3,"names":["chunkArray","DeepgramConverter","constructor","transcriptionData","getLines","lineLength","results","content","utterances","forEach","utterance","words","length","push","channels","alternatives","diarize","buffer","currentSpeaker","word","speaker","_a","getHeaders","output","metadata","request_id","_b","_c","created","_d","_e","duration","_f","_g","_h"],"sources":["/Users/niko/node_modules/.pnpm/@deepgram+captions@1.2.0/node_modules/@deepgram/captions/src/converters/DeepgramConverter.ts"],"sourcesContent":["import { chunkArray } from \"../lib/helpers\";\nimport { DeepgramResponse, WordBase } from \"../lib/types\";\nimport { IConverter } from \"./IConverter\";\n\nexport class DeepgramConverter implements IConverter {\n  constructor(public transcriptionData: DeepgramResponse) {}\n\n  getLines(lineLength: number = 8): WordBase[][] {\n    const { results } = this.transcriptionData;\n    let content: WordBase[][] = [];\n\n    if (results.utterances) {\n      results.utterances.forEach((utterance) => {\n        if (utterance.words.length > lineLength) {\n          content.push(...chunkArray(utterance.words, lineLength));\n        } else {\n          content.push(utterance.words);\n        }\n      });\n    } else {\n      const words = results.channels[0].alternatives[0].words;\n      const diarize = \"speaker\" in words[0]; // was diarization used\n\n      let buffer: WordBase[] = [];\n      let currentSpeaker = 0;\n\n      words.forEach((word) => {\n        if (diarize && word.speaker !== currentSpeaker) {\n          content.push(buffer);\n          buffer = [];\n        }\n\n        if (buffer.length === lineLength) {\n          content.push(buffer);\n          buffer = [];\n        }\n\n        if (diarize) {\n          currentSpeaker = word.speaker ?? 0;\n        }\n\n        buffer.push(word);\n      });\n\n      content.push(buffer);\n    }\n\n    return content;\n  }\n\n  getHeaders(): string[] {\n    const output: string[] = [];\n\n    output.push(\"NOTE\");\n    output.push(\"Transcription provided by Deepgram\");\n    this.transcriptionData.metadata?.request_id\n      ? output.push(`Request Id: ${this.transcriptionData.metadata?.request_id}`)\n      : null;\n    this.transcriptionData.metadata?.created\n      ? output.push(`Created: ${this.transcriptionData.metadata?.created}`)\n      : null;\n    this.transcriptionData.metadata?.duration\n      ? output.push(`Duration: ${this.transcriptionData.metadata?.duration}`)\n      : null;\n    this.transcriptionData.metadata?.channels\n      ? output.push(`Channels: ${this.transcriptionData.metadata?.channels}`)\n      : null;\n\n    return output;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}