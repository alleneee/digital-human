{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { AbstractClient, noop } from \"./AbstractClient\";\nimport { CONNECTION_STATE, SOCKET_STATES } from \"../lib/constants\";\nimport { isBun } from \"../lib/helpers\";\n/**\n * Represents an error that occurred in a WebSocket-like connection.\n * @property {any} error - The underlying error object.\n * @property {string} message - A human-readable error message.\n * @property {string} type - The type of the error.\n */\n// interface WebSocketLikeError {\n//   error: any;\n//   message: string;\n//   type: string;\n// }\n/**\n * Indicates whether a native WebSocket implementation is available in the current environment.\n */\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== \"undefined\";\n/**\n * Represents an abstract live client that extends the AbstractClient class.\n * The AbstractLiveClient class provides functionality for connecting, reconnecting, and disconnecting a WebSocket connection, as well as sending data over the connection.\n * Subclasses of this class are responsible for setting up the connection event handlers.\n *\n * @abstract\n */\nexport class AbstractLiveClient extends AbstractClient {\n  constructor(options) {\n    super(options);\n    this.conn = null;\n    this.sendBuffer = [];\n    /**\n     * Reconnects the socket using new or existing transcription options.\n     *\n     * @param options - The transcription options to use when reconnecting the socket.\n     */\n    this.reconnect = noop;\n    const {\n      key,\n      websocket: {\n        options: websocketOptions,\n        client\n      }\n    } = this.namespaceOptions;\n    if (this.proxy) {\n      this.baseUrl = websocketOptions.proxy.url;\n    } else {\n      this.baseUrl = websocketOptions.url;\n    }\n    if (client) {\n      this.transport = client;\n    } else {\n      this.transport = null;\n    }\n    if (websocketOptions._nodeOnlyHeaders) {\n      this.headers = websocketOptions._nodeOnlyHeaders;\n    } else {\n      this.headers = {};\n    }\n    if (!(\"Authorization\" in this.headers)) {\n      this.headers[\"Authorization\"] = `Token ${key}`; // Add default token\n    }\n  }\n  /**\n   * Connects the socket, unless already connected.\n   *\n   * @protected Can only be called from within the class.\n   */\n  connect(transcriptionOptions, endpoint) {\n    if (this.conn) {\n      return;\n    }\n    this.reconnect = (options = transcriptionOptions) => {\n      this.connect(options, endpoint);\n    };\n    const requestUrl = this.getRequestUrl(endpoint, {}, transcriptionOptions);\n    /**\n     * Custom websocket transport\n     */\n    if (this.transport) {\n      this.conn = new this.transport(requestUrl, undefined, {\n        headers: this.headers\n      });\n      return;\n    }\n    /**\n     * @summary Bun websocket transport has a bug where it's native WebSocket implementation messes up the headers\n     * @summary This is a workaround to use the WS package for the websocket connection instead of the native Bun WebSocket\n     * @summary you can track the issue here\n     * @link https://github.com/oven-sh/bun/issues/4529\n     */\n    if (isBun()) {\n      import(\"ws\").then(({\n        default: WS\n      }) => {\n        this.conn = new WS(requestUrl, {\n          headers: this.headers\n        });\n        console.log(`Using WS package`);\n        this.setupConnection();\n      });\n      return;\n    }\n    /**\n     * Native websocket transport (browser)\n     */\n    if (NATIVE_WEBSOCKET_AVAILABLE) {\n      this.conn = new WebSocket(requestUrl, [\"token\", this.namespaceOptions.key]);\n      this.setupConnection();\n      return;\n    }\n    /**\n     * Dummy websocket\n     */\n    this.conn = new WSWebSocketDummy(requestUrl, undefined, {\n      close: () => {\n        this.conn = null;\n      }\n    });\n    /**\n     * WS package for node environment\n     */\n    import(\"ws\").then(({\n      default: WS\n    }) => {\n      this.conn = new WS(requestUrl, undefined, {\n        headers: this.headers\n      });\n      this.setupConnection();\n    });\n  }\n  /**\n   * Disconnects the socket from the client.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code, reason) {\n    if (this.conn) {\n      this.conn.onclose = function () {}; // noop\n      if (code) {\n        this.conn.close(code, reason !== null && reason !== void 0 ? reason : \"\");\n      } else {\n        this.conn.close();\n      }\n      this.conn = null;\n    }\n  }\n  /**\n   * Returns the current connection state of the WebSocket connection.\n   *\n   * @returns The current connection state of the WebSocket connection.\n   */\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\n   * Returns the current ready state of the WebSocket connection.\n   *\n   * @returns The current ready state of the WebSocket connection.\n   */\n  getReadyState() {\n    var _a, _b;\n    return (_b = (_a = this.conn) === null || _a === void 0 ? void 0 : _a.readyState) !== null && _b !== void 0 ? _b : SOCKET_STATES.closed;\n  }\n  /**\n   * Returns `true` is the connection is open.\n   */\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n  /**\n   * Sends data to the Deepgram API via websocket connection\n   * @param data Audio data to send to Deepgram\n   *\n   * Conforms to RFC #146 for Node.js - does not send an empty byte.\n   * @see https://github.com/deepgram/deepgram-python-sdk/issues/146\n   */\n  send(data) {\n    const callback = () => __awaiter(this, void 0, void 0, function* () {\n      var _a;\n      if (data instanceof Blob) {\n        if (data.size === 0) {\n          this.log(\"warn\", \"skipping `send` for zero-byte blob\", data);\n          return;\n        }\n        data = yield data.arrayBuffer();\n      }\n      if (typeof data !== \"string\") {\n        if (!(data === null || data === void 0 ? void 0 : data.byteLength)) {\n          this.log(\"warn\", \"skipping `send` for zero-byte payload\", data);\n          return;\n        }\n      }\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(data);\n    });\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n  /**\n   * Determines whether the current instance should proxy requests.\n   * @returns {boolean} true if the current instance should proxy requests; otherwise, false\n   */\n  get proxy() {\n    var _a;\n    return this.key === \"proxy\" && !!((_a = this.namespaceOptions.websocket.options.proxy) === null || _a === void 0 ? void 0 : _a.url);\n  }\n}\nclass WSWebSocketDummy {\n  constructor(address, _protocols, options) {\n    this.binaryType = \"arraybuffer\";\n    this.onclose = () => {};\n    this.onerror = () => {};\n    this.onmessage = () => {};\n    this.onopen = () => {};\n    this.readyState = SOCKET_STATES.connecting;\n    this.send = () => {};\n    this.url = null;\n    this.url = address.toString();\n    this.close = options.close;\n  }\n}\nexport { AbstractLiveClient as AbstractWsClient };","map":{"version":3,"names":["AbstractClient","noop","CONNECTION_STATE","SOCKET_STATES","isBun","NATIVE_WEBSOCKET_AVAILABLE","WebSocket","AbstractLiveClient","constructor","options","conn","sendBuffer","reconnect","key","websocket","websocketOptions","client","namespaceOptions","proxy","baseUrl","url","transport","_nodeOnlyHeaders","headers","connect","transcriptionOptions","endpoint","requestUrl","getRequestUrl","undefined","then","default","WS","console","log","setupConnection","WSWebSocketDummy","close","disconnect","code","reason","onclose","connectionState","readyState","connecting","Connecting","open","Open","closing","Closing","Closed","getReadyState","_b","_a","closed","isConnected","send","data","callback","__awaiter","Blob","size","arrayBuffer","byteLength","push","address","_protocols","binaryType","onerror","onmessage","onopen","toString","AbstractWsClient"],"sources":["/Users/niko/node_modules/.pnpm/@deepgram+sdk@3.11.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@deepgram/sdk/src/packages/AbstractLiveClient.ts"],"sourcesContent":["import { AbstractClient, noop } from \"./AbstractClient\";\nimport { CONNECTION_STATE, SOCKET_STATES } from \"../lib/constants\";\nimport type { DeepgramClientOptions, LiveSchema } from \"../lib/types\";\nimport type { WebSocket as WSWebSocket } from \"ws\";\nimport { isBun } from \"../lib/helpers\";\n\n/**\n * Represents a constructor for a WebSocket-like object that can be used in the application.\n * The constructor takes the following parameters:\n * @param address - The URL or address of the WebSocket server.\n * @param _ignored - An optional parameter that is ignored.\n * @param options - An optional object containing headers to be included in the WebSocket connection.\n * @returns A WebSocket-like object that implements the WebSocketLike interface.\n */\ninterface WebSocketLikeConstructor {\n  new (\n    address: string | URL,\n    _ignored?: any,\n    options?: { headers: object | undefined }\n  ): WebSocketLike;\n}\n\n/**\n * Represents the types of WebSocket-like connections that can be used in the application.\n * This type is used to provide a common interface for different WebSocket implementations,\n * such as the native WebSocket API, a WebSocket wrapper library, or a dummy implementation\n * for testing purposes.\n */\ntype WebSocketLike = WebSocket | WSWebSocket | WSWebSocketDummy;\n\n/**\n * Represents the types of data that can be sent or received over a WebSocket-like connection.\n */\ntype SocketDataLike = string | ArrayBufferLike | Blob;\n\n/**\n * Represents an error that occurred in a WebSocket-like connection.\n * @property {any} error - The underlying error object.\n * @property {string} message - A human-readable error message.\n * @property {string} type - The type of the error.\n */\n// interface WebSocketLikeError {\n//   error: any;\n//   message: string;\n//   type: string;\n// }\n\n/**\n * Indicates whether a native WebSocket implementation is available in the current environment.\n */\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== \"undefined\";\n\n/**\n * Represents an abstract live client that extends the AbstractClient class.\n * The AbstractLiveClient class provides functionality for connecting, reconnecting, and disconnecting a WebSocket connection, as well as sending data over the connection.\n * Subclasses of this class are responsible for setting up the connection event handlers.\n *\n * @abstract\n */\nexport abstract class AbstractLiveClient extends AbstractClient {\n  public headers: { [key: string]: string };\n  public transport: WebSocketLikeConstructor | null;\n  public conn: WebSocketLike | null = null;\n  public sendBuffer: Function[] = [];\n\n  constructor(options: DeepgramClientOptions) {\n    super(options);\n\n    const {\n      key,\n      websocket: { options: websocketOptions, client },\n    } = this.namespaceOptions;\n\n    if (this.proxy) {\n      this.baseUrl = websocketOptions.proxy!.url;\n    } else {\n      this.baseUrl = websocketOptions.url;\n    }\n\n    if (client) {\n      this.transport = client;\n    } else {\n      this.transport = null;\n    }\n\n    if (websocketOptions._nodeOnlyHeaders) {\n      this.headers = websocketOptions._nodeOnlyHeaders;\n    } else {\n      this.headers = {};\n    }\n\n    if (!(\"Authorization\" in this.headers)) {\n      this.headers[\"Authorization\"] = `Token ${key}`; // Add default token\n    }\n  }\n\n  /**\n   * Connects the socket, unless already connected.\n   *\n   * @protected Can only be called from within the class.\n   */\n  protected connect(transcriptionOptions: LiveSchema, endpoint: string): void {\n    if (this.conn) {\n      return;\n    }\n\n    this.reconnect = (options = transcriptionOptions) => {\n      this.connect(options, endpoint);\n    };\n\n    const requestUrl = this.getRequestUrl(endpoint, {}, transcriptionOptions);\n\n    /**\n     * Custom websocket transport\n     */\n    if (this.transport) {\n      this.conn = new this.transport(requestUrl, undefined, {\n        headers: this.headers,\n      });\n      return;\n    }\n\n    /**\n     * @summary Bun websocket transport has a bug where it's native WebSocket implementation messes up the headers\n     * @summary This is a workaround to use the WS package for the websocket connection instead of the native Bun WebSocket\n     * @summary you can track the issue here\n     * @link https://github.com/oven-sh/bun/issues/4529\n     */\n    if (isBun()) {\n      import(\"ws\").then(({ default: WS }) => {\n        this.conn = new WS(requestUrl, {\n          headers: this.headers,\n        });\n        console.log(`Using WS package`);\n        this.setupConnection();\n      });\n      return;\n    }\n\n    /**\n     * Native websocket transport (browser)\n     */\n    if (NATIVE_WEBSOCKET_AVAILABLE) {\n      this.conn = new WebSocket(requestUrl, [\"token\", this.namespaceOptions.key]);\n      this.setupConnection();\n      return;\n    }\n\n    /**\n     * Dummy websocket\n     */\n    this.conn = new WSWebSocketDummy(requestUrl, undefined, {\n      close: () => {\n        this.conn = null;\n      },\n    });\n\n    /**\n     * WS package for node environment\n     */\n    import(\"ws\").then(({ default: WS }) => {\n      this.conn = new WS(requestUrl, undefined, {\n        headers: this.headers,\n      });\n      this.setupConnection();\n    });\n  }\n\n  /**\n   * Reconnects the socket using new or existing transcription options.\n   *\n   * @param options - The transcription options to use when reconnecting the socket.\n   */\n  public reconnect: (options: LiveSchema) => void = noop;\n\n  /**\n   * Disconnects the socket from the client.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  public disconnect(code?: number, reason?: string): void {\n    if (this.conn) {\n      this.conn.onclose = function () {}; // noop\n      if (code) {\n        this.conn.close(code, reason ?? \"\");\n      } else {\n        this.conn.close();\n      }\n      this.conn = null;\n    }\n  }\n\n  /**\n   * Returns the current connection state of the WebSocket connection.\n   *\n   * @returns The current connection state of the WebSocket connection.\n   */\n  public connectionState(): CONNECTION_STATE {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n\n  /**\n   * Returns the current ready state of the WebSocket connection.\n   *\n   * @returns The current ready state of the WebSocket connection.\n   */\n  public getReadyState(): SOCKET_STATES {\n    return this.conn?.readyState ?? SOCKET_STATES.closed;\n  }\n\n  /**\n   * Returns `true` is the connection is open.\n   */\n  public isConnected(): boolean {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n\n  /**\n   * Sends data to the Deepgram API via websocket connection\n   * @param data Audio data to send to Deepgram\n   *\n   * Conforms to RFC #146 for Node.js - does not send an empty byte.\n   * @see https://github.com/deepgram/deepgram-python-sdk/issues/146\n   */\n  send(data: SocketDataLike): void {\n    const callback = async () => {\n      if (data instanceof Blob) {\n        if (data.size === 0) {\n          this.log(\"warn\", \"skipping `send` for zero-byte blob\", data);\n\n          return;\n        }\n\n        data = await data.arrayBuffer();\n      }\n\n      if (typeof data !== \"string\") {\n        if (!data?.byteLength) {\n          this.log(\"warn\", \"skipping `send` for zero-byte payload\", data);\n\n          return;\n        }\n      }\n\n      this.conn?.send(data);\n    };\n\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n\n  /**\n   * Determines whether the current instance should proxy requests.\n   * @returns {boolean} true if the current instance should proxy requests; otherwise, false\n   */\n  get proxy(): boolean {\n    return this.key === \"proxy\" && !!this.namespaceOptions.websocket.options.proxy?.url;\n  }\n\n  /**\n   * Sets up the connection event handlers.\n   *\n   * @abstract Requires subclasses to set up context aware event handlers.\n   */\n  abstract setupConnection(): void;\n}\n\nclass WSWebSocketDummy {\n  binaryType: string = \"arraybuffer\";\n  close: Function;\n  onclose: Function = () => {};\n  onerror: Function = () => {};\n  onmessage: Function = () => {};\n  onopen: Function = () => {};\n  readyState: number = SOCKET_STATES.connecting;\n  send: Function = () => {};\n  url: string | URL | null = null;\n\n  constructor(address: URL, _protocols: undefined, options: { close: Function }) {\n    this.url = address.toString();\n    this.close = options.close;\n  }\n}\n\nexport { AbstractLiveClient as AbstractWsClient };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}