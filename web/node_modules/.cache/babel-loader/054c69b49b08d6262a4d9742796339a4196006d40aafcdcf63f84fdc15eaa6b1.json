{"ast":null,"code":"/**\n * Enumeration of events related to live transcription.\n *\n * - `Open`: Built-in socket event for when the connection is opened.\n * - `Close`: Built-in socket event for when the connection is closed.\n * - `Error`: Built-in socket event for when an error occurs.\n * - `Transcript`: Event for when a transcript message is received.\n * - `Metadata`: Event for when metadata is received.\n * - `UtteranceEnd`: Event for when an utterance ends.\n * - `SpeechStarted`: Event for when speech is detected.\n * - `Unhandled`: Catch-all event for any other message event.\n */\nexport var LiveTranscriptionEvents;\n(function (LiveTranscriptionEvents) {\n  /**\n   * Built in socket events.\n   */\n  LiveTranscriptionEvents[\"Open\"] = \"open\";\n  LiveTranscriptionEvents[\"Close\"] = \"close\";\n  LiveTranscriptionEvents[\"Error\"] = \"error\";\n  /**\n   * Message { type: string }\n   */\n  LiveTranscriptionEvents[\"Transcript\"] = \"Results\";\n  LiveTranscriptionEvents[\"Metadata\"] = \"Metadata\";\n  LiveTranscriptionEvents[\"UtteranceEnd\"] = \"UtteranceEnd\";\n  LiveTranscriptionEvents[\"SpeechStarted\"] = \"SpeechStarted\";\n  /**\n   * Catch all for any other message event\n   */\n  LiveTranscriptionEvents[\"Unhandled\"] = \"Unhandled\";\n})(LiveTranscriptionEvents || (LiveTranscriptionEvents = {}));","map":{"version":3,"names":["LiveTranscriptionEvents"],"sources":["/Users/niko/node_modules/.pnpm/@deepgram+sdk@3.11.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@deepgram/sdk/src/lib/enums/LiveTranscriptionEvents.ts"],"sourcesContent":["/**\n * Enumeration of events related to live transcription.\n *\n * - `Open`: Built-in socket event for when the connection is opened.\n * - `Close`: Built-in socket event for when the connection is closed.\n * - `Error`: Built-in socket event for when an error occurs.\n * - `Transcript`: Event for when a transcript message is received.\n * - `Metadata`: Event for when metadata is received.\n * - `UtteranceEnd`: Event for when an utterance ends.\n * - `SpeechStarted`: Event for when speech is detected.\n * - `Unhandled`: Catch-all event for any other message event.\n */\nexport enum LiveTranscriptionEvents {\n  /**\n   * Built in socket events.\n   */\n  Open = \"open\",\n  Close = \"close\",\n  Error = \"error\",\n\n  /**\n   * Message { type: string }\n   */\n  Transcript = \"Results\",\n  Metadata = \"Metadata\",\n  UtteranceEnd = \"UtteranceEnd\",\n  SpeechStarted = \"SpeechStarted\",\n\n  /**\n   * Catch all for any other message event\n   */\n  Unhandled = \"Unhandled\",\n}\n"],"mappings":"AAAA;;;;;;;;;;;;AAYA,WAAYA,uBAoBX;AApBD,WAAYA,uBAAuB;EACjC;;;EAGAA,uBAAA,iBAAa;EACbA,uBAAA,mBAAe;EACfA,uBAAA,mBAAe;EAEf;;;EAGAA,uBAAA,0BAAsB;EACtBA,uBAAA,yBAAqB;EACrBA,uBAAA,iCAA6B;EAC7BA,uBAAA,mCAA+B;EAE/B;;;EAGAA,uBAAA,2BAAuB;AACzB,CAAC,EApBWA,uBAAuB,KAAvBA,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}