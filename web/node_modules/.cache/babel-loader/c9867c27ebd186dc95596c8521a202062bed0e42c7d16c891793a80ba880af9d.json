{"ast":null,"code":"var _jsxFileName = \"/Users/niko/digital-human/frontend/src/contexts/ConfigContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// 默认配置\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultConfig = {\n  language: 'zh-CN',\n  voice: 'aura-mandarin',\n  modelPath: '/models/default/Hiyori/Hiyori.model3.json',\n  // 注意这里的路径是相对于public目录的\n  theme: 'light',\n  // EchoMimic相关配置\n  useEchoMimic: false,\n  refImagePath: null\n};\n\n// 创建上下文\nconst ConfigContext = /*#__PURE__*/createContext();\n\n// 配置提供者组件\nexport const ConfigProvider = ({\n  children\n}) => {\n  _s();\n  const [config, setConfig] = useState(() => {\n    // 从本地存储加载配置\n    const savedConfig = localStorage.getItem('digital-human-config');\n    return savedConfig ? JSON.parse(savedConfig) : defaultConfig;\n  });\n\n  // 当配置变化时保存到本地存储并发送到服务器\n  useEffect(() => {\n    localStorage.setItem('digital-human-config', JSON.stringify(config));\n\n    // 将配置同步到服务器\n    if (config.useEchoMimic) {\n      fetch('/api/update_config', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          useEchoMimic: config.useEchoMimic,\n          refImagePath: config.refImagePath,\n          language: config.language\n        })\n      }).catch(err => {\n        console.error('同步配置到服务器失败:', err);\n      });\n    }\n  }, [config]);\n\n  // 更新配置\n  const updateConfig = newConfig => {\n    setConfig(prev => ({\n      ...prev,\n      ...newConfig\n    }));\n  };\n\n  // 应用主题\n  useEffect(() => {\n    if (config.theme === 'dark') {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    }\n  }, [config.theme]);\n  return /*#__PURE__*/_jsxDEV(ConfigContext.Provider, {\n    value: {\n      config,\n      updateConfig\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n// 自定义Hook，用于在组件中访问配置\n_s(ConfigProvider, \"jMabNh5XTuBCfiRqJJ6iOVMbKvk=\");\n_c = ConfigProvider;\nexport const useConfig = () => {\n  _s2();\n  const context = useContext(ConfigContext);\n  if (!context) {\n    throw new Error('useConfig must be used within a ConfigProvider');\n  }\n  return context;\n};\n_s2(useConfig, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ConfigProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","defaultConfig","language","voice","modelPath","theme","useEchoMimic","refImagePath","ConfigContext","ConfigProvider","children","_s","config","setConfig","savedConfig","localStorage","getItem","JSON","parse","setItem","stringify","fetch","method","headers","body","catch","err","console","error","updateConfig","newConfig","prev","document","classList","add","remove","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useConfig","_s2","context","Error","$RefreshReg$"],"sources":["/Users/niko/digital-human/frontend/src/contexts/ConfigContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// 默认配置\nconst defaultConfig = {\n  language: 'zh-CN',\n  voice: 'aura-mandarin',\n  modelPath: '/models/default/Hiyori/Hiyori.model3.json', // 注意这里的路径是相对于public目录的\n  theme: 'light',\n  // EchoMimic相关配置\n  useEchoMimic: false,\n  refImagePath: null\n};\n\n// 创建上下文\nconst ConfigContext = createContext();\n\n// 配置提供者组件\nexport const ConfigProvider = ({ children }) => {\n  const [config, setConfig] = useState(() => {\n    // 从本地存储加载配置\n    const savedConfig = localStorage.getItem('digital-human-config');\n    return savedConfig ? JSON.parse(savedConfig) : defaultConfig;\n  });\n\n  // 当配置变化时保存到本地存储并发送到服务器\n  useEffect(() => {\n    localStorage.setItem('digital-human-config', JSON.stringify(config));\n    \n    // 将配置同步到服务器\n    if (config.useEchoMimic) {\n      fetch('/api/update_config', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          useEchoMimic: config.useEchoMimic,\n          refImagePath: config.refImagePath,\n          language: config.language\n        })\n      }).catch(err => {\n        console.error('同步配置到服务器失败:', err);\n      });\n    }\n  }, [config]);\n\n  // 更新配置\n  const updateConfig = (newConfig) => {\n    setConfig(prev => ({ ...prev, ...newConfig }));\n  };\n\n  // 应用主题\n  useEffect(() => {\n    if (config.theme === 'dark') {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    }\n  }, [config.theme]);\n\n  return (\n    <ConfigContext.Provider value={{ config, updateConfig }}>\n      {children}\n    </ConfigContext.Provider>\n  );\n};\n\n// 自定义Hook，用于在组件中访问配置\nexport const useConfig = () => {\n  const context = useContext(ConfigContext);\n  if (!context) {\n    throw new Error('useConfig must be used within a ConfigProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}