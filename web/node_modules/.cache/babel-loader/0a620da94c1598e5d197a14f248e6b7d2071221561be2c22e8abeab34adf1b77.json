{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isDeepgramError } from \"../lib/errors\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n/**\n * The `ManageRestClient` class provides a set of methods for interacting with the Deepgram Manage API. It extends the `AbstractRestClient` class and provides functionality for managing projects, keys, members, invites, usage, and balances.\n *\n * The class has a `namespace` property that is set to `\"manage\"`, which is used in the construction of the request URLs.\n *\n * The methods in this class include:\n * - `getTokenDetails`: Retrieves the details of the current authentication token.\n * - `getProjects`: Retrieves a list of all projects associated with the authenticated account.\n * - `getProject`: Retrieves the details of a specific project.\n * - `updateProject`: Updates the details of a specific project.\n * - `deleteProject`: Deletes a specific project.\n * - `getProjectKeys`: Retrieves a list of all API keys associated with a specific project.\n * - `getProjectKey`: Retrieves the details of a specific API key.\n * - `createProjectKey`: Creates a new API key for a specific project.\n * - `deleteProjectKey`: Deletes a specific API key.\n * - `getProjectMembers`: Retrieves a list of all members associated with a specific project.\n * - `removeProjectMember`: Removes a specific member from a project.\n * - `getProjectMemberScopes`: Retrieves the scopes associated with a specific project member.\n * - `updateProjectMemberScope`: Updates the scopes associated with a specific project member.\n * - `getProjectInvites`: Retrieves a list of all pending invitations for a specific project.\n * - `sendProjectInvite`: Sends a new invitation to a specific email address for a project.\n * - `deleteProjectInvite`: Deletes a specific invitation for a project.\n * - `leaveProject`: Removes the authenticated user from a specific project.\n * - `getProjectUsageRequests`: Retrieves a list of all usage requests for a specific project.\n * - `getProjectUsageRequest`: Retrieves the details of a specific usage request.\n * - `getProjectUsageSummary`: Retrieves a summary of the usage for a specific project.\n * - `getProjectUsageFields`: Retrieves a list of the available usage fields for a specific project.\n * - `getProjectBalances`: Retrieves a list of all balances associated with a specific project.\n * - `getProjectBalance`: Retrieves the details of a specific balance for a project.\n */\n/**\n * The `ManageRestClient` class provides a set of methods for interacting with the Deepgram Manage API. It extends the `AbstractRestClient` class and provides functionality for managing projects, keys, members, invites, usage, and balances.\n *\n * The class has a `namespace` property that is set to `\"manage\"`, which is used in the construction of the request URLs.\n *\n * The methods in this class include:\n * - `getTokenDetails`: Retrieves the details of the current authentication token.\n * - `getProjects`: Retrieves a list of all projects associated with the authenticated account.\n * - `getProject`: Retrieves the details of a specific project.\n * - `updateProject`: Updates the details of a specific project.\n * - `deleteProject`: Deletes a specific project.\n * - `getProjectKeys`: Retrieves a list of all API keys associated with a specific project.\n * - `getProjectKey`: Retrieves the details of a specific API key.\n * - `createProjectKey`: Creates a new API key for a specific project.\n * - `deleteProjectKey`: Deletes a specific API key.\n * - `getProjectMembers`: Retrieves a list of all members associated with a specific project.\n * - `removeProjectMember`: Removes a specific member from a project.\n * - `getProjectMemberScopes`: Retrieves the scopes associated with a specific project member.\n * - `updateProjectMemberScope`: Updates the scopes associated with a specific project member.\n * - `getProjectInvites`: Retrieves a list of all pending invitations for a specific project.\n * - `sendProjectInvite`: Sends a new invitation to a specific email address for a project.\n * - `deleteProjectInvite`: Deletes a specific invitation for a project.\n * - `leaveProject`: Removes the authenticated user from a specific project.\n * - `getProjectUsageRequests`: Retrieves a list of all usage requests for a specific project.\n * - `getProjectUsageRequest`: Retrieves the details of a specific usage request.\n * - `getProjectUsageSummary`: Retrieves a summary of the usage for a specific project.\n * - `getProjectUsageFields`: Retrieves a list of the available usage fields for a specific project.\n * - `getProjectBalances`: Retrieves a list of all balances associated with a specific project.\n * - `getProjectBalance`: Retrieves the details of a specific balance for a project.\n */\nexport class ManageRestClient extends AbstractRestClient {\n  constructor() {\n    super(...arguments);\n    this.namespace = \"manage\";\n  }\n  /**\n   * Retrieves the details of the current authentication token.\n   *\n   * @returns A promise that resolves to an object containing the token details, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/docs/authenticating#test-request\n   */\n  getTokenDetails(endpoint = \":version/auth/token\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint);\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves a list of all projects associated with the authenticated user.\n   *\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects\".\n   * @returns A promise that resolves to an object containing the list of projects, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/get-projects\n   */\n  getProjects(endpoint = \":version/projects\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint);\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the details of a specific project associated with the authenticated user.\n   *\n   * @param projectId - The ID of the project to retrieve.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId\".\n   * @returns A promise that resolves to an object containing the project details, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/get-project\n   */\n  getProject(projectId, endpoint = \":version/projects/:projectId\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        });\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Updates an existing project associated with the authenticated user.\n   *\n   * @param projectId - The ID of the project to update.\n   * @param options - An object containing the updated project details.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId\".\n   * @returns A promise that resolves to an object containing the response message, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/update-project\n   */\n  updateProject(projectId, options, endpoint = \":version/projects/:projectId\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        }, options);\n        const body = JSON.stringify(options);\n        const result = yield this.patch(requestUrl, body).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Deletes an existing project associated with the authenticated user.\n   *\n   * @param projectId - The ID of the project to delete.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId\".\n   * @returns A promise that resolves to an object containing the response message, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/delete-project\n   */\n  deleteProject(projectId, endpoint = \":version/projects/:projectId\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        });\n        yield this.delete(requestUrl);\n        return {\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves a list of project keys associated with the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the keys for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys\".\n   * @returns A promise that resolves to an object containing the list of project keys, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/list-keys\n   */\n  getProjectKeys(projectId, endpoint = \":version/projects/:projectId/keys\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        });\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves a specific project key associated with the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the key for.\n   * @param keyId - The ID of the project key to retrieve.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys/:keyId\".\n   * @returns A promise that resolves to an object containing the project key, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/get-key\n   */\n  getProjectKey(projectId, keyId, endpoint = \":version/projects/:projectId/keys/:keyId\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId,\n          keyId\n        });\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a new project key for the specified project.\n   *\n   * @param projectId - The ID of the project to create the key for.\n   * @param options - An object containing the options for creating the project key.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys\".\n   * @returns A promise that resolves to an object containing the created project key, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/create-key\n   */\n  createProjectKey(projectId, options, endpoint = \":version/projects/:projectId/keys\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        }, options);\n        const body = JSON.stringify(options);\n        const result = yield this.post(requestUrl, body).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Deletes the specified project key.\n   *\n   * @param projectId - The ID of the project the key belongs to.\n   * @param keyId - The ID of the key to delete.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys/:keyId\".\n   * @returns A promise that resolves to an object containing a null result and an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/delete-key\n   */\n  deleteProjectKey(projectId, keyId, endpoint = \":version/projects/:projectId/keys/:keyId\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId,\n          keyId\n        });\n        yield this.delete(requestUrl);\n        return {\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the members of the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve members for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members\".\n   * @returns A promise that resolves to an object containing the project members and an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/get-members\n   */\n  getProjectMembers(projectId, endpoint = \":version/projects/:projectId/members\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        });\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Removes a member from the specified project.\n   *\n   * @param projectId - The ID of the project to remove the member from.\n   * @param memberId - The ID of the member to remove.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members/:memberId\".\n   * @returns A promise that resolves to an object containing a null error if the operation was successful, or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/remove-member\n   */\n  removeProjectMember(projectId, memberId, endpoint = \":version/projects/:projectId/members/:memberId\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId,\n          memberId\n        });\n        yield this.delete(requestUrl);\n        return {\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the scopes for the specified project member.\n   *\n   * @param projectId - The ID of the project to retrieve the member scopes for.\n   * @param memberId - The ID of the member to retrieve the scopes for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members/:memberId/scopes\".\n   * @returns A promise that resolves to an object containing the retrieved scopes or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-member-scopes\n   */\n  getProjectMemberScopes(projectId, memberId, endpoint = \":version/projects/:projectId/members/:memberId/scopes\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId,\n          memberId\n        });\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Updates the scopes for the specified project member.\n   *\n   * @param projectId - The ID of the project to update the member scopes for.\n   * @param memberId - The ID of the member to update the scopes for.\n   * @param options - An object containing the new scopes to apply to the member.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members/:memberId/scopes\".\n   * @returns A promise that resolves to an object containing the result of the update operation or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/update-scope\n   */\n  updateProjectMemberScope(projectId, memberId, options, endpoint = \":version/projects/:projectId/members/:memberId/scopes\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId,\n          memberId\n        }, options);\n        const body = JSON.stringify(options);\n        const result = yield this.put(requestUrl, body).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the project invites for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the invites for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/invites\".\n   * @returns A promise that resolves to an object containing the result of the get operation or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/list-invites\n   */\n  getProjectInvites(projectId, endpoint = \":version/projects/:projectId/invites\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        });\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Sends a project invite to the specified email addresses.\n   *\n   * @param projectId - The ID of the project to send the invite for.\n   * @param options - An object containing the email addresses to invite and any additional options.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/invites\".\n   * @returns A promise that resolves to an object containing the result of the post operation or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/send-invites\n   */\n  sendProjectInvite(projectId, options, endpoint = \":version/projects/:projectId/invites\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        }, options);\n        const body = JSON.stringify(options);\n        const result = yield this.post(requestUrl, body).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Deletes a project invite for the specified email address.\n   *\n   * @param projectId - The ID of the project to delete the invite for.\n   * @param email - The email address of the invite to delete.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/invites/:email\".\n   * @returns A promise that resolves to an object containing a null result and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/delete-invite\n   */\n  deleteProjectInvite(projectId, email, endpoint = \":version/projects/:projectId/invites/:email\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId,\n          email\n        });\n        yield this.delete(requestUrl).then(result => result.json());\n        return {\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Leaves the specified project.\n   *\n   * @param projectId - The ID of the project to leave.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/leave\".\n   * @returns A promise that resolves to an object containing a null result and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/leave-project\n   */\n  leaveProject(projectId, endpoint = \":version/projects/:projectId/leave\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        });\n        const result = yield this.delete(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves a list of usage requests for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve usage requests for.\n   * @param options - An object containing options to filter the usage requests, such as pagination parameters.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/requests\".\n   * @returns A promise that resolves to an object containing the list of usage requests and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-all-requests\n   */\n  getProjectUsageRequests(projectId, options, endpoint = \":version/projects/:projectId/requests\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        }, options);\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the details of a specific usage request for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the usage request for.\n   * @param requestId - The ID of the usage request to retrieve.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/requests/:requestId\".\n   * @returns A promise that resolves to an object containing the usage request details and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-request\n   */\n  getProjectUsageRequest(projectId, requestId, endpoint = \":version/projects/:projectId/requests/:requestId\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId,\n          requestId\n        });\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the usage summary for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the usage summary for.\n   * @param options - An object containing optional parameters for the request, such as filters and pagination options.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/usage\".\n   * @returns A promise that resolves to an object containing the usage summary and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-usage\n   */\n  getProjectUsageSummary(projectId, options, endpoint = \":version/projects/:projectId/usage\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        }, options);\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the usage fields for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the usage fields for.\n   * @param options - An object containing optional parameters for the request, such as filters and pagination options.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/usage/fields\".\n   * @returns A promise that resolves to an object containing the usage fields and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-fields\n   */\n  getProjectUsageFields(projectId, options, endpoint = \":version/projects/:projectId/usage/fields\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        }, options);\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the balances for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the balances for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/balances\".\n   * @returns A promise that resolves to an object containing the project balances and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-all-balances\n   */\n  getProjectBalances(projectId, endpoint = \":version/projects/:projectId/balances\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        });\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the balance for the specified project and balance ID.\n   *\n   * @param projectId - The ID of the project to retrieve the balance for.\n   * @param balanceId - The ID of the balance to retrieve.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/balances/:balanceId\".\n   * @returns A promise that resolves to an object containing the project balance and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-balance\n   */\n  getProjectBalance(projectId, balanceId, endpoint = \":version/projects/:projectId/balances/:balanceId\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId,\n          balanceId\n        });\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves all models for a given project.\n   *\n   * @param projectId - The ID of the project.\n   * @param endpoint - (optional) The endpoint URL for retrieving models. Defaults to \":version/projects/:projectId/models\".\n   * @returns A promise that resolves to a DeepgramResponse containing the GetModelsResponse.\n   * @example\n   * ```typescript\n   * import { createClient } from \"@deepgram/sdk\";\n   *\n   * const deepgram = createClient(DEEPGRAM_API_KEY);\n   * const { result: models, error } = deepgram.manage.getAllModels(\"projectId\");\n   *\n   * if (error) {\n   *   console.error(error);\n   * } else {\n   *   console.log(models);\n   * }\n   * ```\n   */\n  getAllModels(projectId, options = {}, endpoint = \":version/projects/:projectId/models\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId\n        }, options);\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves a model from the specified project.\n   *\n   * @param projectId - The ID of the project.\n   * @param modelId - The ID of the model.\n   * @param endpoint - (optional) The endpoint URL for the request. Default value is \":version/projects/:projectId/models/:modelId\".\n   * @returns A promise that resolves to a DeepgramResponse containing the GetModelResponse.\n   * @example\n   * ```typescript\n   * import { createClient } from \"@deepgram/sdk\";\n   *\n   * const deepgram = createClient(DEEPGRAM_API_KEY);\n   * const { result: model, error } = deepgram.models.getModel(\"projectId\", \"modelId\");\n   *\n   * if (error) {\n   *   console.error(error);\n   * } else {\n   *   console.log(model);\n   * }\n   * ```\n   */\n  getModel(projectId, modelId, endpoint = \":version/projects/:projectId/models/:modelId\") {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const requestUrl = this.getRequestUrl(endpoint, {\n          projectId,\n          modelId\n        });\n        const result = yield this.get(requestUrl).then(result => result.json());\n        return {\n          result,\n          error: null\n        };\n      } catch (error) {\n        if (isDeepgramError(error)) {\n          return {\n            result: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n}\nexport { ManageRestClient as ManageClient };","map":{"version":3,"names":["isDeepgramError","AbstractRestClient","ManageRestClient","constructor","namespace","getTokenDetails","endpoint","requestUrl","getRequestUrl","result","get","then","json","error","getProjects","getProject","projectId","updateProject","options","body","JSON","stringify","patch","deleteProject","delete","getProjectKeys","getProjectKey","keyId","createProjectKey","post","deleteProjectKey","getProjectMembers","removeProjectMember","memberId","getProjectMemberScopes","updateProjectMemberScope","put","getProjectInvites","sendProjectInvite","deleteProjectInvite","email","leaveProject","getProjectUsageRequests","getProjectUsageRequest","requestId","getProjectUsageSummary","getProjectUsageFields","getProjectBalances","getProjectBalance","balanceId","getAllModels","getModel","modelId","ManageClient"],"sources":["/Users/niko/node_modules/.pnpm/@deepgram+sdk@3.11.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@deepgram/sdk/src/packages/ManageRestClient.ts"],"sourcesContent":["import { isDeepgramError } from \"../lib/errors\";\nimport type {\n  CreateProjectKeySchema,\n  CreateProjectKeyResponse,\n  DeepgramResponse,\n  GetProjectBalanceResponse,\n  GetProjectBalancesResponse,\n  GetProjectInvitesResponse,\n  GetProjectKeyResponse,\n  GetProjectKeysResponse,\n  GetProjectMemberScopesResponse,\n  GetProjectMembersResponse,\n  GetProjectResponse,\n  GetProjectsResponse,\n  GetProjectUsageFieldsSchema,\n  GetProjectUsageFieldsResponse,\n  GetProjectUsageRequestResponse,\n  GetProjectUsageRequestsSchema,\n  GetProjectUsageRequestsResponse,\n  GetProjectUsageSummarySchema,\n  GetProjectUsageSummaryResponse,\n  MessageResponse,\n  SendProjectInviteSchema,\n  UpdateProjectMemberScopeSchema,\n  UpdateProjectSchema,\n  VoidResponse,\n  GetTokenDetailsResponse,\n  GetModelsResponse,\n  GetModelResponse,\n  GetModelsSchema,\n} from \"../lib/types\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n\n/**\n * The `ManageRestClient` class provides a set of methods for interacting with the Deepgram Manage API. It extends the `AbstractRestClient` class and provides functionality for managing projects, keys, members, invites, usage, and balances.\n *\n * The class has a `namespace` property that is set to `\"manage\"`, which is used in the construction of the request URLs.\n *\n * The methods in this class include:\n * - `getTokenDetails`: Retrieves the details of the current authentication token.\n * - `getProjects`: Retrieves a list of all projects associated with the authenticated account.\n * - `getProject`: Retrieves the details of a specific project.\n * - `updateProject`: Updates the details of a specific project.\n * - `deleteProject`: Deletes a specific project.\n * - `getProjectKeys`: Retrieves a list of all API keys associated with a specific project.\n * - `getProjectKey`: Retrieves the details of a specific API key.\n * - `createProjectKey`: Creates a new API key for a specific project.\n * - `deleteProjectKey`: Deletes a specific API key.\n * - `getProjectMembers`: Retrieves a list of all members associated with a specific project.\n * - `removeProjectMember`: Removes a specific member from a project.\n * - `getProjectMemberScopes`: Retrieves the scopes associated with a specific project member.\n * - `updateProjectMemberScope`: Updates the scopes associated with a specific project member.\n * - `getProjectInvites`: Retrieves a list of all pending invitations for a specific project.\n * - `sendProjectInvite`: Sends a new invitation to a specific email address for a project.\n * - `deleteProjectInvite`: Deletes a specific invitation for a project.\n * - `leaveProject`: Removes the authenticated user from a specific project.\n * - `getProjectUsageRequests`: Retrieves a list of all usage requests for a specific project.\n * - `getProjectUsageRequest`: Retrieves the details of a specific usage request.\n * - `getProjectUsageSummary`: Retrieves a summary of the usage for a specific project.\n * - `getProjectUsageFields`: Retrieves a list of the available usage fields for a specific project.\n * - `getProjectBalances`: Retrieves a list of all balances associated with a specific project.\n * - `getProjectBalance`: Retrieves the details of a specific balance for a project.\n */\n/**\n * The `ManageRestClient` class provides a set of methods for interacting with the Deepgram Manage API. It extends the `AbstractRestClient` class and provides functionality for managing projects, keys, members, invites, usage, and balances.\n *\n * The class has a `namespace` property that is set to `\"manage\"`, which is used in the construction of the request URLs.\n *\n * The methods in this class include:\n * - `getTokenDetails`: Retrieves the details of the current authentication token.\n * - `getProjects`: Retrieves a list of all projects associated with the authenticated account.\n * - `getProject`: Retrieves the details of a specific project.\n * - `updateProject`: Updates the details of a specific project.\n * - `deleteProject`: Deletes a specific project.\n * - `getProjectKeys`: Retrieves a list of all API keys associated with a specific project.\n * - `getProjectKey`: Retrieves the details of a specific API key.\n * - `createProjectKey`: Creates a new API key for a specific project.\n * - `deleteProjectKey`: Deletes a specific API key.\n * - `getProjectMembers`: Retrieves a list of all members associated with a specific project.\n * - `removeProjectMember`: Removes a specific member from a project.\n * - `getProjectMemberScopes`: Retrieves the scopes associated with a specific project member.\n * - `updateProjectMemberScope`: Updates the scopes associated with a specific project member.\n * - `getProjectInvites`: Retrieves a list of all pending invitations for a specific project.\n * - `sendProjectInvite`: Sends a new invitation to a specific email address for a project.\n * - `deleteProjectInvite`: Deletes a specific invitation for a project.\n * - `leaveProject`: Removes the authenticated user from a specific project.\n * - `getProjectUsageRequests`: Retrieves a list of all usage requests for a specific project.\n * - `getProjectUsageRequest`: Retrieves the details of a specific usage request.\n * - `getProjectUsageSummary`: Retrieves a summary of the usage for a specific project.\n * - `getProjectUsageFields`: Retrieves a list of the available usage fields for a specific project.\n * - `getProjectBalances`: Retrieves a list of all balances associated with a specific project.\n * - `getProjectBalance`: Retrieves the details of a specific balance for a project.\n */\nexport class ManageRestClient extends AbstractRestClient {\n  public namespace: string = \"manage\";\n\n  /**\n   * Retrieves the details of the current authentication token.\n   *\n   * @returns A promise that resolves to an object containing the token details, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/docs/authenticating#test-request\n   */\n  async getTokenDetails(\n    endpoint = \":version/auth/token\"\n  ): Promise<DeepgramResponse<GetTokenDetailsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint);\n      const result: GetTokenDetailsResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves a list of all projects associated with the authenticated user.\n   *\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects\".\n   * @returns A promise that resolves to an object containing the list of projects, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/get-projects\n   */\n  async getProjects(\n    endpoint = \":version/projects\"\n  ): Promise<DeepgramResponse<GetProjectsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint);\n      const result: GetProjectsResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the details of a specific project associated with the authenticated user.\n   *\n   * @param projectId - The ID of the project to retrieve.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId\".\n   * @returns A promise that resolves to an object containing the project details, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/get-project\n   */\n  async getProject(\n    projectId: string,\n    endpoint = \":version/projects/:projectId\"\n  ): Promise<DeepgramResponse<GetProjectResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: GetProjectResponse = await this.get(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Updates an existing project associated with the authenticated user.\n   *\n   * @param projectId - The ID of the project to update.\n   * @param options - An object containing the updated project details.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId\".\n   * @returns A promise that resolves to an object containing the response message, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/update-project\n   */\n  async updateProject(\n    projectId: string,\n    options: UpdateProjectSchema,\n    endpoint = \":version/projects/:projectId\"\n  ): Promise<DeepgramResponse<MessageResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const body = JSON.stringify(options);\n\n      const result: MessageResponse = await this.patch(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Deletes an existing project associated with the authenticated user.\n   *\n   * @param projectId - The ID of the project to delete.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId\".\n   * @returns A promise that resolves to an object containing the response message, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/delete-project\n   */\n  async deleteProject(\n    projectId: string,\n    endpoint = \":version/projects/:projectId\"\n  ): Promise<VoidResponse> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      await this.delete(requestUrl);\n\n      return { error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves a list of project keys associated with the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the keys for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys\".\n   * @returns A promise that resolves to an object containing the list of project keys, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/list-keys\n   */\n  async getProjectKeys(\n    projectId: string,\n    endpoint = \":version/projects/:projectId/keys\"\n  ): Promise<DeepgramResponse<GetProjectKeysResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: GetProjectKeysResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves a specific project key associated with the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the key for.\n   * @param keyId - The ID of the project key to retrieve.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys/:keyId\".\n   * @returns A promise that resolves to an object containing the project key, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/get-key\n   */\n  async getProjectKey(\n    projectId: string,\n    keyId: string,\n    endpoint = \":version/projects/:projectId/keys/:keyId\"\n  ): Promise<DeepgramResponse<GetProjectKeyResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, keyId });\n      const result: GetProjectKeyResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Creates a new project key for the specified project.\n   *\n   * @param projectId - The ID of the project to create the key for.\n   * @param options - An object containing the options for creating the project key.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys\".\n   * @returns A promise that resolves to an object containing the created project key, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/create-key\n   */\n  async createProjectKey(\n    projectId: string,\n    options: CreateProjectKeySchema,\n    endpoint = \":version/projects/:projectId/keys\"\n  ): Promise<DeepgramResponse<CreateProjectKeyResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const body = JSON.stringify(options);\n\n      const result: CreateProjectKeyResponse = await this.post(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Deletes the specified project key.\n   *\n   * @param projectId - The ID of the project the key belongs to.\n   * @param keyId - The ID of the key to delete.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys/:keyId\".\n   * @returns A promise that resolves to an object containing a null result and an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/delete-key\n   */\n  async deleteProjectKey(\n    projectId: string,\n    keyId: string,\n    endpoint = \":version/projects/:projectId/keys/:keyId\"\n  ): Promise<VoidResponse> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, keyId });\n      await this.delete(requestUrl);\n\n      return { error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the members of the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve members for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members\".\n   * @returns A promise that resolves to an object containing the project members and an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/get-members\n   */\n  async getProjectMembers(\n    projectId: string,\n    endpoint = \":version/projects/:projectId/members\"\n  ): Promise<DeepgramResponse<GetProjectMembersResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: GetProjectMembersResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a member from the specified project.\n   *\n   * @param projectId - The ID of the project to remove the member from.\n   * @param memberId - The ID of the member to remove.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members/:memberId\".\n   * @returns A promise that resolves to an object containing a null error if the operation was successful, or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/remove-member\n   */\n  async removeProjectMember(\n    projectId: string,\n    memberId: string,\n    endpoint = \":version/projects/:projectId/members/:memberId\"\n  ): Promise<VoidResponse> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, memberId });\n      await this.delete(requestUrl);\n\n      return { error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the scopes for the specified project member.\n   *\n   * @param projectId - The ID of the project to retrieve the member scopes for.\n   * @param memberId - The ID of the member to retrieve the scopes for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members/:memberId/scopes\".\n   * @returns A promise that resolves to an object containing the retrieved scopes or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-member-scopes\n   */\n  async getProjectMemberScopes(\n    projectId: string,\n    memberId: string,\n    endpoint = \":version/projects/:projectId/members/:memberId/scopes\"\n  ): Promise<DeepgramResponse<GetProjectMemberScopesResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, memberId });\n      const result: GetProjectMemberScopesResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Updates the scopes for the specified project member.\n   *\n   * @param projectId - The ID of the project to update the member scopes for.\n   * @param memberId - The ID of the member to update the scopes for.\n   * @param options - An object containing the new scopes to apply to the member.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members/:memberId/scopes\".\n   * @returns A promise that resolves to an object containing the result of the update operation or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/update-scope\n   */\n  async updateProjectMemberScope(\n    projectId: string,\n    memberId: string,\n    options: UpdateProjectMemberScopeSchema,\n    endpoint = \":version/projects/:projectId/members/:memberId/scopes\"\n  ): Promise<DeepgramResponse<MessageResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, memberId }, options);\n      const body = JSON.stringify(options);\n\n      const result: MessageResponse = await this.put(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the project invites for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the invites for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/invites\".\n   * @returns A promise that resolves to an object containing the result of the get operation or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/list-invites\n   */\n  async getProjectInvites(\n    projectId: string,\n    endpoint = \":version/projects/:projectId/invites\"\n  ): Promise<DeepgramResponse<GetProjectInvitesResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: GetProjectInvitesResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Sends a project invite to the specified email addresses.\n   *\n   * @param projectId - The ID of the project to send the invite for.\n   * @param options - An object containing the email addresses to invite and any additional options.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/invites\".\n   * @returns A promise that resolves to an object containing the result of the post operation or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/send-invites\n   */\n  async sendProjectInvite(\n    projectId: string,\n    options: SendProjectInviteSchema,\n    endpoint = \":version/projects/:projectId/invites\"\n  ): Promise<DeepgramResponse<MessageResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const body = JSON.stringify(options);\n\n      const result: MessageResponse = await this.post(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Deletes a project invite for the specified email address.\n   *\n   * @param projectId - The ID of the project to delete the invite for.\n   * @param email - The email address of the invite to delete.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/invites/:email\".\n   * @returns A promise that resolves to an object containing a null result and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/delete-invite\n   */\n  async deleteProjectInvite(\n    projectId: string,\n    email: string,\n    endpoint = \":version/projects/:projectId/invites/:email\"\n  ): Promise<VoidResponse> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, email });\n      await this.delete(requestUrl).then((result) => result.json());\n\n      return { error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Leaves the specified project.\n   *\n   * @param projectId - The ID of the project to leave.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/leave\".\n   * @returns A promise that resolves to an object containing a null result and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/leave-project\n   */\n  async leaveProject(\n    projectId: string,\n    endpoint = \":version/projects/:projectId/leave\"\n  ): Promise<DeepgramResponse<MessageResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: MessageResponse = await this.delete(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves a list of usage requests for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve usage requests for.\n   * @param options - An object containing options to filter the usage requests, such as pagination parameters.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/requests\".\n   * @returns A promise that resolves to an object containing the list of usage requests and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-all-requests\n   */\n  async getProjectUsageRequests(\n    projectId: string,\n    options: GetProjectUsageRequestsSchema,\n    endpoint = \":version/projects/:projectId/requests\"\n  ): Promise<DeepgramResponse<GetProjectUsageRequestsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const result: GetProjectUsageRequestsResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the details of a specific usage request for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the usage request for.\n   * @param requestId - The ID of the usage request to retrieve.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/requests/:requestId\".\n   * @returns A promise that resolves to an object containing the usage request details and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-request\n   */\n  async getProjectUsageRequest(\n    projectId: string,\n    requestId: string,\n    endpoint = \":version/projects/:projectId/requests/:requestId\"\n  ): Promise<DeepgramResponse<GetProjectUsageRequestResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, requestId });\n      const result: GetProjectUsageRequestResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the usage summary for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the usage summary for.\n   * @param options - An object containing optional parameters for the request, such as filters and pagination options.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/usage\".\n   * @returns A promise that resolves to an object containing the usage summary and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-usage\n   */\n  async getProjectUsageSummary(\n    projectId: string,\n    options: GetProjectUsageSummarySchema,\n    endpoint = \":version/projects/:projectId/usage\"\n  ): Promise<DeepgramResponse<GetProjectUsageSummaryResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const result: GetProjectUsageSummaryResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the usage fields for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the usage fields for.\n   * @param options - An object containing optional parameters for the request, such as filters and pagination options.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/usage/fields\".\n   * @returns A promise that resolves to an object containing the usage fields and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-fields\n   */\n  async getProjectUsageFields(\n    projectId: string,\n    options: GetProjectUsageFieldsSchema,\n    endpoint = \":version/projects/:projectId/usage/fields\"\n  ): Promise<DeepgramResponse<GetProjectUsageFieldsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const result: GetProjectUsageFieldsResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the balances for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the balances for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/balances\".\n   * @returns A promise that resolves to an object containing the project balances and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-all-balances\n   */\n  async getProjectBalances(\n    projectId: string,\n    endpoint = \":version/projects/:projectId/balances\"\n  ): Promise<DeepgramResponse<GetProjectBalancesResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: GetProjectBalancesResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the balance for the specified project and balance ID.\n   *\n   * @param projectId - The ID of the project to retrieve the balance for.\n   * @param balanceId - The ID of the balance to retrieve.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/balances/:balanceId\".\n   * @returns A promise that resolves to an object containing the project balance and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-balance\n   */\n  async getProjectBalance(\n    projectId: string,\n    balanceId: string,\n    endpoint = \":version/projects/:projectId/balances/:balanceId\"\n  ): Promise<DeepgramResponse<GetProjectBalanceResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, balanceId });\n      const result: GetProjectBalanceResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves all models for a given project.\n   *\n   * @param projectId - The ID of the project.\n   * @param endpoint - (optional) The endpoint URL for retrieving models. Defaults to \":version/projects/:projectId/models\".\n   * @returns A promise that resolves to a DeepgramResponse containing the GetModelsResponse.\n   * @example\n   * ```typescript\n   * import { createClient } from \"@deepgram/sdk\";\n   *\n   * const deepgram = createClient(DEEPGRAM_API_KEY);\n   * const { result: models, error } = deepgram.manage.getAllModels(\"projectId\");\n   *\n   * if (error) {\n   *   console.error(error);\n   * } else {\n   *   console.log(models);\n   * }\n   * ```\n   */\n  async getAllModels(\n    projectId: string,\n    options: GetModelsSchema = {},\n    endpoint = \":version/projects/:projectId/models\"\n  ): Promise<DeepgramResponse<GetModelsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const result: GetModelsResponse = await this.get(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves a model from the specified project.\n   *\n   * @param projectId - The ID of the project.\n   * @param modelId - The ID of the model.\n   * @param endpoint - (optional) The endpoint URL for the request. Default value is \":version/projects/:projectId/models/:modelId\".\n   * @returns A promise that resolves to a DeepgramResponse containing the GetModelResponse.\n   * @example\n   * ```typescript\n   * import { createClient } from \"@deepgram/sdk\";\n   *\n   * const deepgram = createClient(DEEPGRAM_API_KEY);\n   * const { result: model, error } = deepgram.models.getModel(\"projectId\", \"modelId\");\n   *\n   * if (error) {\n   *   console.error(error);\n   * } else {\n   *   console.log(model);\n   * }\n   * ```\n   */\n  async getModel(\n    projectId: string,\n    modelId: string,\n    endpoint = \":version/projects/:projectId/models/:modelId\"\n  ): Promise<DeepgramResponse<GetModelResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, modelId });\n      const result: GetModelResponse = await this.get(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n}\n\nexport { ManageRestClient as ManageClient };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}