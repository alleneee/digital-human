{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DeepgramApiError, DeepgramError, DeepgramUnknownError } from \"../lib/errors\";\nimport { fetchWithAuth, resolveResponse } from \"../lib/fetch\";\nimport { AbstractClient } from \"./AbstractClient\";\nimport { isBrowser } from \"../lib/helpers\";\nimport merge from \"deepmerge\";\n/**\n * An abstract class that extends `AbstractClient` and provides a base implementation for a REST-based API client.\n * This class handles authentication, error handling, and other common functionality for REST API clients.\n */\nexport class AbstractRestClient extends AbstractClient {\n  /**\n   * Constructs a new instance of the `AbstractRestClient` class with the provided options.\n   *\n   * @param options - The client options to use for this instance.\n   * @throws {DeepgramError} If the client is being used in a browser and no proxy is provided.\n   */\n  constructor(options) {\n    super(options);\n    if (isBrowser() && !this.proxy) {\n      throw new DeepgramError(\"Due to CORS we are unable to support REST-based API calls to our API from the browser. Please consider using a proxy: https://dpgr.am/js-proxy for more information.\");\n    }\n    this.fetch = fetchWithAuth(this.key, this.namespaceOptions.fetch.client);\n    if (this.proxy) {\n      this.baseUrl = this.namespaceOptions.fetch.options.proxy.url;\n    } else {\n      this.baseUrl = this.namespaceOptions.fetch.options.url;\n    }\n  }\n  /**\n   * Constructs an error message from the provided error object.\n   *\n   * @param err - The error object to extract the error message from.\n   * @returns The constructed error message.\n   */\n  _getErrorMessage(err) {\n    return err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\n  }\n  /**\n   * Handles an error that occurred during a request.\n   *\n   * @param error - The error that occurred during the request.\n   * @param reject - The rejection function to call with the error.\n   * @returns A Promise that resolves when the error has been handled.\n   */\n  _handleError(error, reject) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const Res = yield resolveResponse();\n      if (error instanceof Res) {\n        error.json().then(err => {\n          reject(new DeepgramApiError(this._getErrorMessage(err), error.status || 500));\n        }).catch(err => {\n          reject(new DeepgramUnknownError(this._getErrorMessage(err), err));\n        });\n      } else {\n        reject(new DeepgramUnknownError(this._getErrorMessage(error), error));\n      }\n    });\n  }\n  /**\n   * Constructs the options object to be used for a fetch request.\n   *\n   * @param method - The HTTP method to use for the request, such as \"GET\", \"POST\", \"PUT\", \"PATCH\", or \"DELETE\".\n   * @param bodyOrOptions - For \"POST\", \"PUT\", and \"PATCH\" requests, the request body as a string, Buffer, or Readable stream. For \"GET\" and \"DELETE\" requests, the fetch options to use.\n   * @param options - Additional fetch options to use for the request.\n   * @returns The constructed fetch options object.\n   */\n  _getRequestOptions(method, bodyOrOptions, options) {\n    let reqOptions = {\n      method\n    };\n    if (method === \"GET\" || method === \"DELETE\") {\n      reqOptions = Object.assign(Object.assign({}, reqOptions), bodyOrOptions);\n    } else {\n      reqOptions = Object.assign(Object.assign({\n        duplex: \"half\",\n        body: bodyOrOptions\n      }, reqOptions), options);\n    }\n    return merge(this.namespaceOptions.fetch.options, reqOptions, {\n      clone: false\n    });\n  }\n  _handleRequest(method, url, bodyOrOptions, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        const fetcher = this.fetch;\n        fetcher(url, this._getRequestOptions(method, bodyOrOptions, options)).then(result => {\n          if (!result.ok) throw result;\n          resolve(result);\n        }).catch(error => this._handleError(error, reject));\n      });\n    });\n  }\n  /**\n   * Handles an HTTP GET request using the provided URL and optional request options.\n   *\n   * @param url - The URL to send the GET request to.\n   * @param options - Additional fetch options to use for the GET request.\n   * @returns A Promise that resolves to the Response object for the GET request.\n   */\n  get(url, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._handleRequest(\"GET\", url, options);\n    });\n  }\n  /**\n   * Handles an HTTP POST request using the provided URL, request body, and optional request options.\n   *\n   * @param url - The URL to send the POST request to.\n   * @param body - The request body as a string, Buffer, or Readable stream.\n   * @param options - Additional fetch options to use for the POST request.\n   * @returns A Promise that resolves to the Response object for the POST request.\n   */\n  post(url, body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._handleRequest(\"POST\", url, body, options);\n    });\n  }\n  /**\n   * Handles an HTTP PUT request using the provided URL, request body, and optional request options.\n   *\n   * @param url - The URL to send the PUT request to.\n   * @param body - The request body as a string, Buffer, or Readable stream.\n   * @param options - Additional fetch options to use for the PUT request.\n   * @returns A Promise that resolves to the Response object for the PUT request.\n   */\n  put(url, body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._handleRequest(\"PUT\", url, body, options);\n    });\n  }\n  /**\n   * Handles an HTTP PATCH request using the provided URL, request body, and optional request options.\n   *\n   * @param url - The URL to send the PATCH request to.\n   * @param body - The request body as a string, Buffer, or Readable stream.\n   * @param options - Additional fetch options to use for the PATCH request.\n   * @returns A Promise that resolves to the Response object for the PATCH request.\n   */\n  patch(url, body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._handleRequest(\"PATCH\", url, body, options);\n    });\n  }\n  /**\n   * Handles an HTTP DELETE request using the provided URL and optional request options.\n   *\n   * @param url - The URL to send the DELETE request to.\n   * @param options - Additional fetch options to use for the DELETE request.\n   * @returns A Promise that resolves to the Response object for the DELETE request.\n   */\n  delete(url, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._handleRequest(\"DELETE\", url, options);\n    });\n  }\n  /**\n   * Determines whether the current instance should proxy requests.\n   * @returns {boolean} true if the current instance should proxy requests; otherwise, false\n   */\n  get proxy() {\n    var _a;\n    return this.key === \"proxy\" && !!((_a = this.namespaceOptions.fetch.options.proxy) === null || _a === void 0 ? void 0 : _a.url);\n  }\n}\nexport { AbstractRestClient as AbstractRestfulClient };","map":{"version":3,"names":["DeepgramApiError","DeepgramError","DeepgramUnknownError","fetchWithAuth","resolveResponse","AbstractClient","isBrowser","merge","AbstractRestClient","constructor","options","proxy","fetch","key","namespaceOptions","client","baseUrl","url","_getErrorMessage","err","msg","message","error_description","error","JSON","stringify","_handleError","reject","Res","json","then","status","catch","_getRequestOptions","method","bodyOrOptions","reqOptions","Object","assign","duplex","body","clone","_handleRequest","Promise","resolve","fetcher","result","ok","get","post","put","patch","delete","_a","AbstractRestfulClient"],"sources":["/Users/niko/node_modules/.pnpm/@deepgram+sdk@3.11.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@deepgram/sdk/src/packages/AbstractRestClient.ts"],"sourcesContent":["import { DeepgramApiError, DeepgramError, DeepgramUnknownError } from \"../lib/errors\";\nimport { Readable } from \"stream\";\nimport { fetchWithAuth, resolveResponse } from \"../lib/fetch\";\nimport type { Fetch, FetchOptions, RequestMethodType } from \"../lib/types/Fetch\";\nimport { AbstractClient } from \"./AbstractClient\";\nimport { DeepgramClientOptions } from \"../lib/types\";\nimport { isBrowser } from \"../lib/helpers\";\nimport merge from \"deepmerge\";\n\n/**\n * An abstract class that extends `AbstractClient` and provides a base implementation for a REST-based API client.\n * This class handles authentication, error handling, and other common functionality for REST API clients.\n */\nexport abstract class AbstractRestClient extends AbstractClient {\n  protected fetch: Fetch;\n\n  /**\n   * Constructs a new instance of the `AbstractRestClient` class with the provided options.\n   *\n   * @param options - The client options to use for this instance.\n   * @throws {DeepgramError} If the client is being used in a browser and no proxy is provided.\n   */\n  constructor(options: DeepgramClientOptions) {\n    super(options);\n\n    if (isBrowser() && !this.proxy) {\n      throw new DeepgramError(\n        \"Due to CORS we are unable to support REST-based API calls to our API from the browser. Please consider using a proxy: https://dpgr.am/js-proxy for more information.\"\n      );\n    }\n\n    this.fetch = fetchWithAuth(this.key, this.namespaceOptions.fetch.client);\n\n    if (this.proxy) {\n      this.baseUrl = this.namespaceOptions.fetch.options.proxy!.url;\n    } else {\n      this.baseUrl = this.namespaceOptions.fetch.options.url;\n    }\n  }\n\n  /**\n   * Constructs an error message from the provided error object.\n   *\n   * @param err - The error object to extract the error message from.\n   * @returns The constructed error message.\n   */\n  protected _getErrorMessage(err: any): string {\n    return err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\n  }\n\n  /**\n   * Handles an error that occurred during a request.\n   *\n   * @param error - The error that occurred during the request.\n   * @param reject - The rejection function to call with the error.\n   * @returns A Promise that resolves when the error has been handled.\n   */\n  protected async _handleError(error: unknown, reject: (reason?: any) => void) {\n    const Res = await resolveResponse();\n\n    if (error instanceof Res) {\n      error\n        .json()\n        .then((err) => {\n          reject(new DeepgramApiError(this._getErrorMessage(err), error.status || 500));\n        })\n        .catch((err) => {\n          reject(new DeepgramUnknownError(this._getErrorMessage(err), err));\n        });\n    } else {\n      reject(new DeepgramUnknownError(this._getErrorMessage(error), error));\n    }\n  }\n\n  /**\n   * Constructs the options object to be used for a fetch request.\n   *\n   * @param method - The HTTP method to use for the request, such as \"GET\", \"POST\", \"PUT\", \"PATCH\", or \"DELETE\".\n   * @param bodyOrOptions - For \"POST\", \"PUT\", and \"PATCH\" requests, the request body as a string, Buffer, or Readable stream. For \"GET\" and \"DELETE\" requests, the fetch options to use.\n   * @param options - Additional fetch options to use for the request.\n   * @returns The constructed fetch options object.\n   */\n  protected _getRequestOptions(\n    method: RequestMethodType,\n    bodyOrOptions?: string | Buffer | Readable | FetchOptions,\n    options?: FetchOptions\n  ): FetchOptions {\n    let reqOptions: FetchOptions = { method };\n\n    if (method === \"GET\" || method === \"DELETE\") {\n      reqOptions = { ...reqOptions, ...(bodyOrOptions as FetchOptions) };\n    } else {\n      reqOptions = {\n        duplex: \"half\",\n        body: bodyOrOptions as BodyInit,\n        ...reqOptions,\n        ...options,\n      };\n    }\n\n    return merge(this.namespaceOptions.fetch.options, reqOptions, { clone: false });\n  }\n\n  /**\n   * Handles an HTTP request using the provided method, URL, and optional request body and options.\n   *\n   * @param method - The HTTP method to use for the request, such as \"GET\", \"POST\", \"PUT\", \"PATCH\", or \"DELETE\".\n   * @param url - The URL to send the request to.\n   * @param bodyOrOptions - For \"POST\", \"PUT\", and \"PATCH\" requests, the request body as a string, Buffer, or Readable stream. For \"GET\" and \"DELETE\" requests, the fetch options to use.\n   * @param options - Additional fetch options to use for the request.\n   * @returns A Promise that resolves to the Response object for the request.\n   */\n  protected async _handleRequest(\n    method: \"GET\" | \"DELETE\",\n    url: URL,\n    options?: FetchOptions\n  ): Promise<Response>;\n  protected async _handleRequest(\n    method: \"POST\" | \"PUT\" | \"PATCH\",\n    url: URL,\n    body: string | Buffer | Readable,\n    options?: FetchOptions\n  ): Promise<Response>;\n  protected async _handleRequest(\n    method: RequestMethodType,\n    url: URL,\n    bodyOrOptions?: string | Buffer | Readable | FetchOptions,\n    options?: FetchOptions\n  ): Promise<Response> {\n    return new Promise((resolve, reject) => {\n      const fetcher = this.fetch;\n\n      fetcher(url, this._getRequestOptions(method, bodyOrOptions, options))\n        .then((result) => {\n          if (!result.ok) throw result;\n          resolve(result);\n        })\n        .catch((error) => this._handleError(error, reject));\n    });\n  }\n\n  /**\n   * Handles an HTTP GET request using the provided URL and optional request options.\n   *\n   * @param url - The URL to send the GET request to.\n   * @param options - Additional fetch options to use for the GET request.\n   * @returns A Promise that resolves to the Response object for the GET request.\n   */\n  protected async get(url: URL, options?: FetchOptions): Promise<any> {\n    return this._handleRequest(\"GET\", url, options);\n  }\n\n  /**\n   * Handles an HTTP POST request using the provided URL, request body, and optional request options.\n   *\n   * @param url - The URL to send the POST request to.\n   * @param body - The request body as a string, Buffer, or Readable stream.\n   * @param options - Additional fetch options to use for the POST request.\n   * @returns A Promise that resolves to the Response object for the POST request.\n   */\n  protected async post(\n    url: URL,\n    body: string | Buffer | Readable,\n    options?: FetchOptions\n  ): Promise<any> {\n    return this._handleRequest(\"POST\", url, body, options);\n  }\n\n  /**\n   * Handles an HTTP PUT request using the provided URL, request body, and optional request options.\n   *\n   * @param url - The URL to send the PUT request to.\n   * @param body - The request body as a string, Buffer, or Readable stream.\n   * @param options - Additional fetch options to use for the PUT request.\n   * @returns A Promise that resolves to the Response object for the PUT request.\n   */\n  protected async put(\n    url: URL,\n    body: string | Buffer | Readable,\n    options?: FetchOptions\n  ): Promise<any> {\n    return this._handleRequest(\"PUT\", url, body, options);\n  }\n\n  /**\n   * Handles an HTTP PATCH request using the provided URL, request body, and optional request options.\n   *\n   * @param url - The URL to send the PATCH request to.\n   * @param body - The request body as a string, Buffer, or Readable stream.\n   * @param options - Additional fetch options to use for the PATCH request.\n   * @returns A Promise that resolves to the Response object for the PATCH request.\n   */\n  protected async patch(\n    url: URL,\n    body: string | Buffer | Readable,\n    options?: FetchOptions\n  ): Promise<any> {\n    return this._handleRequest(\"PATCH\", url, body, options);\n  }\n\n  /**\n   * Handles an HTTP DELETE request using the provided URL and optional request options.\n   *\n   * @param url - The URL to send the DELETE request to.\n   * @param options - Additional fetch options to use for the DELETE request.\n   * @returns A Promise that resolves to the Response object for the DELETE request.\n   */\n  protected async delete(url: URL, options?: FetchOptions): Promise<any> {\n    return this._handleRequest(\"DELETE\", url, options);\n  }\n\n  /**\n   * Determines whether the current instance should proxy requests.\n   * @returns {boolean} true if the current instance should proxy requests; otherwise, false\n   */\n  get proxy(): boolean {\n    return this.key === \"proxy\" && !!this.namespaceOptions.fetch.options.proxy?.url;\n  }\n}\n\nexport { AbstractRestClient as AbstractRestfulClient };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}