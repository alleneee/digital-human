{"ast":null,"code":"var _jsxFileName = \"/Users/niko/digital-human/frontend/src/components/RecordButton/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useWebSocket } from '../../contexts/WebSocketContext';\nimport { useNotification } from '../../contexts/NotificationContext';\nimport './RecordButton.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecordButton = () => {\n  _s();\n  const {\n    sendAudio,\n    isProcessing\n  } = useWebSocket();\n  const {\n    error,\n    info\n  } = useNotification();\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n  const [stream, setStream] = useState(null);\n  useEffect(() => {\n    return () => {\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n      }\n      if (recorder) {\n        recorder.ondataavailable = null;\n        recorder.onstop = null;\n      }\n    };\n  }, [recorder, stream]);\n  const startRecording = async () => {\n    try {\n      const audioStream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      setStream(audioStream);\n      const mediaRecorder = new MediaRecorder(audioStream);\n      setRecorder(mediaRecorder);\n      const audioChunks = [];\n      mediaRecorder.ondataavailable = e => {\n        if (e.data.size > 0) {\n          audioChunks.push(e.data);\n          console.log(`发送音频数据块: ${e.data.size} 字节`);\n          const audioBlob = new Blob([e.data], {\n            type: 'audio/wav'\n          });\n          sendAudio(audioBlob);\n        }\n      };\n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunks, {\n          type: 'audio/wav'\n        });\n        console.log(`录音完成，总大小: ${audioBlob.size} 字节`);\n        sendAudio(audioBlob);\n        setIsRecording(false);\n      };\n      mediaRecorder.start();\n      setIsRecording(true);\n      console.log('录音已开始，音频数据将分块发送到服务器');\n    } catch (err) {\n      console.error('无法访问麦克风:', err);\n      error(`无法访问麦克风: ${err.message}`);\n      setIsRecording(false);\n    }\n  };\n  const stopRecording = () => {\n    if (recorder && recorder.state !== 'inactive') {\n      recorder.stop();\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n        setStream(null);\n      }\n    }\n  };\n  const handleRecordClick = () => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      startRecording();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `record-button ${isRecording ? 'recording' : ''} ${isProcessing ? 'disabled' : ''}`,\n    onClick: handleRecordClick,\n    disabled: isProcessing,\n    children: isRecording ? '停止录音' : '开始录音'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(RecordButton, \"qg8cQZuUq4cQnGUK80ZLPqvG0cI=\", false, function () {\n  return [useWebSocket, useNotification];\n});\n_c = RecordButton;\nexport default RecordButton;\nvar _c;\n$RefreshReg$(_c, \"RecordButton\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useWebSocket","useNotification","jsxDEV","_jsxDEV","RecordButton","_s","sendAudio","isProcessing","error","info","isRecording","setIsRecording","recorder","setRecorder","stream","setStream","getTracks","forEach","track","stop","ondataavailable","onstop","startRecording","audioStream","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","audioChunks","e","data","size","push","console","log","audioBlob","Blob","type","start","err","message","stopRecording","state","handleRecordClick","className","onClick","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/niko/digital-human/frontend/src/components/RecordButton/index.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useWebSocket } from '../../contexts/WebSocketContext';\nimport { useNotification } from '../../contexts/NotificationContext';\nimport './RecordButton.css';\n\nconst RecordButton = () => {\n  const { sendAudio, isProcessing } = useWebSocket();\n  const { error, info } = useNotification();\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n  const [stream, setStream] = useState(null);\n  \n  useEffect(() => {\n    return () => {\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n      }\n      if (recorder) {\n        recorder.ondataavailable = null;\n        recorder.onstop = null;\n      }\n    };\n  }, [recorder, stream]);\n  \n  const startRecording = async () => {\n    try {\n      const audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      setStream(audioStream);\n      \n      const mediaRecorder = new MediaRecorder(audioStream);\n      setRecorder(mediaRecorder);\n      \n      const audioChunks = [];\n      \n      mediaRecorder.ondataavailable = (e) => {\n        if (e.data.size > 0) {\n          audioChunks.push(e.data);\n          console.log(`发送音频数据块: ${e.data.size} 字节`);\n          const audioBlob = new Blob([e.data], { type: 'audio/wav' });\n          sendAudio(audioBlob);\n        }\n      };\n      \n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\n        console.log(`录音完成，总大小: ${audioBlob.size} 字节`);\n        sendAudio(audioBlob);\n        setIsRecording(false);\n      };\n      \n      mediaRecorder.start();\n      setIsRecording(true);\n      console.log('录音已开始，音频数据将分块发送到服务器');\n    } catch (err) {\n      console.error('无法访问麦克风:', err);\n      error(`无法访问麦克风: ${err.message}`);\n      setIsRecording(false);\n    }\n  };\n  \n  const stopRecording = () => {\n    if (recorder && recorder.state !== 'inactive') {\n      recorder.stop();\n      \n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n        setStream(null);\n      }\n    }\n  };\n  \n  const handleRecordClick = () => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      startRecording();\n    }\n  };\n  \n  return (\n    <button \n      className={`record-button ${isRecording ? 'recording' : ''} ${isProcessing ? 'disabled' : ''}`}\n      onClick={handleRecordClick}\n      disabled={isProcessing}\n    >\n      {isRecording ? '停止录音' : '开始录音'}\n    </button>\n  );\n};\n\nexport default RecordButton;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,YAAY,QAAQ,iCAAiC;AAC9D,SAASC,eAAe,QAAQ,oCAAoC;AACpE,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC,SAAS;IAAEC;EAAa,CAAC,GAAGP,YAAY,CAAC,CAAC;EAClD,MAAM;IAAEQ,KAAK;IAAEC;EAAK,CAAC,GAAGR,eAAe,CAAC,CAAC;EACzC,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIgB,MAAM,EAAE;QACVA,MAAM,CAACE,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;MACnD;MACA,IAAIP,QAAQ,EAAE;QACZA,QAAQ,CAACQ,eAAe,GAAG,IAAI;QAC/BR,QAAQ,CAACS,MAAM,GAAG,IAAI;MACxB;IACF,CAAC;EACH,CAAC,EAAE,CAACT,QAAQ,EAAEE,MAAM,CAAC,CAAC;EAEtB,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,WAAW,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MAC9EZ,SAAS,CAACQ,WAAW,CAAC;MAEtB,MAAMK,aAAa,GAAG,IAAIC,aAAa,CAACN,WAAW,CAAC;MACpDV,WAAW,CAACe,aAAa,CAAC;MAE1B,MAAME,WAAW,GAAG,EAAE;MAEtBF,aAAa,CAACR,eAAe,GAAIW,CAAC,IAAK;QACrC,IAAIA,CAAC,CAACC,IAAI,CAACC,IAAI,GAAG,CAAC,EAAE;UACnBH,WAAW,CAACI,IAAI,CAACH,CAAC,CAACC,IAAI,CAAC;UACxBG,OAAO,CAACC,GAAG,CAAC,YAAYL,CAAC,CAACC,IAAI,CAACC,IAAI,KAAK,CAAC;UACzC,MAAMI,SAAS,GAAG,IAAIC,IAAI,CAAC,CAACP,CAAC,CAACC,IAAI,CAAC,EAAE;YAAEO,IAAI,EAAE;UAAY,CAAC,CAAC;UAC3DjC,SAAS,CAAC+B,SAAS,CAAC;QACtB;MACF,CAAC;MAEDT,aAAa,CAACP,MAAM,GAAG,MAAM;QAC3B,MAAMgB,SAAS,GAAG,IAAIC,IAAI,CAACR,WAAW,EAAE;UAAES,IAAI,EAAE;QAAY,CAAC,CAAC;QAC9DJ,OAAO,CAACC,GAAG,CAAC,aAAaC,SAAS,CAACJ,IAAI,KAAK,CAAC;QAC7C3B,SAAS,CAAC+B,SAAS,CAAC;QACpB1B,cAAc,CAAC,KAAK,CAAC;MACvB,CAAC;MAEDiB,aAAa,CAACY,KAAK,CAAC,CAAC;MACrB7B,cAAc,CAAC,IAAI,CAAC;MACpBwB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZN,OAAO,CAAC3B,KAAK,CAAC,UAAU,EAAEiC,GAAG,CAAC;MAC9BjC,KAAK,CAAC,YAAYiC,GAAG,CAACC,OAAO,EAAE,CAAC;MAChC/B,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;EAED,MAAMgC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI/B,QAAQ,IAAIA,QAAQ,CAACgC,KAAK,KAAK,UAAU,EAAE;MAC7ChC,QAAQ,CAACO,IAAI,CAAC,CAAC;MAEf,IAAIL,MAAM,EAAE;QACVA,MAAM,CAACE,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;QACjDJ,SAAS,CAAC,IAAI,CAAC;MACjB;IACF;EACF,CAAC;EAED,MAAM8B,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAInC,WAAW,EAAE;MACfiC,aAAa,CAAC,CAAC;IACjB,CAAC,MAAM;MACLrB,cAAc,CAAC,CAAC;IAClB;EACF,CAAC;EAED,oBACEnB,OAAA;IACE2C,SAAS,EAAE,iBAAiBpC,WAAW,GAAG,WAAW,GAAG,EAAE,IAAIH,YAAY,GAAG,UAAU,GAAG,EAAE,EAAG;IAC/FwC,OAAO,EAAEF,iBAAkB;IAC3BG,QAAQ,EAAEzC,YAAa;IAAA0C,QAAA,EAEtBvC,WAAW,GAAG,MAAM,GAAG;EAAM;IAAAwC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEb,CAAC;AAAChD,EAAA,CAnFID,YAAY;EAAA,QACoBJ,YAAY,EACxBC,eAAe;AAAA;AAAAqD,EAAA,GAFnClD,YAAY;AAqFlB,eAAeA,YAAY;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}