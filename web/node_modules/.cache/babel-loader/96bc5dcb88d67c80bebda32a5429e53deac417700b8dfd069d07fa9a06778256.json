{"ast":null,"code":"export var AgentEvents;\n(function (AgentEvents) {\n  /**\n   * Built in socket events.\n   */\n  AgentEvents[\"Open\"] = \"Open\";\n  AgentEvents[\"Close\"] = \"Close\";\n  AgentEvents[\"Error\"] = \"Error\";\n  /**\n   * Audio event?\n   */\n  AgentEvents[\"Audio\"] = \"Audio\";\n  /**\n   * Confirms the successful connection to the websocket.\n   * { type: \"Welcome\", session_id: \"String\"}\n   */\n  AgentEvents[\"Welcome\"] = \"Welcome\";\n  /**\n   * Confirms that your `configure` request was successful.\n   * { type: \"SettingsApplied\" }\n   */\n  AgentEvents[\"SettingsApplied\"] = \"SettingsApplied\";\n  /**\n   * Triggered when the agent \"hears\" the user say something.\n   * { type: \"ConversationText\", role: string, content: string }\n   */\n  AgentEvents[\"ConversationText\"] = \"ConversationText\";\n  /**\n   * Triggered when the agent begins receiving user audio.\n   * { type: \"UserStartedSpeaking\" }\n   */\n  AgentEvents[\"UserStartedSpeaking\"] = \"UserStartedSpeaking\";\n  /**\n   * Triggered when the user has stopped speaking and the agent is processing the audio.\n   * { type: \"AgentThinking\", content: string }\n   */\n  AgentEvents[\"AgentThinking\"] = \"AgentThinking\";\n  /**\n   * A request to call client-side functions.\n   * { type: \"FunctionCallRequest\", function_call_id: string, function_name: string, input: Record<string, any> }\n   */\n  AgentEvents[\"FunctionCallRequest\"] = \"FunctionCallRequest\";\n  /**\n   * Debug message triggered when the agent is calling a function.\n   * { type: \"FunctionCalling\" }\n   */\n  AgentEvents[\"FunctionCalling\"] = \"FunctionCalling\";\n  /**\n   * Triggered when the agent begins streaming an audio response.\n   * { type: \"AgentStartedSpeaking\", total_latency: number, tts_latency: number, ttt_latency: number }\n   */\n  AgentEvents[\"AgentStartedSpeaking\"] = \"AgentStartedSpeaking\";\n  /**\n   * Triggered when the agent has finished streaming an audio response.\n   * { type: \"AgentAudioDone\" }\n   */\n  AgentEvents[\"AgentAudioDone\"] = \"AgentAudioDone\";\n  /**\n   * This event is only emitted when you send an `InjectAgentMessage` request while\n   * the user is currently speaking or the server is processing user audio.\n   * { type: \"InjectionRefused\" }\n   */\n  AgentEvents[\"InjectionRefused\"] = \"InjectionRefused\";\n  /**\n   * A successful response to the `UpdateInstructions` request.\n   * { type: \"InstructionsUpdated\" }\n   */\n  AgentEvents[\"InstructionsUpdated\"] = \"InstructionsUpdated\";\n  /**\n   * A successful response to the `UpdateSpeak` request.\n   * { type: \"SpeakUpdated\" }\n   */\n  AgentEvents[\"SpeakUpdated\"] = \"SpeakUpdated\";\n  /**\n   * Catch all for any other message event\n   */\n  AgentEvents[\"Unhandled\"] = \"Unhandled\";\n})(AgentEvents || (AgentEvents = {}));","map":{"version":3,"names":["AgentEvents"],"sources":["/Users/niko/node_modules/.pnpm/@deepgram+sdk@3.11.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@deepgram/sdk/src/lib/enums/AgentEvents.ts"],"sourcesContent":["export enum AgentEvents {\n  /**\n   * Built in socket events.\n   */\n  Open = \"Open\",\n  Close = \"Close\",\n  Error = \"Error\",\n  /**\n   * Audio event?\n   */\n  Audio = \"Audio\",\n  /**\n   * Confirms the successful connection to the websocket.\n   * { type: \"Welcome\", session_id: \"String\"}\n   */\n  Welcome = \"Welcome\",\n  /**\n   * Confirms that your `configure` request was successful.\n   * { type: \"SettingsApplied\" }\n   */\n  SettingsApplied = \"SettingsApplied\",\n  /**\n   * Triggered when the agent \"hears\" the user say something.\n   * { type: \"ConversationText\", role: string, content: string }\n   */\n  ConversationText = \"ConversationText\",\n  /**\n   * Triggered when the agent begins receiving user audio.\n   * { type: \"UserStartedSpeaking\" }\n   */\n  UserStartedSpeaking = \"UserStartedSpeaking\",\n  /**\n   * Triggered when the user has stopped speaking and the agent is processing the audio.\n   * { type: \"AgentThinking\", content: string }\n   */\n  AgentThinking = \"AgentThinking\",\n  /**\n   * A request to call client-side functions.\n   * { type: \"FunctionCallRequest\", function_call_id: string, function_name: string, input: Record<string, any> }\n   */\n  FunctionCallRequest = \"FunctionCallRequest\",\n  /**\n   * Debug message triggered when the agent is calling a function.\n   * { type: \"FunctionCalling\" }\n   */\n  FunctionCalling = \"FunctionCalling\",\n  /**\n   * Triggered when the agent begins streaming an audio response.\n   * { type: \"AgentStartedSpeaking\", total_latency: number, tts_latency: number, ttt_latency: number }\n   */\n  AgentStartedSpeaking = \"AgentStartedSpeaking\",\n  /**\n   * Triggered when the agent has finished streaming an audio response.\n   * { type: \"AgentAudioDone\" }\n   */\n  AgentAudioDone = \"AgentAudioDone\",\n  /**\n   * This event is only emitted when you send an `InjectAgentMessage` request while\n   * the user is currently speaking or the server is processing user audio.\n   * { type: \"InjectionRefused\" }\n   */\n  InjectionRefused = \"InjectionRefused\",\n  /**\n   * A successful response to the `UpdateInstructions` request.\n   * { type: \"InstructionsUpdated\" }\n   */\n  InstructionsUpdated = \"InstructionsUpdated\",\n  /**\n   * A successful response to the `UpdateSpeak` request.\n   * { type: \"SpeakUpdated\" }\n   */\n  SpeakUpdated = \"SpeakUpdated\",\n\n  /**\n   * Catch all for any other message event\n   */\n  Unhandled = \"Unhandled\",\n}\n"],"mappings":"AAAA,WAAYA,WA6EX;AA7ED,WAAYA,WAAW;EACrB;;;EAGAA,WAAA,iBAAa;EACbA,WAAA,mBAAe;EACfA,WAAA,mBAAe;EACf;;;EAGAA,WAAA,mBAAe;EACf;;;;EAIAA,WAAA,uBAAmB;EACnB;;;;EAIAA,WAAA,uCAAmC;EACnC;;;;EAIAA,WAAA,yCAAqC;EACrC;;;;EAIAA,WAAA,+CAA2C;EAC3C;;;;EAIAA,WAAA,mCAA+B;EAC/B;;;;EAIAA,WAAA,+CAA2C;EAC3C;;;;EAIAA,WAAA,uCAAmC;EACnC;;;;EAIAA,WAAA,iDAA6C;EAC7C;;;;EAIAA,WAAA,qCAAiC;EACjC;;;;;EAKAA,WAAA,yCAAqC;EACrC;;;;EAIAA,WAAA,+CAA2C;EAC3C;;;;EAIAA,WAAA,iCAA6B;EAE7B;;;EAGAA,WAAA,2BAAuB;AACzB,CAAC,EA7EWA,WAAW,KAAXA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}