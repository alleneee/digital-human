{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';// 默认配置\nimport{jsx as _jsx}from\"react/jsx-runtime\";const defaultConfig={language:'zh-CN',voice:'aura-mandarin',modelPath:'/models/default/Hiyori/Hiyori.model3.json',// 注意这里的路径是相对于public目录的\ntheme:'light',// EchoMimic相关配置\nuseEchoMimic:false,refImagePath:null};// 创建上下文\nconst ConfigContext=/*#__PURE__*/createContext();// 配置提供者组件\nexport const ConfigProvider=_ref=>{let{children}=_ref;const[config,setConfig]=useState(()=>{// 从本地存储加载配置\nconst savedConfig=localStorage.getItem('digital-human-config');return savedConfig?JSON.parse(savedConfig):defaultConfig;});// 当配置变化时保存到本地存储并发送到服务器\nuseEffect(()=>{localStorage.setItem('digital-human-config',JSON.stringify(config));// 将配置同步到服务器\nif(config.useEchoMimic){fetch('/api/update_config',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({useEchoMimic:config.useEchoMimic,refImagePath:config.refImagePath,language:config.language})}).catch(err=>{console.error('同步配置到服务器失败:',err);});}},[config]);// 更新配置\nconst updateConfig=newConfig=>{setConfig(prev=>({...prev,...newConfig}));};// 应用主题\nuseEffect(()=>{if(config.theme==='dark'){document.body.classList.add('dark-theme');}else{document.body.classList.remove('dark-theme');}},[config.theme]);return/*#__PURE__*/_jsx(ConfigContext.Provider,{value:{config,updateConfig},children:children});};// 自定义Hook，用于在组件中访问配置\nexport const useConfig=()=>{const context=useContext(ConfigContext);if(!context){throw new Error('useConfig must be used within a ConfigProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsx","_jsx","defaultConfig","language","voice","modelPath","theme","useEchoMimic","refImagePath","ConfigContext","ConfigProvider","_ref","children","config","setConfig","savedConfig","localStorage","getItem","JSON","parse","setItem","stringify","fetch","method","headers","body","catch","err","console","error","updateConfig","newConfig","prev","document","classList","add","remove","Provider","value","useConfig","context","Error"],"sources":["/Users/niko/digital-human/frontend/src/contexts/ConfigContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// 默认配置\nconst defaultConfig = {\n  language: 'zh-CN',\n  voice: 'aura-mandarin',\n  modelPath: '/models/default/Hiyori/Hiyori.model3.json', // 注意这里的路径是相对于public目录的\n  theme: 'light',\n  // EchoMimic相关配置\n  useEchoMimic: false,\n  refImagePath: null\n};\n\n// 创建上下文\nconst ConfigContext = createContext();\n\n// 配置提供者组件\nexport const ConfigProvider = ({ children }) => {\n  const [config, setConfig] = useState(() => {\n    // 从本地存储加载配置\n    const savedConfig = localStorage.getItem('digital-human-config');\n    return savedConfig ? JSON.parse(savedConfig) : defaultConfig;\n  });\n\n  // 当配置变化时保存到本地存储并发送到服务器\n  useEffect(() => {\n    localStorage.setItem('digital-human-config', JSON.stringify(config));\n    \n    // 将配置同步到服务器\n    if (config.useEchoMimic) {\n      fetch('/api/update_config', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          useEchoMimic: config.useEchoMimic,\n          refImagePath: config.refImagePath,\n          language: config.language\n        })\n      }).catch(err => {\n        console.error('同步配置到服务器失败:', err);\n      });\n    }\n  }, [config]);\n\n  // 更新配置\n  const updateConfig = (newConfig) => {\n    setConfig(prev => ({ ...prev, ...newConfig }));\n  };\n\n  // 应用主题\n  useEffect(() => {\n    if (config.theme === 'dark') {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    }\n  }, [config.theme]);\n\n  return (\n    <ConfigContext.Provider value={{ config, updateConfig }}>\n      {children}\n    </ConfigContext.Provider>\n  );\n};\n\n// 自定义Hook，用于在组件中访问配置\nexport const useConfig = () => {\n  const context = useContext(ConfigContext);\n  if (!context) {\n    throw new Error('useConfig must be used within a ConfigProvider');\n  }\n  return context;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAE7E;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,aAAa,CAAG,CACpBC,QAAQ,CAAE,OAAO,CACjBC,KAAK,CAAE,eAAe,CACtBC,SAAS,CAAE,2CAA2C,CAAE;AACxDC,KAAK,CAAE,OAAO,CACd;AACAC,YAAY,CAAE,KAAK,CACnBC,YAAY,CAAE,IAChB,CAAC,CAED;AACA,KAAM,CAAAC,aAAa,cAAGb,aAAa,CAAC,CAAC,CAErC;AACA,MAAO,MAAM,CAAAc,cAAc,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACzC,KAAM,CAACE,MAAM,CAAEC,SAAS,CAAC,CAAGjB,QAAQ,CAAC,IAAM,CACzC;AACA,KAAM,CAAAkB,WAAW,CAAGC,YAAY,CAACC,OAAO,CAAC,sBAAsB,CAAC,CAChE,MAAO,CAAAF,WAAW,CAAGG,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC,CAAGb,aAAa,CAC9D,CAAC,CAAC,CAEF;AACAH,SAAS,CAAC,IAAM,CACdiB,YAAY,CAACI,OAAO,CAAC,sBAAsB,CAAEF,IAAI,CAACG,SAAS,CAACR,MAAM,CAAC,CAAC,CAEpE;AACA,GAAIA,MAAM,CAACN,YAAY,CAAE,CACvBe,KAAK,CAAC,oBAAoB,CAAE,CAC1BC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEP,IAAI,CAACG,SAAS,CAAC,CACnBd,YAAY,CAAEM,MAAM,CAACN,YAAY,CACjCC,YAAY,CAAEK,MAAM,CAACL,YAAY,CACjCL,QAAQ,CAAEU,MAAM,CAACV,QACnB,CAAC,CACH,CAAC,CAAC,CAACuB,KAAK,CAACC,GAAG,EAAI,CACdC,OAAO,CAACC,KAAK,CAAC,aAAa,CAAEF,GAAG,CAAC,CACnC,CAAC,CAAC,CACJ,CACF,CAAC,CAAE,CAACd,MAAM,CAAC,CAAC,CAEZ;AACA,KAAM,CAAAiB,YAAY,CAAIC,SAAS,EAAK,CAClCjB,SAAS,CAACkB,IAAI,GAAK,CAAE,GAAGA,IAAI,CAAE,GAAGD,SAAU,CAAC,CAAC,CAAC,CAChD,CAAC,CAED;AACAhC,SAAS,CAAC,IAAM,CACd,GAAIc,MAAM,CAACP,KAAK,GAAK,MAAM,CAAE,CAC3B2B,QAAQ,CAACR,IAAI,CAACS,SAAS,CAACC,GAAG,CAAC,YAAY,CAAC,CAC3C,CAAC,IAAM,CACLF,QAAQ,CAACR,IAAI,CAACS,SAAS,CAACE,MAAM,CAAC,YAAY,CAAC,CAC9C,CACF,CAAC,CAAE,CAACvB,MAAM,CAACP,KAAK,CAAC,CAAC,CAElB,mBACEL,IAAA,CAACQ,aAAa,CAAC4B,QAAQ,EAACC,KAAK,CAAE,CAAEzB,MAAM,CAAEiB,YAAa,CAAE,CAAAlB,QAAA,CACrDA,QAAQ,CACa,CAAC,CAE7B,CAAC,CAED;AACA,MAAO,MAAM,CAAA2B,SAAS,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAAAC,OAAO,CAAG1C,UAAU,CAACW,aAAa,CAAC,CACzC,GAAI,CAAC+B,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,gDAAgD,CAAC,CACnE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}