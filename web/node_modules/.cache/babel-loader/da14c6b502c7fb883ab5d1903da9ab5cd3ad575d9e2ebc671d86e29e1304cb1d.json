{"ast":null,"code":"import { AbstractClient } from \"./AbstractClient\";\nimport { ListenLiveClient } from \"./ListenLiveClient\";\nimport { ListenRestClient } from \"./ListenRestClient\";\n/**\n * The `ListenClient` class extends the `AbstractClient` class and provides access to the \"listen\" namespace.\n * It exposes two methods:\n *\n * 1. `prerecorded()`: Returns a `ListenRestClient` instance for interacting with the prerecorded listen API.\n * 2. `live(transcriptionOptions: LiveSchema = {}, endpoint = \":version/listen\")`: Returns a `ListenLiveClient` instance for interacting with the live listen API, with the provided transcription options and endpoint.\n */\nexport class ListenClient extends AbstractClient {\n  constructor() {\n    super(...arguments);\n    this.namespace = \"listen\";\n  }\n  /**\n   * Returns a `ListenRestClient` instance for interacting with the prerecorded listen API.\n   */\n  get prerecorded() {\n    return new ListenRestClient(this.options);\n  }\n  /**\n   * Returns a `ListenLiveClient` instance for interacting with the live listen API, with the provided transcription options and endpoint.\n   * @param {LiveSchema} [transcriptionOptions={}] - The transcription options to use for the live listen API.\n   * @param {string} [endpoint=\":version/listen\"] - The endpoint to use for the live listen API.\n   * @returns {ListenLiveClient} - A `ListenLiveClient` instance for interacting with the live listen API.\n   */\n  live(transcriptionOptions = {}, endpoint = \":version/listen\") {\n    return new ListenLiveClient(this.options, transcriptionOptions, endpoint);\n  }\n}","map":{"version":3,"names":["AbstractClient","ListenLiveClient","ListenRestClient","ListenClient","constructor","namespace","prerecorded","options","live","transcriptionOptions","endpoint"],"sources":["/Users/niko/node_modules/.pnpm/@deepgram+sdk@3.11.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@deepgram/sdk/src/packages/ListenClient.ts"],"sourcesContent":["import { AbstractClient } from \"./AbstractClient\";\nimport { ListenLiveClient } from \"./ListenLiveClient\";\nimport { ListenRestClient } from \"./ListenRestClient\";\nimport { LiveSchema } from \"../lib/types\";\n\n/**\n * The `ListenClient` class extends the `AbstractClient` class and provides access to the \"listen\" namespace.\n * It exposes two methods:\n *\n * 1. `prerecorded()`: Returns a `ListenRestClient` instance for interacting with the prerecorded listen API.\n * 2. `live(transcriptionOptions: LiveSchema = {}, endpoint = \":version/listen\")`: Returns a `ListenLiveClient` instance for interacting with the live listen API, with the provided transcription options and endpoint.\n */\nexport class ListenClient extends AbstractClient {\n  public namespace: string = \"listen\";\n\n  /**\n   * Returns a `ListenRestClient` instance for interacting with the prerecorded listen API.\n   */\n  get prerecorded() {\n    return new ListenRestClient(this.options);\n  }\n\n  /**\n   * Returns a `ListenLiveClient` instance for interacting with the live listen API, with the provided transcription options and endpoint.\n   * @param {LiveSchema} [transcriptionOptions={}] - The transcription options to use for the live listen API.\n   * @param {string} [endpoint=\":version/listen\"] - The endpoint to use for the live listen API.\n   * @returns {ListenLiveClient} - A `ListenLiveClient` instance for interacting with the live listen API.\n   */\n  public live(\n    transcriptionOptions: LiveSchema = {},\n    endpoint: string = \":version/listen\"\n  ): ListenLiveClient {\n    return new ListenLiveClient(this.options, transcriptionOptions, endpoint);\n  }\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,gBAAgB,QAAQ,oBAAoB;AAGrD;;;;;;;AAOA,OAAM,MAAOC,YAAa,SAAQH,cAAc;EAAhDI,YAAA;;IACS,KAAAC,SAAS,GAAW,QAAQ;EAqBrC;EAnBE;;;EAGA,IAAIC,WAAWA,CAAA;IACb,OAAO,IAAIJ,gBAAgB,CAAC,IAAI,CAACK,OAAO,CAAC;EAC3C;EAEA;;;;;;EAMOC,IAAIA,CACTC,oBAAA,GAAmC,EAAE,EACrCC,QAAA,GAAmB,iBAAiB;IAEpC,OAAO,IAAIT,gBAAgB,CAAC,IAAI,CAACM,OAAO,EAAEE,oBAAoB,EAAEC,QAAQ,CAAC;EAC3E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}